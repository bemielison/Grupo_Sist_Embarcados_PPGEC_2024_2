
Projeto9_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e060  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800e300  0800e300  0000f300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e3d4  0800e3d4  0000f3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e3dc  0800e3dc  0000f3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e3e0  0800e3e0  0000f3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800e3e4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800e448  00010064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800e4a8  000100c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f8  24000124  0800e508  00010124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000a1c  0800e508  00010a1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00010124  2**0
                  CONTENTS, READONLY
 12 .debug_info   000279af  00000000  00000000  00010152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ea1  00000000  00000000  00037b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd0  00000000  00000000  0003b9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000176a  00000000  00000000  0003d778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c599  00000000  00000000  0003eee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028e51  00000000  00000000  0007b47b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018558d  00000000  00000000  000a42cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00229859  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008898  00000000  00000000  0022989c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  00232134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e2e8 	.word	0x0800e2e8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800e2e8 	.word	0x0800e2e8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f001 f973 	bl	8001970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f931 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f000 fbc3 	bl	8000e18 <MX_GPIO_Init>
  MX_ETH_Init();
 8000692:	f000 fa63 	bl	8000b5c <MX_ETH_Init>
  MX_I2C1_Init();
 8000696:	f000 faad 	bl	8000bf4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800069a:	f000 fb3f 	bl	8000d1c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800069e:	f000 fb89 	bl	8000db4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80006a2:	f000 f9a5 	bl	80009f0 <MX_ADC1_Init>
  MX_DAC1_Init();
 80006a6:	f000 fa27 	bl	8000af8 <MX_DAC1_Init>
  MX_TIM1_Init();
 80006aa:	f000 fae3 	bl	8000c74 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 80006ae:	2209      	movs	r2, #9
 80006b0:	491d      	ldr	r1, [pc, #116]	@ (8000728 <main+0xa8>)
 80006b2:	481e      	ldr	r0, [pc, #120]	@ (800072c <main+0xac>)
 80006b4:	f00a f958 	bl	800a968 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Init(&htim1);
 80006b8:	481d      	ldr	r0, [pc, #116]	@ (8000730 <main+0xb0>)
 80006ba:	f009 fc12 	bl	8009ee2 <HAL_TIM_PWM_Init>
  //TIM1->CCR1 = 50;
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006be:	2100      	movs	r1, #0
 80006c0:	481b      	ldr	r0, [pc, #108]	@ (8000730 <main+0xb0>)
 80006c2:	f009 fc6f 	bl	8009fa4 <HAL_TIM_PWM_Start>
  while (1)
  {



 for (int i = 0; i < 255; i++){
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	e009      	b.n	80006e0 <main+0x60>
	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 80006cc:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <main+0xb0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	635a      	str	r2, [r3, #52]	@ 0x34
	 HAL_Delay(5);
 80006d4:	2005      	movs	r0, #5
 80006d6:	f001 f9dd 	bl	8001a94 <HAL_Delay>
 for (int i = 0; i < 255; i++){
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3301      	adds	r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2bfe      	cmp	r3, #254	@ 0xfe
 80006e4:	ddf2      	ble.n	80006cc <main+0x4c>
 }

 for (int i = 255; i > 0; i--){
 80006e6:	23ff      	movs	r3, #255	@ 0xff
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	e009      	b.n	8000700 <main+0x80>
 	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 80006ec:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <main+0xb0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	635a      	str	r2, [r3, #52]	@ 0x34
 	 HAL_Delay(5);
 80006f4:	2005      	movs	r0, #5
 80006f6:	f001 f9cd 	bl	8001a94 <HAL_Delay>
 for (int i = 255; i > 0; i--){
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	3b01      	subs	r3, #1
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	dcf2      	bgt.n	80006ec <main+0x6c>
  }


      Read_LDR();
 8000706:	f000 f815 	bl	8000734 <Read_LDR>
	  HAL_Delay(100);
 800070a:	2064      	movs	r0, #100	@ 0x64
 800070c:	f001 f9c2 	bl	8001a94 <HAL_Delay>


	  Read_Pot();
 8000710:	f000 f8a4 	bl	800085c <Read_Pot>
	  HAL_Delay(100);
 8000714:	2064      	movs	r0, #100	@ 0x64
 8000716:	f001 f9bd 	bl	8001a94 <HAL_Delay>

	  Read_Temp();
 800071a:	f000 f855 	bl	80007c8 <Read_Temp>
	  HAL_Delay(100);
 800071e:	2064      	movs	r0, #100	@ 0x64
 8000720:	f001 f9b8 	bl	8001a94 <HAL_Delay>
  {
 8000724:	e7cf      	b.n	80006c6 <main+0x46>
 8000726:	bf00      	nop
 8000728:	240008b8 	.word	0x240008b8
 800072c:	24000340 	.word	0x24000340
 8000730:	240002f4 	.word	0x240002f4

08000734 <Read_LDR>:

	}

}

void Read_LDR(){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
	 // Read analog data from A0 (channel 0) of the PCF8591
		  LDR = PCF8591_ReadAnalog(0);
 800073a:	2000      	movs	r0, #0
 800073c:	f000 fc48 	bl	8000fd0 <PCF8591_ReadAnalog>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <Read_LDR+0x7c>)
 8000746:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(100); // Wait before next reading
 8000748:	2064      	movs	r0, #100	@ 0x64
 800074a:	f001 f9a3 	bl	8001a94 <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN0: ");
 800074e:	1d38      	adds	r0, r7, #4
 8000750:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <Read_LDR+0x80>)
 8000752:	4a19      	ldr	r2, [pc, #100]	@ (80007b8 <Read_LDR+0x84>)
 8000754:	2108      	movs	r1, #8
 8000756:	f00d f901 	bl	800d95c <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fdbf 	bl	80002e0 <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	b29a      	uxth	r2, r3
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	4619      	mov	r1, r3
 800076a:	4814      	ldr	r0, [pc, #80]	@ (80007bc <Read_LDR+0x88>)
 800076c:	f00a f868 	bl	800a840 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8000770:	2064      	movs	r0, #100	@ 0x64
 8000772:	f001 f98f 	bl	8001a94 <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", LDR);
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <Read_LDR+0x7c>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	1d38      	adds	r0, r7, #4
 800077c:	4a10      	ldr	r2, [pc, #64]	@ (80007c0 <Read_LDR+0x8c>)
 800077e:	2104      	movs	r1, #4
 8000780:	f00d f8ec 	bl	800d95c <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fdaa 	bl	80002e0 <strlen>
 800078c:	4603      	mov	r3, r0
 800078e:	b29a      	uxth	r2, r3
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4809      	ldr	r0, [pc, #36]	@ (80007bc <Read_LDR+0x88>)
 8000796:	f00a f853 	bl	800a840 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 800079a:	2064      	movs	r0, #100	@ 0x64
 800079c:	f001 f97a 	bl	8001a94 <HAL_Delay>
		  execute_flag = '0';
 80007a0:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <Read_LDR+0x90>)
 80007a2:	2230      	movs	r2, #48	@ 0x30
 80007a4:	701a      	strb	r2, [r3, #0]


}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	240008c1 	.word	0x240008c1
 80007b4:	0800e300 	.word	0x0800e300
 80007b8:	0800e308 	.word	0x0800e308
 80007bc:	24000340 	.word	0x24000340
 80007c0:	0800e310 	.word	0x0800e310
 80007c4:	24000000 	.word	0x24000000

080007c8 <Read_Temp>:

void Read_Temp(){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
	 // Read analog data from A1 (channel 1) of the PCF8591
		  TEMP = PCF8591_ReadAnalog(1);
 80007ce:	2001      	movs	r0, #1
 80007d0:	f000 fbfe 	bl	8000fd0 <PCF8591_ReadAnalog>
 80007d4:	4603      	mov	r3, r0
 80007d6:	461a      	mov	r2, r3
 80007d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <Read_Temp+0x7c>)
 80007da:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(100); // Wait before next reading
 80007dc:	2064      	movs	r0, #100	@ 0x64
 80007de:	f001 f959 	bl	8001a94 <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN1: ");
 80007e2:	1d38      	adds	r0, r7, #4
 80007e4:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <Read_Temp+0x80>)
 80007e6:	4a19      	ldr	r2, [pc, #100]	@ (800084c <Read_Temp+0x84>)
 80007e8:	2108      	movs	r1, #8
 80007ea:	f00d f8b7 	bl	800d95c <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fd75 	bl	80002e0 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	4619      	mov	r1, r3
 80007fe:	4814      	ldr	r0, [pc, #80]	@ (8000850 <Read_Temp+0x88>)
 8000800:	f00a f81e 	bl	800a840 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8000804:	2064      	movs	r0, #100	@ 0x64
 8000806:	f001 f945 	bl	8001a94 <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", TEMP);
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <Read_Temp+0x7c>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	1d38      	adds	r0, r7, #4
 8000810:	4a10      	ldr	r2, [pc, #64]	@ (8000854 <Read_Temp+0x8c>)
 8000812:	2104      	movs	r1, #4
 8000814:	f00d f8a2 	bl	800d95c <sniprintf>
  		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fd60 	bl	80002e0 <strlen>
 8000820:	4603      	mov	r3, r0
 8000822:	b29a      	uxth	r2, r3
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	4619      	mov	r1, r3
 8000828:	4809      	ldr	r0, [pc, #36]	@ (8000850 <Read_Temp+0x88>)
 800082a:	f00a f809 	bl	800a840 <HAL_UART_Transmit_IT>
  		  HAL_Delay(100);
 800082e:	2064      	movs	r0, #100	@ 0x64
 8000830:	f001 f930 	bl	8001a94 <HAL_Delay>
  		  execute_flag = '0';
 8000834:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <Read_Temp+0x90>)
 8000836:	2230      	movs	r2, #48	@ 0x30
 8000838:	701a      	strb	r2, [r3, #0]

}
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	240008c3 	.word	0x240008c3
 8000848:	0800e318 	.word	0x0800e318
 800084c:	0800e308 	.word	0x0800e308
 8000850:	24000340 	.word	0x24000340
 8000854:	0800e310 	.word	0x0800e310
 8000858:	24000000 	.word	0x24000000

0800085c <Read_Pot>:

void Read_Pot(){
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
	      POT = PCF8591_ReadAnalog(3);
 8000862:	2003      	movs	r0, #3
 8000864:	f000 fbb4 	bl	8000fd0 <PCF8591_ReadAnalog>
 8000868:	4603      	mov	r3, r0
 800086a:	461a      	mov	r2, r3
 800086c:	4b1a      	ldr	r3, [pc, #104]	@ (80008d8 <Read_Pot+0x7c>)
 800086e:	701a      	strb	r2, [r3, #0]
		  // Process the analog_value or send it over UART/Display it
		  HAL_Delay(100); // Wait for 1 second before next reading
 8000870:	2064      	movs	r0, #100	@ 0x64
 8000872:	f001 f90f 	bl	8001a94 <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN3: ");
 8000876:	1d38      	adds	r0, r7, #4
 8000878:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <Read_Pot+0x80>)
 800087a:	4a19      	ldr	r2, [pc, #100]	@ (80008e0 <Read_Pot+0x84>)
 800087c:	2108      	movs	r1, #8
 800087e:	f00d f86d 	bl	800d95c <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fd2b 	bl	80002e0 <strlen>
 800088a:	4603      	mov	r3, r0
 800088c:	b29a      	uxth	r2, r3
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4814      	ldr	r0, [pc, #80]	@ (80008e4 <Read_Pot+0x88>)
 8000894:	f009 ffd4 	bl	800a840 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8000898:	2064      	movs	r0, #100	@ 0x64
 800089a:	f001 f8fb 	bl	8001a94 <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", POT);
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <Read_Pot+0x7c>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	1d38      	adds	r0, r7, #4
 80008a4:	4a10      	ldr	r2, [pc, #64]	@ (80008e8 <Read_Pot+0x8c>)
 80008a6:	2104      	movs	r1, #4
 80008a8:	f00d f858 	bl	800d95c <sniprintf>
   		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fd16 	bl	80002e0 <strlen>
 80008b4:	4603      	mov	r3, r0
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	4809      	ldr	r0, [pc, #36]	@ (80008e4 <Read_Pot+0x88>)
 80008be:	f009 ffbf 	bl	800a840 <HAL_UART_Transmit_IT>
     	  HAL_Delay(100);
 80008c2:	2064      	movs	r0, #100	@ 0x64
 80008c4:	f001 f8e6 	bl	8001a94 <HAL_Delay>
   		  execute_flag = '0';
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <Read_Pot+0x90>)
 80008ca:	2230      	movs	r2, #48	@ 0x30
 80008cc:	701a      	strb	r2, [r3, #0]
}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	240008c2 	.word	0x240008c2
 80008dc:	0800e320 	.word	0x0800e320
 80008e0:	0800e308 	.word	0x0800e308
 80008e4:	24000340 	.word	0x24000340
 80008e8:	0800e310 	.word	0x0800e310
 80008ec:	24000000 	.word	0x24000000

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09c      	sub	sp, #112	@ 0x70
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fa:	224c      	movs	r2, #76	@ 0x4c
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f00d f860 	bl	800d9c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2220      	movs	r2, #32
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f00d f85a 	bl	800d9c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000910:	2002      	movs	r0, #2
 8000912:	f005 fd61 	bl	80063d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b33      	ldr	r3, [pc, #204]	@ (80009e8 <SystemClock_Config+0xf8>)
 800091c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800091e:	4a32      	ldr	r2, [pc, #200]	@ (80009e8 <SystemClock_Config+0xf8>)
 8000920:	f023 0301 	bic.w	r3, r3, #1
 8000924:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000926:	4b30      	ldr	r3, [pc, #192]	@ (80009e8 <SystemClock_Config+0xf8>)
 8000928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	4b2e      	ldr	r3, [pc, #184]	@ (80009ec <SystemClock_Config+0xfc>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000938:	4a2c      	ldr	r2, [pc, #176]	@ (80009ec <SystemClock_Config+0xfc>)
 800093a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b2a      	ldr	r3, [pc, #168]	@ (80009ec <SystemClock_Config+0xfc>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800094c:	bf00      	nop
 800094e:	4b27      	ldr	r3, [pc, #156]	@ (80009ec <SystemClock_Config+0xfc>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000956:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800095a:	d1f8      	bne.n	800094e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800095c:	2303      	movs	r3, #3
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000960:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000966:	2301      	movs	r3, #1
 8000968:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096a:	2340      	movs	r3, #64	@ 0x40
 800096c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096e:	2302      	movs	r3, #2
 8000970:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000972:	2302      	movs	r3, #2
 8000974:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000976:	2301      	movs	r3, #1
 8000978:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800097a:	2318      	movs	r3, #24
 800097c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800097e:	2302      	movs	r3, #2
 8000980:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000982:	2304      	movs	r3, #4
 8000984:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800098a:	230c      	movs	r3, #12
 800098c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800098e:	2300      	movs	r3, #0
 8000990:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099a:	4618      	mov	r0, r3
 800099c:	f005 fd66 	bl	800646c <HAL_RCC_OscConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xba>
  {
    Error_Handler();
 80009a6:	f000 fb7d 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009aa:	233f      	movs	r3, #63	@ 0x3f
 80009ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2101      	movs	r1, #1
 80009ce:	4618      	mov	r0, r3
 80009d0:	f006 f9a6 	bl	8006d20 <HAL_RCC_ClockConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xee>
  {
    Error_Handler();
 80009da:	f000 fb63 	bl	80010a4 <Error_Handler>
  }
}
 80009de:	bf00      	nop
 80009e0:	3770      	adds	r7, #112	@ 0x70
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	58000400 	.word	0x58000400
 80009ec:	58024800 	.word	0x58024800

080009f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	@ 0x28
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a02:	463b      	mov	r3, r7
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
 8000a10:	615a      	str	r2, [r3, #20]
 8000a12:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a14:	4b35      	ldr	r3, [pc, #212]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a16:	4a36      	ldr	r2, [pc, #216]	@ (8000af0 <MX_ADC1_Init+0x100>)
 8000a18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a1a:	4b34      	ldr	r3, [pc, #208]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a20:	4b32      	ldr	r3, [pc, #200]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a22:	2204      	movs	r2, #4
 8000a24:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a26:	4b31      	ldr	r3, [pc, #196]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a32:	4b2e      	ldr	r3, [pc, #184]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a38:	4b2c      	ldr	r3, [pc, #176]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a44:	4b29      	ldr	r3, [pc, #164]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a4a:	4b28      	ldr	r3, [pc, #160]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a50:	4b26      	ldr	r3, [pc, #152]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a56:	4b25      	ldr	r3, [pc, #148]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a5c:	4b23      	ldr	r3, [pc, #140]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000a64:	4b21      	ldr	r3, [pc, #132]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a6a:	4820      	ldr	r0, [pc, #128]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a6c:	f001 f9e2 	bl	8001e34 <HAL_ADC_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a76:	f000 fb15 	bl	80010a4 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a7c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a88:	4818      	ldr	r0, [pc, #96]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000a8a:	f001 f9d3 	bl	8001e34 <HAL_ADC_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000a94:	f000 fb06 	bl	80010a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4812      	ldr	r0, [pc, #72]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000aa4:	f001 fff6 	bl	8002a94 <HAL_ADCEx_MultiModeConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000aae:	f000 faf9 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <MX_ADC1_Init+0x104>)
 8000ab4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab6:	2306      	movs	r3, #6
 8000ab8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000abe:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ac2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	@ (8000aec <MX_ADC1_Init+0xfc>)
 8000ad6:	f001 fb4f 	bl	8002178 <HAL_ADC_ConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000ae0:	f000 fae0 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	@ 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	24000178 	.word	0x24000178
 8000af0:	40022000 	.word	0x40022000
 8000af4:	3ef08000 	.word	0x3ef08000

08000af8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	@ 0x28
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2224      	movs	r2, #36	@ 0x24
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f00c ff5d 	bl	800d9c4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b0a:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <MX_DAC1_Init+0x5c>)
 8000b0c:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <MX_DAC1_Init+0x60>)
 8000b0e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b10:	4810      	ldr	r0, [pc, #64]	@ (8000b54 <MX_DAC1_Init+0x5c>)
 8000b12:	f002 f9ac 	bl	8002e6e <HAL_DAC_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b1c:	f000 fac2 	bl	80010a4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2210      	movs	r2, #16
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	@ (8000b54 <MX_DAC1_Init+0x5c>)
 8000b3c:	f002 f9ba 	bl	8002eb4 <HAL_DAC_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b46:	f000 faad 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	@ 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	240001dc 	.word	0x240001dc
 8000b58:	40007400 	.word	0x40007400

08000b5c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b60:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <MX_ETH_Init+0x80>)
 8000b62:	4a1f      	ldr	r2, [pc, #124]	@ (8000be0 <MX_ETH_Init+0x84>)
 8000b64:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b66:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <MX_ETH_Init+0x88>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <MX_ETH_Init+0x88>)
 8000b6e:	2280      	movs	r2, #128	@ 0x80
 8000b70:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <MX_ETH_Init+0x88>)
 8000b74:	22e1      	movs	r2, #225	@ 0xe1
 8000b76:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <MX_ETH_Init+0x88>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <MX_ETH_Init+0x88>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <MX_ETH_Init+0x88>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b8a:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_ETH_Init+0x80>)
 8000b8c:	4a15      	ldr	r2, [pc, #84]	@ (8000be4 <MX_ETH_Init+0x88>)
 8000b8e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <MX_ETH_Init+0x80>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_ETH_Init+0x80>)
 8000b98:	4a13      	ldr	r2, [pc, #76]	@ (8000be8 <MX_ETH_Init+0x8c>)
 8000b9a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_ETH_Init+0x80>)
 8000b9e:	4a13      	ldr	r2, [pc, #76]	@ (8000bec <MX_ETH_Init+0x90>)
 8000ba0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_ETH_Init+0x80>)
 8000ba4:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000ba8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000baa:	480c      	ldr	r0, [pc, #48]	@ (8000bdc <MX_ETH_Init+0x80>)
 8000bac:	f003 f836 	bl	8003c1c <HAL_ETH_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000bb6:	f000 fa75 	bl	80010a4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000bba:	2238      	movs	r2, #56	@ 0x38
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	480c      	ldr	r0, [pc, #48]	@ (8000bf0 <MX_ETH_Init+0x94>)
 8000bc0:	f00c ff00 	bl	800d9c4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <MX_ETH_Init+0x94>)
 8000bc6:	2221      	movs	r2, #33	@ 0x21
 8000bc8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <MX_ETH_Init+0x94>)
 8000bcc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000bd0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <MX_ETH_Init+0x94>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	240001f0 	.word	0x240001f0
 8000be0:	40028000 	.word	0x40028000
 8000be4:	240008c4 	.word	0x240008c4
 8000be8:	240000c4 	.word	0x240000c4
 8000bec:	24000064 	.word	0x24000064
 8000bf0:	24000140 	.word	0x24000140

08000bf4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000c6c <MX_I2C1_Init+0x78>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c00:	4a1b      	ldr	r2, [pc, #108]	@ (8000c70 <MX_I2C1_Init+0x7c>)
 8000c02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c04:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c10:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c16:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c2e:	480e      	ldr	r0, [pc, #56]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c30:	f003 fdf2 	bl	8004818 <HAL_I2C_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c3a:	f000 fa33 	bl	80010a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4809      	ldr	r0, [pc, #36]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c42:	f005 fa01 	bl	8006048 <HAL_I2CEx_ConfigAnalogFilter>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c4c:	f000 fa2a 	bl	80010a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c50:	2100      	movs	r1, #0
 8000c52:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c54:	f005 fa43 	bl	80060de <HAL_I2CEx_ConfigDigitalFilter>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c5e:	f000 fa21 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	240002a0 	.word	0x240002a0
 8000c6c:	40005400 	.word	0x40005400
 8000c70:	10707dbc 	.word	0x10707dbc

08000c74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0310 	add.w	r3, r7, #16
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c92:	4b20      	ldr	r3, [pc, #128]	@ (8000d14 <MX_TIM1_Init+0xa0>)
 8000c94:	4a20      	ldr	r2, [pc, #128]	@ (8000d18 <MX_TIM1_Init+0xa4>)
 8000c96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 500;
 8000c98:	4b1e      	ldr	r3, [pc, #120]	@ (8000d14 <MX_TIM1_Init+0xa0>)
 8000c9a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000c9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <MX_TIM1_Init+0xa0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <MX_TIM1_Init+0xa0>)
 8000ca8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000cac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cae:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <MX_TIM1_Init+0xa0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <MX_TIM1_Init+0xa0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cba:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <MX_TIM1_Init+0xa0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cc0:	4814      	ldr	r0, [pc, #80]	@ (8000d14 <MX_TIM1_Init+0xa0>)
 8000cc2:	f009 f8b7 	bl	8009e34 <HAL_TIM_Base_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000ccc:	f000 f9ea 	bl	80010a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cd6:	f107 0310 	add.w	r3, r7, #16
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <MX_TIM1_Init+0xa0>)
 8000cde:	f009 fa6f 	bl	800a1c0 <HAL_TIM_ConfigClockSource>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000ce8:	f000 f9dc 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <MX_TIM1_Init+0xa0>)
 8000cfe:	f009 fcc1 	bl	800a684 <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d08:	f000 f9cc 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	240002f4 	.word	0x240002f4
 8000d18:	40010000 	.word	0x40010000

08000d1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d20:	4b22      	ldr	r3, [pc, #136]	@ (8000dac <MX_USART3_UART_Init+0x90>)
 8000d22:	4a23      	ldr	r2, [pc, #140]	@ (8000db0 <MX_USART3_UART_Init+0x94>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d26:	4b21      	ldr	r3, [pc, #132]	@ (8000dac <MX_USART3_UART_Init+0x90>)
 8000d28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <MX_USART3_UART_Init+0x90>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <MX_USART3_UART_Init+0x90>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dac <MX_USART3_UART_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b1a      	ldr	r3, [pc, #104]	@ (8000dac <MX_USART3_UART_Init+0x90>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b19      	ldr	r3, [pc, #100]	@ (8000dac <MX_USART3_UART_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	@ (8000dac <MX_USART3_UART_Init+0x90>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d52:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <MX_USART3_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <MX_USART3_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <MX_USART3_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d64:	4811      	ldr	r0, [pc, #68]	@ (8000dac <MX_USART3_UART_Init+0x90>)
 8000d66:	f009 fd1b 	bl	800a7a0 <HAL_UART_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d70:	f000 f998 	bl	80010a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d74:	2100      	movs	r1, #0
 8000d76:	480d      	ldr	r0, [pc, #52]	@ (8000dac <MX_USART3_UART_Init+0x90>)
 8000d78:	f00c fa1d 	bl	800d1b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d82:	f000 f98f 	bl	80010a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d86:	2100      	movs	r1, #0
 8000d88:	4808      	ldr	r0, [pc, #32]	@ (8000dac <MX_USART3_UART_Init+0x90>)
 8000d8a:	f00c fa52 	bl	800d232 <HAL_UARTEx_SetRxFifoThreshold>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d94:	f000 f986 	bl	80010a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d98:	4804      	ldr	r0, [pc, #16]	@ (8000dac <MX_USART3_UART_Init+0x90>)
 8000d9a:	f00c f9d3 	bl	800d144 <HAL_UARTEx_DisableFifoMode>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000da4:	f000 f97e 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	24000340 	.word	0x24000340
 8000db0:	40004800 	.word	0x40004800

08000db4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000db8:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dba:	4a16      	ldr	r2, [pc, #88]	@ (8000e14 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000dbe:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc0:	2209      	movs	r2, #9
 8000dc2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000de8:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dfc:	f005 f9bb 	bl	8006176 <HAL_PCD_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e06:	f000 f94d 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	240003d4 	.word	0x240003d4
 8000e14:	40080000 	.word	0x40080000

08000e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	@ 0x30
 8000e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	4b62      	ldr	r3, [pc, #392]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	4a60      	ldr	r2, [pc, #384]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3e:	4b5e      	ldr	r3, [pc, #376]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
 8000e4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4c:	4b5a      	ldr	r3, [pc, #360]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e52:	4a59      	ldr	r2, [pc, #356]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e5c:	4b56      	ldr	r3, [pc, #344]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	4b53      	ldr	r3, [pc, #332]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e70:	4a51      	ldr	r2, [pc, #324]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e7a:	4b4f      	ldr	r3, [pc, #316]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e88:	4b4b      	ldr	r3, [pc, #300]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8e:	4a4a      	ldr	r2, [pc, #296]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e98:	4b47      	ldr	r3, [pc, #284]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	4b44      	ldr	r3, [pc, #272]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eac:	4a42      	ldr	r2, [pc, #264]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000eae:	f043 0308 	orr.w	r3, r3, #8
 8000eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb6:	4b40      	ldr	r3, [pc, #256]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebc:	f003 0308 	and.w	r3, r3, #8
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec4:	4b3c      	ldr	r3, [pc, #240]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eca:	4a3b      	ldr	r2, [pc, #236]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000ecc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed4:	4b38      	ldr	r3, [pc, #224]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee2:	4b35      	ldr	r3, [pc, #212]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee8:	4a33      	ldr	r2, [pc, #204]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef2:	4b31      	ldr	r3, [pc, #196]	@ (8000fb8 <MX_GPIO_Init+0x1a0>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef8:	f003 0310 	and.w	r3, r3, #16
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000f06:	482d      	ldr	r0, [pc, #180]	@ (8000fbc <MX_GPIO_Init+0x1a4>)
 8000f08:	f003 fc6c 	bl	80047e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f12:	482b      	ldr	r0, [pc, #172]	@ (8000fc0 <MX_GPIO_Init+0x1a8>)
 8000f14:	f003 fc66 	bl	80047e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	4829      	ldr	r0, [pc, #164]	@ (8000fc4 <MX_GPIO_Init+0x1ac>)
 8000f1e:	f003 fc61 	bl	80047e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	4824      	ldr	r0, [pc, #144]	@ (8000fc8 <MX_GPIO_Init+0x1b0>)
 8000f38:	f003 faa4 	bl	8004484 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000f3c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	4819      	ldr	r0, [pc, #100]	@ (8000fbc <MX_GPIO_Init+0x1a4>)
 8000f56:	f003 fa95 	bl	8004484 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000f5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4813      	ldr	r0, [pc, #76]	@ (8000fc0 <MX_GPIO_Init+0x1a8>)
 8000f74:	f003 fa86 	bl	8004484 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000f78:	2380      	movs	r3, #128	@ 0x80
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f7c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480f      	ldr	r0, [pc, #60]	@ (8000fcc <MX_GPIO_Init+0x1b4>)
 8000f8e:	f003 fa79 	bl	8004484 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f92:	2302      	movs	r3, #2
 8000f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4806      	ldr	r0, [pc, #24]	@ (8000fc4 <MX_GPIO_Init+0x1ac>)
 8000faa:	f003 fa6b 	bl	8004484 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fae:	bf00      	nop
 8000fb0:	3730      	adds	r7, #48	@ 0x30
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	58020400 	.word	0x58020400
 8000fc0:	58020c00 	.word	0x58020c00
 8000fc4:	58021000 	.word	0x58021000
 8000fc8:	58020800 	.word	0x58020800
 8000fcc:	58021800 	.word	0x58021800

08000fd0 <PCF8591_ReadAnalog>:

/* USER CODE BEGIN 4 */

//Função de leitura no modulo sensor
uint8_t PCF8591_ReadAnalog(uint8_t channel)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	uint8_t config_byte = 0x40 | (channel & 0x03); // Select the channel (A0, A1, A2, A3)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	73fb      	strb	r3, [r7, #15]
	uint8_t analog_data[2];

	// Send configuration byte to select the ADC channel
	HAL_I2C_Master_Transmit(&hi2c1, PCF8591_ADDRESS, &config_byte, 1, 1000);
 8000fee:	f107 020f 	add.w	r2, r7, #15
 8000ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2190      	movs	r1, #144	@ 0x90
 8000ffc:	4808      	ldr	r0, [pc, #32]	@ (8001020 <PCF8591_ReadAnalog+0x50>)
 8000ffe:	f003 fca7 	bl	8004950 <HAL_I2C_Master_Transmit>

	// Read two bytes: first byte is a dummy, second byte is the actual analog value
	HAL_I2C_Master_Receive(&hi2c1, PCF8591_ADDRESS, analog_data, 2, 1000);
 8001002:	f107 020c 	add.w	r2, r7, #12
 8001006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2302      	movs	r3, #2
 800100e:	2190      	movs	r1, #144	@ 0x90
 8001010:	4803      	ldr	r0, [pc, #12]	@ (8001020 <PCF8591_ReadAnalog+0x50>)
 8001012:	f003 fdb5 	bl	8004b80 <HAL_I2C_Master_Receive>

	// Return the second byte which contains the valid ADC reading
	return analog_data[1];
 8001016:	7b7b      	ldrb	r3, [r7, #13]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	240002a0 	.word	0x240002a0

08001024 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  if (strncmp(rx_buffer, "Read_AIN0", 9) == 0) {
 800102c:	2209      	movs	r2, #9
 800102e:	4917      	ldr	r1, [pc, #92]	@ (800108c <HAL_UART_RxCpltCallback+0x68>)
 8001030:	4817      	ldr	r0, [pc, #92]	@ (8001090 <HAL_UART_RxCpltCallback+0x6c>)
 8001032:	f00c fccf 	bl	800d9d4 <strncmp>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <HAL_UART_RxCpltCallback+0x1e>
	  execute_flag = '1';
 800103c:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <HAL_UART_RxCpltCallback+0x70>)
 800103e:	2231      	movs	r2, #49	@ 0x31
 8001040:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Read_AIN1", 9) == 0) {
 8001042:	2209      	movs	r2, #9
 8001044:	4914      	ldr	r1, [pc, #80]	@ (8001098 <HAL_UART_RxCpltCallback+0x74>)
 8001046:	4812      	ldr	r0, [pc, #72]	@ (8001090 <HAL_UART_RxCpltCallback+0x6c>)
 8001048:	f00c fcc4 	bl	800d9d4 <strncmp>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <HAL_UART_RxCpltCallback+0x34>
	  execute_flag = '2';
 8001052:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <HAL_UART_RxCpltCallback+0x70>)
 8001054:	2232      	movs	r2, #50	@ 0x32
 8001056:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Read_AIN3", 9) == 0) {
 8001058:	2209      	movs	r2, #9
 800105a:	4910      	ldr	r1, [pc, #64]	@ (800109c <HAL_UART_RxCpltCallback+0x78>)
 800105c:	480c      	ldr	r0, [pc, #48]	@ (8001090 <HAL_UART_RxCpltCallback+0x6c>)
 800105e:	f00c fcb9 	bl	800d9d4 <strncmp>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <HAL_UART_RxCpltCallback+0x4a>
	  execute_flag = '3';
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <HAL_UART_RxCpltCallback+0x70>)
 800106a:	2233      	movs	r2, #51	@ 0x33
 800106c:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Set_DAC_255", 11) == 0) {
 800106e:	220b      	movs	r2, #11
 8001070:	490b      	ldr	r1, [pc, #44]	@ (80010a0 <HAL_UART_RxCpltCallback+0x7c>)
 8001072:	4807      	ldr	r0, [pc, #28]	@ (8001090 <HAL_UART_RxCpltCallback+0x6c>)
 8001074:	f00c fcae 	bl	800d9d4 <strncmp>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d102      	bne.n	8001084 <HAL_UART_RxCpltCallback+0x60>
	  execute_flag = '4';
 800107e:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <HAL_UART_RxCpltCallback+0x70>)
 8001080:	2234      	movs	r2, #52	@ 0x34
 8001082:	701a      	strb	r2, [r3, #0]
  }

}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	0800e338 	.word	0x0800e338
 8001090:	240008b8 	.word	0x240008b8
 8001094:	24000000 	.word	0x24000000
 8001098:	0800e344 	.word	0x0800e344
 800109c:	0800e350 	.word	0x0800e350
 80010a0:	0800e35c 	.word	0x0800e35c

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <Error_Handler+0x8>

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <HAL_MspInit+0x30>)
 80010b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010bc:	4a08      	ldr	r2, [pc, #32]	@ (80010e0 <HAL_MspInit+0x30>)
 80010be:	f043 0302 	orr.w	r3, r3, #2
 80010c2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_MspInit+0x30>)
 80010c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	58024400 	.word	0x58024400

080010e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0ba      	sub	sp, #232	@ 0xe8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	22c0      	movs	r2, #192	@ 0xc0
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f00c fc5d 	bl	800d9c4 <memset>
  if(hadc->Instance==ADC1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a2b      	ldr	r2, [pc, #172]	@ (80011bc <HAL_ADC_MspInit+0xd8>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d14f      	bne.n	80011b4 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001114:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001120:	2301      	movs	r3, #1
 8001122:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8001124:	2313      	movs	r3, #19
 8001126:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001128:	2302      	movs	r3, #2
 800112a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800112c:	2302      	movs	r3, #2
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001130:	2302      	movs	r3, #2
 8001132:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001134:	23c0      	movs	r3, #192	@ 0xc0
 8001136:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001138:	2320      	movs	r3, #32
 800113a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4618      	mov	r0, r3
 800114c:	f006 f974 	bl	8007438 <HAL_RCCEx_PeriphCLKConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8001156:	f7ff ffa5 	bl	80010a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800115a:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <HAL_ADC_MspInit+0xdc>)
 800115c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001160:	4a17      	ldr	r2, [pc, #92]	@ (80011c0 <HAL_ADC_MspInit+0xdc>)
 8001162:	f043 0320 	orr.w	r3, r3, #32
 8001166:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <HAL_ADC_MspInit+0xdc>)
 800116c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001170:	f003 0320 	and.w	r3, r3, #32
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <HAL_ADC_MspInit+0xdc>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800117e:	4a10      	ldr	r2, [pc, #64]	@ (80011c0 <HAL_ADC_MspInit+0xdc>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001188:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <HAL_ADC_MspInit+0xdc>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001196:	2308      	movs	r3, #8
 8001198:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119c:	2303      	movs	r3, #3
 800119e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <HAL_ADC_MspInit+0xe0>)
 80011b0:	f003 f968 	bl	8004484 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80011b4:	bf00      	nop
 80011b6:	37e8      	adds	r7, #232	@ 0xe8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40022000 	.word	0x40022000
 80011c0:	58024400 	.word	0x58024400
 80011c4:	58020000 	.word	0x58020000

080011c8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	@ 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a18      	ldr	r2, [pc, #96]	@ (8001248 <HAL_DAC_MspInit+0x80>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d129      	bne.n	800123e <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80011ea:	4b18      	ldr	r3, [pc, #96]	@ (800124c <HAL_DAC_MspInit+0x84>)
 80011ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011f0:	4a16      	ldr	r2, [pc, #88]	@ (800124c <HAL_DAC_MspInit+0x84>)
 80011f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80011f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011fa:	4b14      	ldr	r3, [pc, #80]	@ (800124c <HAL_DAC_MspInit+0x84>)
 80011fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001200:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b10      	ldr	r3, [pc, #64]	@ (800124c <HAL_DAC_MspInit+0x84>)
 800120a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120e:	4a0f      	ldr	r2, [pc, #60]	@ (800124c <HAL_DAC_MspInit+0x84>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001218:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <HAL_DAC_MspInit+0x84>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001226:	2320      	movs	r3, #32
 8001228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122a:	2303      	movs	r3, #3
 800122c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	@ (8001250 <HAL_DAC_MspInit+0x88>)
 800123a:	f003 f923 	bl	8004484 <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800123e:	bf00      	nop
 8001240:	3728      	adds	r7, #40	@ 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40007400 	.word	0x40007400
 800124c:	58024400 	.word	0x58024400
 8001250:	58020000 	.word	0x58020000

08001254 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	@ 0x38
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a59      	ldr	r2, [pc, #356]	@ (80013d8 <HAL_ETH_MspInit+0x184>)
 8001272:	4293      	cmp	r3, r2
 8001274:	f040 80ab 	bne.w	80013ce <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001278:	4b58      	ldr	r3, [pc, #352]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 800127a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800127e:	4a57      	ldr	r2, [pc, #348]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 8001280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001284:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001288:	4b54      	ldr	r3, [pc, #336]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 800128a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800128e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001292:	623b      	str	r3, [r7, #32]
 8001294:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001296:	4b51      	ldr	r3, [pc, #324]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 8001298:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800129c:	4a4f      	ldr	r2, [pc, #316]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 800129e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012a6:	4b4d      	ldr	r3, [pc, #308]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 80012a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80012b4:	4b49      	ldr	r3, [pc, #292]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 80012b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012ba:	4a48      	ldr	r2, [pc, #288]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 80012bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012c4:	4b45      	ldr	r3, [pc, #276]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 80012c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	61bb      	str	r3, [r7, #24]
 80012d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	4b42      	ldr	r3, [pc, #264]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d8:	4a40      	ldr	r2, [pc, #256]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e2:	4b3e      	ldr	r3, [pc, #248]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b3a      	ldr	r3, [pc, #232]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f6:	4a39      	ldr	r2, [pc, #228]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001300:	4b36      	ldr	r3, [pc, #216]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	4b33      	ldr	r3, [pc, #204]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 8001310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001314:	4a31      	ldr	r2, [pc, #196]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 8001316:	f043 0302 	orr.w	r3, r3, #2
 800131a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800131e:	4b2f      	ldr	r3, [pc, #188]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 8001320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800132c:	4b2b      	ldr	r3, [pc, #172]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001332:	4a2a      	ldr	r2, [pc, #168]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 8001334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001338:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800133c:	4b27      	ldr	r3, [pc, #156]	@ (80013dc <HAL_ETH_MspInit+0x188>)
 800133e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800134a:	2332      	movs	r3, #50	@ 0x32
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800135a:	230b      	movs	r3, #11
 800135c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001362:	4619      	mov	r1, r3
 8001364:	481e      	ldr	r0, [pc, #120]	@ (80013e0 <HAL_ETH_MspInit+0x18c>)
 8001366:	f003 f88d 	bl	8004484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800136a:	2386      	movs	r3, #134	@ 0x86
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800137a:	230b      	movs	r3, #11
 800137c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001382:	4619      	mov	r1, r3
 8001384:	4817      	ldr	r0, [pc, #92]	@ (80013e4 <HAL_ETH_MspInit+0x190>)
 8001386:	f003 f87d 	bl	8004484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800138a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800139c:	230b      	movs	r3, #11
 800139e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a4:	4619      	mov	r1, r3
 80013a6:	4810      	ldr	r0, [pc, #64]	@ (80013e8 <HAL_ETH_MspInit+0x194>)
 80013a8:	f003 f86c 	bl	8004484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80013ac:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013be:	230b      	movs	r3, #11
 80013c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c6:	4619      	mov	r1, r3
 80013c8:	4808      	ldr	r0, [pc, #32]	@ (80013ec <HAL_ETH_MspInit+0x198>)
 80013ca:	f003 f85b 	bl	8004484 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80013ce:	bf00      	nop
 80013d0:	3738      	adds	r7, #56	@ 0x38
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40028000 	.word	0x40028000
 80013dc:	58024400 	.word	0x58024400
 80013e0:	58020800 	.word	0x58020800
 80013e4:	58020000 	.word	0x58020000
 80013e8:	58020400 	.word	0x58020400
 80013ec:	58021800 	.word	0x58021800

080013f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b0ba      	sub	sp, #232	@ 0xe8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	22c0      	movs	r2, #192	@ 0xc0
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f00c fad7 	bl	800d9c4 <memset>
  if(hi2c->Instance==I2C1)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a2f      	ldr	r2, [pc, #188]	@ (80014d8 <HAL_I2C_MspInit+0xe8>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d156      	bne.n	80014ce <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001420:	f04f 0208 	mov.w	r2, #8
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4618      	mov	r0, r3
 8001438:	f005 fffe 	bl	8007438 <HAL_RCCEx_PeriphCLKConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001442:	f7ff fe2f 	bl	80010a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <HAL_I2C_MspInit+0xec>)
 8001448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800144c:	4a23      	ldr	r2, [pc, #140]	@ (80014dc <HAL_I2C_MspInit+0xec>)
 800144e:	f043 0302 	orr.w	r3, r3, #2
 8001452:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001456:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <HAL_I2C_MspInit+0xec>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001464:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001468:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146c:	2312      	movs	r3, #18
 800146e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001472:	2301      	movs	r3, #1
 8001474:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800147e:	2304      	movs	r3, #4
 8001480:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001488:	4619      	mov	r1, r3
 800148a:	4815      	ldr	r0, [pc, #84]	@ (80014e0 <HAL_I2C_MspInit+0xf0>)
 800148c:	f002 fffa 	bl	8004484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_I2C_MspInit+0xec>)
 8001492:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001496:	4a11      	ldr	r2, [pc, #68]	@ (80014dc <HAL_I2C_MspInit+0xec>)
 8001498:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800149c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014a0:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <HAL_I2C_MspInit+0xec>)
 80014a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	201f      	movs	r0, #31
 80014b4:	f001 fca7 	bl	8002e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014b8:	201f      	movs	r0, #31
 80014ba:	f001 fcbe 	bl	8002e3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	2020      	movs	r0, #32
 80014c4:	f001 fc9f 	bl	8002e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80014c8:	2020      	movs	r0, #32
 80014ca:	f001 fcb6 	bl	8002e3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014ce:	bf00      	nop
 80014d0:	37e8      	adds	r7, #232	@ 0xe8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40005400 	.word	0x40005400
 80014dc:	58024400 	.word	0x58024400
 80014e0:	58020400 	.word	0x58020400

080014e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001520 <HAL_TIM_Base_MspInit+0x3c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d10e      	bne.n	8001514 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <HAL_TIM_Base_MspInit+0x40>)
 80014f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014fc:	4a09      	ldr	r2, [pc, #36]	@ (8001524 <HAL_TIM_Base_MspInit+0x40>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001506:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <HAL_TIM_Base_MspInit+0x40>)
 8001508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	40010000 	.word	0x40010000
 8001524:	58024400 	.word	0x58024400

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b0ba      	sub	sp, #232	@ 0xe8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	22c0      	movs	r2, #192	@ 0xc0
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f00c fa3b 	bl	800d9c4 <memset>
  if(huart->Instance==USART3)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a2b      	ldr	r2, [pc, #172]	@ (8001600 <HAL_UART_MspInit+0xd8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d14e      	bne.n	80015f6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001558:	f04f 0202 	mov.w	r2, #2
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156a:	f107 0310 	add.w	r3, r7, #16
 800156e:	4618      	mov	r0, r3
 8001570:	f005 ff62 	bl	8007438 <HAL_RCCEx_PeriphCLKConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800157a:	f7ff fd93 	bl	80010a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800157e:	4b21      	ldr	r3, [pc, #132]	@ (8001604 <HAL_UART_MspInit+0xdc>)
 8001580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001584:	4a1f      	ldr	r2, [pc, #124]	@ (8001604 <HAL_UART_MspInit+0xdc>)
 8001586:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800158a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800158e:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <HAL_UART_MspInit+0xdc>)
 8001590:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001594:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800159c:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_UART_MspInit+0xdc>)
 800159e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a2:	4a18      	ldr	r2, [pc, #96]	@ (8001604 <HAL_UART_MspInit+0xdc>)
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ac:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <HAL_UART_MspInit+0xdc>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015d4:	2307      	movs	r3, #7
 80015d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015de:	4619      	mov	r1, r3
 80015e0:	4809      	ldr	r0, [pc, #36]	@ (8001608 <HAL_UART_MspInit+0xe0>)
 80015e2:	f002 ff4f 	bl	8004484 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2027      	movs	r0, #39	@ 0x27
 80015ec:	f001 fc0b 	bl	8002e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015f0:	2027      	movs	r0, #39	@ 0x27
 80015f2:	f001 fc22 	bl	8002e3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80015f6:	bf00      	nop
 80015f8:	37e8      	adds	r7, #232	@ 0xe8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40004800 	.word	0x40004800
 8001604:	58024400 	.word	0x58024400
 8001608:	58020c00 	.word	0x58020c00

0800160c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b0ba      	sub	sp, #232	@ 0xe8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	22c0      	movs	r2, #192	@ 0xc0
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f00c f9c9 	bl	800d9c4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a30      	ldr	r2, [pc, #192]	@ (80016f8 <HAL_PCD_MspInit+0xec>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d159      	bne.n	80016f0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800163c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001648:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800164c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4618      	mov	r0, r3
 8001656:	f005 feef 	bl	8007438 <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001660:	f7ff fd20 	bl	80010a4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001664:	f004 fef2 	bl	800644c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b24      	ldr	r3, [pc, #144]	@ (80016fc <HAL_PCD_MspInit+0xf0>)
 800166a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800166e:	4a23      	ldr	r2, [pc, #140]	@ (80016fc <HAL_PCD_MspInit+0xf0>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001678:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <HAL_PCD_MspInit+0xf0>)
 800167a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001686:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800168a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80016a0:	230a      	movs	r3, #10
 80016a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016aa:	4619      	mov	r1, r3
 80016ac:	4814      	ldr	r0, [pc, #80]	@ (8001700 <HAL_PCD_MspInit+0xf4>)
 80016ae:	f002 fee9 	bl	8004484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016ca:	4619      	mov	r1, r3
 80016cc:	480c      	ldr	r0, [pc, #48]	@ (8001700 <HAL_PCD_MspInit+0xf4>)
 80016ce:	f002 fed9 	bl	8004484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016d2:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <HAL_PCD_MspInit+0xf0>)
 80016d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016d8:	4a08      	ldr	r2, [pc, #32]	@ (80016fc <HAL_PCD_MspInit+0xf0>)
 80016da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80016de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_PCD_MspInit+0xf0>)
 80016e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80016f0:	bf00      	nop
 80016f2:	37e8      	adds	r7, #232	@ 0xe8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40080000 	.word	0x40080000
 80016fc:	58024400 	.word	0x58024400
 8001700:	58020000 	.word	0x58020000

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <NMI_Handler+0x4>

0800170c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <MemManage_Handler+0x4>

0800171c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <UsageFault_Handler+0x4>

0800172c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175a:	f000 f97b 	bl	8001a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <I2C1_EV_IRQHandler+0x10>)
 800176a:	f003 faff 	bl	8004d6c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	240002a0 	.word	0x240002a0

08001778 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <I2C1_ER_IRQHandler+0x10>)
 800177e:	f003 fb0f 	bl	8004da0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	240002a0 	.word	0x240002a0

0800178c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <USART3_IRQHandler+0x10>)
 8001792:	f009 f935 	bl	800aa00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	24000340 	.word	0x24000340

080017a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a8:	4a14      	ldr	r2, [pc, #80]	@ (80017fc <_sbrk+0x5c>)
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <_sbrk+0x60>)
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b4:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <_sbrk+0x64>)
 80017be:	4a12      	ldr	r2, [pc, #72]	@ (8001808 <_sbrk+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d207      	bcs.n	80017e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d0:	f00c f912 	bl	800d9f8 <__errno>
 80017d4:	4603      	mov	r3, r0
 80017d6:	220c      	movs	r2, #12
 80017d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	e009      	b.n	80017f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e0:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e6:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <_sbrk+0x64>)
 80017f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	24080000 	.word	0x24080000
 8001800:	00000400 	.word	0x00000400
 8001804:	240008cc 	.word	0x240008cc
 8001808:	24000a20 	.word	0x24000a20

0800180c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800180c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001844 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001810:	f000 f826 	bl	8001860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001814:	480c      	ldr	r0, [pc, #48]	@ (8001848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001816:	490d      	ldr	r1, [pc, #52]	@ (800184c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001818:	4a0d      	ldr	r2, [pc, #52]	@ (8001850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800182c:	4c0a      	ldr	r4, [pc, #40]	@ (8001858 <LoopFillZerobss+0x22>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183a:	f00c f8e3 	bl	800da04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183e:	f7fe ff1f 	bl	8000680 <main>
  bx  lr
 8001842:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001844:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001848:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800184c:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001850:	0800e3e4 	.word	0x0800e3e4
  ldr r2, =_sbss
 8001854:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001858:	24000a1c 	.word	0x24000a1c

0800185c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC3_IRQHandler>
	...

08001860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001864:	4b37      	ldr	r3, [pc, #220]	@ (8001944 <SystemInit+0xe4>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800186a:	4a36      	ldr	r2, [pc, #216]	@ (8001944 <SystemInit+0xe4>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001874:	4b34      	ldr	r3, [pc, #208]	@ (8001948 <SystemInit+0xe8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	2b06      	cmp	r3, #6
 800187e:	d807      	bhi.n	8001890 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001880:	4b31      	ldr	r3, [pc, #196]	@ (8001948 <SystemInit+0xe8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f023 030f 	bic.w	r3, r3, #15
 8001888:	4a2f      	ldr	r2, [pc, #188]	@ (8001948 <SystemInit+0xe8>)
 800188a:	f043 0307 	orr.w	r3, r3, #7
 800188e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001890:	4b2e      	ldr	r3, [pc, #184]	@ (800194c <SystemInit+0xec>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a2d      	ldr	r2, [pc, #180]	@ (800194c <SystemInit+0xec>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800189c:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <SystemInit+0xec>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018a2:	4b2a      	ldr	r3, [pc, #168]	@ (800194c <SystemInit+0xec>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4929      	ldr	r1, [pc, #164]	@ (800194c <SystemInit+0xec>)
 80018a8:	4b29      	ldr	r3, [pc, #164]	@ (8001950 <SystemInit+0xf0>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018ae:	4b26      	ldr	r3, [pc, #152]	@ (8001948 <SystemInit+0xe8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018ba:	4b23      	ldr	r3, [pc, #140]	@ (8001948 <SystemInit+0xe8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 030f 	bic.w	r3, r3, #15
 80018c2:	4a21      	ldr	r2, [pc, #132]	@ (8001948 <SystemInit+0xe8>)
 80018c4:	f043 0307 	orr.w	r3, r3, #7
 80018c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018ca:	4b20      	ldr	r3, [pc, #128]	@ (800194c <SystemInit+0xec>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80018d0:	4b1e      	ldr	r3, [pc, #120]	@ (800194c <SystemInit+0xec>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80018d6:	4b1d      	ldr	r3, [pc, #116]	@ (800194c <SystemInit+0xec>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <SystemInit+0xec>)
 80018de:	4a1d      	ldr	r2, [pc, #116]	@ (8001954 <SystemInit+0xf4>)
 80018e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80018e2:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <SystemInit+0xec>)
 80018e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001958 <SystemInit+0xf8>)
 80018e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80018e8:	4b18      	ldr	r3, [pc, #96]	@ (800194c <SystemInit+0xec>)
 80018ea:	4a1c      	ldr	r2, [pc, #112]	@ (800195c <SystemInit+0xfc>)
 80018ec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018ee:	4b17      	ldr	r3, [pc, #92]	@ (800194c <SystemInit+0xec>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018f4:	4b15      	ldr	r3, [pc, #84]	@ (800194c <SystemInit+0xec>)
 80018f6:	4a19      	ldr	r2, [pc, #100]	@ (800195c <SystemInit+0xfc>)
 80018f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80018fa:	4b14      	ldr	r3, [pc, #80]	@ (800194c <SystemInit+0xec>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001900:	4b12      	ldr	r3, [pc, #72]	@ (800194c <SystemInit+0xec>)
 8001902:	4a16      	ldr	r2, [pc, #88]	@ (800195c <SystemInit+0xfc>)
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001906:	4b11      	ldr	r3, [pc, #68]	@ (800194c <SystemInit+0xec>)
 8001908:	2200      	movs	r2, #0
 800190a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800190c:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <SystemInit+0xec>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0e      	ldr	r2, [pc, #56]	@ (800194c <SystemInit+0xec>)
 8001912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001916:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001918:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <SystemInit+0xec>)
 800191a:	2200      	movs	r2, #0
 800191c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <SystemInit+0x100>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <SystemInit+0x104>)
 8001924:	4013      	ands	r3, r2
 8001926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800192a:	d202      	bcs.n	8001932 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800192c:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <SystemInit+0x108>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <SystemInit+0x10c>)
 8001934:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001938:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00
 8001948:	52002000 	.word	0x52002000
 800194c:	58024400 	.word	0x58024400
 8001950:	eaf6ed7f 	.word	0xeaf6ed7f
 8001954:	02020200 	.word	0x02020200
 8001958:	01ff0000 	.word	0x01ff0000
 800195c:	01010280 	.word	0x01010280
 8001960:	5c001000 	.word	0x5c001000
 8001964:	ffff0000 	.word	0xffff0000
 8001968:	51008108 	.word	0x51008108
 800196c:	52004000 	.word	0x52004000

08001970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001976:	2003      	movs	r0, #3
 8001978:	f001 fa3a 	bl	8002df0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800197c:	f005 fb86 	bl	800708c <HAL_RCC_GetSysClockFreq>
 8001980:	4602      	mov	r2, r0
 8001982:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <HAL_Init+0x68>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	4913      	ldr	r1, [pc, #76]	@ (80019dc <HAL_Init+0x6c>)
 800198e:	5ccb      	ldrb	r3, [r1, r3]
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
 8001998:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800199a:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <HAL_Init+0x68>)
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	4a0e      	ldr	r2, [pc, #56]	@ (80019dc <HAL_Init+0x6c>)
 80019a4:	5cd3      	ldrb	r3, [r2, r3]
 80019a6:	f003 031f 	and.w	r3, r3, #31
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
 80019b0:	4a0b      	ldr	r2, [pc, #44]	@ (80019e0 <HAL_Init+0x70>)
 80019b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019b4:	4a0b      	ldr	r2, [pc, #44]	@ (80019e4 <HAL_Init+0x74>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ba:	2000      	movs	r0, #0
 80019bc:	f000 f814 	bl	80019e8 <HAL_InitTick>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e002      	b.n	80019d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019ca:	f7ff fb71 	bl	80010b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	58024400 	.word	0x58024400
 80019dc:	0800e368 	.word	0x0800e368
 80019e0:	24000008 	.word	0x24000008
 80019e4:	24000004 	.word	0x24000004

080019e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <HAL_InitTick+0x60>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e021      	b.n	8001a40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019fc:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <HAL_InitTick+0x64>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <HAL_InitTick+0x60>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4619      	mov	r1, r3
 8001a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f001 fa1f 	bl	8002e56 <HAL_SYSTICK_Config>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00e      	b.n	8001a40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b0f      	cmp	r3, #15
 8001a26:	d80a      	bhi.n	8001a3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a30:	f001 f9e9 	bl	8002e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a34:	4a06      	ldr	r2, [pc, #24]	@ (8001a50 <HAL_InitTick+0x68>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e000      	b.n	8001a40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	24000010 	.word	0x24000010
 8001a4c:	24000004 	.word	0x24000004
 8001a50:	2400000c 	.word	0x2400000c

08001a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <HAL_IncTick+0x20>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <HAL_IncTick+0x24>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a04      	ldr	r2, [pc, #16]	@ (8001a78 <HAL_IncTick+0x24>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	24000010 	.word	0x24000010
 8001a78:	240008d0 	.word	0x240008d0

08001a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a80:	4b03      	ldr	r3, [pc, #12]	@ (8001a90 <HAL_GetTick+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	240008d0 	.word	0x240008d0

08001a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	f7ff ffee 	bl	8001a7c <HAL_GetTick>
 8001aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d005      	beq.n	8001aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <HAL_Delay+0x44>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aba:	bf00      	nop
 8001abc:	f7ff ffde 	bl	8001a7c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d8f7      	bhi.n	8001abc <HAL_Delay+0x28>
  {
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	24000010 	.word	0x24000010

08001adc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ae0:	4b03      	ldr	r3, [pc, #12]	@ (8001af0 <HAL_GetREVID+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0c1b      	lsrs	r3, r3, #16
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	5c001000 	.word	0x5c001000

08001af4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001b04:	4904      	ldr	r1, [pc, #16]	@ (8001b18 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	58000400 	.word	0x58000400

08001b1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	609a      	str	r2, [r3, #8]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3360      	adds	r3, #96	@ 0x60
 8001b96:	461a      	mov	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001bb8:	bf00      	nop
 8001bba:	371c      	adds	r7, #28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	431a      	orrs	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	611a      	str	r2, [r3, #16]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b087      	sub	sp, #28
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	3360      	adds	r3, #96	@ 0x60
 8001c06:	461a      	mov	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	601a      	str	r2, [r3, #0]
  }
}
 8001c20:	bf00      	nop
 8001c22:	371c      	adds	r7, #28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3330      	adds	r3, #48	@ 0x30
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	4413      	add	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	211f      	movs	r1, #31
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	401a      	ands	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	0e9b      	lsrs	r3, r3, #26
 8001c64:	f003 011f 	and.w	r1, r3, #31
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f003 031f 	and.w	r3, r3, #31
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	431a      	orrs	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c78:	bf00      	nop
 8001c7a:	371c      	adds	r7, #28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3314      	adds	r3, #20
 8001c94:	461a      	mov	r2, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	0e5b      	lsrs	r3, r3, #25
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	4413      	add	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	0d1b      	lsrs	r3, r3, #20
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	2107      	movs	r1, #7
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	401a      	ands	r2, r3
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	0d1b      	lsrs	r3, r3, #20
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cce:	bf00      	nop
 8001cd0:	371c      	adds	r7, #28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f003 0318 	and.w	r3, r3, #24
 8001cfe:	4908      	ldr	r1, [pc, #32]	@ (8001d20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d00:	40d9      	lsrs	r1, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	400b      	ands	r3, r1
 8001d06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	000fffff 	.word	0x000fffff

08001d24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6093      	str	r3, [r2, #8]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	5fffffc0 	.word	0x5fffffc0

08001d48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d5c:	d101      	bne.n	8001d62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <LL_ADC_EnableInternalRegulator+0x24>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	6fffffc0 	.word	0x6fffffc0

08001d98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001dac:	d101      	bne.n	8001db2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <LL_ADC_IsEnabled+0x18>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <LL_ADC_IsEnabled+0x1a>
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d101      	bne.n	8001dfe <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d101      	bne.n	8001e24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b089      	sub	sp, #36	@ 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e18f      	b.n	800216e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d109      	bne.n	8001e70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff f941 	bl	80010e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff67 	bl	8001d48 <LL_ADC_IsDeepPowerDownEnabled>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d004      	beq.n	8001e8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff4d 	bl	8001d24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ff82 	bl	8001d98 <LL_ADC_IsInternalRegulatorEnabled>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d114      	bne.n	8001ec4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff ff66 	bl	8001d70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ea4:	4b87      	ldr	r3, [pc, #540]	@ (80020c4 <HAL_ADC_Init+0x290>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	099b      	lsrs	r3, r3, #6
 8001eaa:	4a87      	ldr	r2, [pc, #540]	@ (80020c8 <HAL_ADC_Init+0x294>)
 8001eac:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb0:	099b      	lsrs	r3, r3, #6
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001eb6:	e002      	b.n	8001ebe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f9      	bne.n	8001eb8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff65 	bl	8001d98 <LL_ADC_IsInternalRegulatorEnabled>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10d      	bne.n	8001ef0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed8:	f043 0210 	orr.w	r2, r3, #16
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee4:	f043 0201 	orr.w	r2, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff76 	bl	8001de6 <LL_ADC_REG_IsConversionOngoing>
 8001efa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f040 8129 	bne.w	800215c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f040 8125 	bne.w	800215c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f16:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f1a:	f043 0202 	orr.w	r2, r3, #2
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff4a 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d136      	bne.n	8001fa0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a65      	ldr	r2, [pc, #404]	@ (80020cc <HAL_ADC_Init+0x298>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d004      	beq.n	8001f46 <HAL_ADC_Init+0x112>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a63      	ldr	r2, [pc, #396]	@ (80020d0 <HAL_ADC_Init+0x29c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d10e      	bne.n	8001f64 <HAL_ADC_Init+0x130>
 8001f46:	4861      	ldr	r0, [pc, #388]	@ (80020cc <HAL_ADC_Init+0x298>)
 8001f48:	f7ff ff3a 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	4860      	ldr	r0, [pc, #384]	@ (80020d0 <HAL_ADC_Init+0x29c>)
 8001f50:	f7ff ff36 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4323      	orrs	r3, r4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2301      	moveq	r3, #1
 8001f5e:	2300      	movne	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	e008      	b.n	8001f76 <HAL_ADC_Init+0x142>
 8001f64:	485b      	ldr	r0, [pc, #364]	@ (80020d4 <HAL_ADC_Init+0x2a0>)
 8001f66:	f7ff ff2b 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bf0c      	ite	eq
 8001f70:	2301      	moveq	r3, #1
 8001f72:	2300      	movne	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d012      	beq.n	8001fa0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a53      	ldr	r2, [pc, #332]	@ (80020cc <HAL_ADC_Init+0x298>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d004      	beq.n	8001f8e <HAL_ADC_Init+0x15a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a51      	ldr	r2, [pc, #324]	@ (80020d0 <HAL_ADC_Init+0x29c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_Init+0x15e>
 8001f8e:	4a52      	ldr	r2, [pc, #328]	@ (80020d8 <HAL_ADC_Init+0x2a4>)
 8001f90:	e000      	b.n	8001f94 <HAL_ADC_Init+0x160>
 8001f92:	4a52      	ldr	r2, [pc, #328]	@ (80020dc <HAL_ADC_Init+0x2a8>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	f7ff fdbe 	bl	8001b1c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001fa0:	f7ff fd9c 	bl	8001adc <HAL_GetREVID>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d914      	bls.n	8001fd8 <HAL_ADC_Init+0x1a4>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b10      	cmp	r3, #16
 8001fb4:	d110      	bne.n	8001fd8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7d5b      	ldrb	r3, [r3, #21]
 8001fba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fc0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001fc6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7f1b      	ldrb	r3, [r3, #28]
 8001fcc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001fce:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fd0:	f043 030c 	orr.w	r3, r3, #12
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	e00d      	b.n	8001ff4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7d5b      	ldrb	r3, [r3, #21]
 8001fdc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fe2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001fe8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7f1b      	ldrb	r3, [r3, #28]
 8001fee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7f1b      	ldrb	r3, [r3, #28]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d106      	bne.n	800200a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	3b01      	subs	r3, #1
 8002002:	045b      	lsls	r3, r3, #17
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	4b2c      	ldr	r3, [pc, #176]	@ (80020e0 <HAL_ADC_Init+0x2ac>)
 800202e:	4013      	ands	r3, r2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	69b9      	ldr	r1, [r7, #24]
 8002036:	430b      	orrs	r3, r1
 8002038:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fed1 	bl	8001de6 <LL_ADC_REG_IsConversionOngoing>
 8002044:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fede 	bl	8001e0c <LL_ADC_INJ_IsConversionOngoing>
 8002050:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d15f      	bne.n	8002118 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d15c      	bne.n	8002118 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	7d1b      	ldrb	r3, [r3, #20]
 8002062:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	4b1c      	ldr	r3, [pc, #112]	@ (80020e4 <HAL_ADC_Init+0x2b0>)
 8002074:	4013      	ands	r3, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	69b9      	ldr	r1, [r7, #24]
 800207c:	430b      	orrs	r3, r1
 800207e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002086:	2b01      	cmp	r3, #1
 8002088:	d130      	bne.n	80020ec <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691a      	ldr	r2, [r3, #16]
 8002096:	4b14      	ldr	r3, [pc, #80]	@ (80020e8 <HAL_ADC_Init+0x2b4>)
 8002098:	4013      	ands	r3, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800209e:	3a01      	subs	r2, #1
 80020a0:	0411      	lsls	r1, r2, #16
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020a6:	4311      	orrs	r1, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80020ac:	4311      	orrs	r1, r2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020b2:	430a      	orrs	r2, r1
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	611a      	str	r2, [r3, #16]
 80020c0:	e01c      	b.n	80020fc <HAL_ADC_Init+0x2c8>
 80020c2:	bf00      	nop
 80020c4:	24000004 	.word	0x24000004
 80020c8:	053e2d63 	.word	0x053e2d63
 80020cc:	40022000 	.word	0x40022000
 80020d0:	40022100 	.word	0x40022100
 80020d4:	58026000 	.word	0x58026000
 80020d8:	40022300 	.word	0x40022300
 80020dc:	58026300 	.word	0x58026300
 80020e0:	fff0c003 	.word	0xfff0c003
 80020e4:	ffffbffc 	.word	0xffffbffc
 80020e8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fb8c 	bl	8002830 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d10c      	bne.n	800213a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f023 010f 	bic.w	r1, r3, #15
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	1e5a      	subs	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	631a      	str	r2, [r3, #48]	@ 0x30
 8002138:	e007      	b.n	800214a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 020f 	bic.w	r2, r2, #15
 8002148:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214e:	f023 0303 	bic.w	r3, r3, #3
 8002152:	f043 0201 	orr.w	r2, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	655a      	str	r2, [r3, #84]	@ 0x54
 800215a:	e007      	b.n	800216c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002160:	f043 0210 	orr.w	r2, r3, #16
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800216c:	7ffb      	ldrb	r3, [r7, #31]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	@ 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}
 8002176:	bf00      	nop

08002178 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b0a1      	sub	sp, #132	@ 0x84
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a65      	ldr	r2, [pc, #404]	@ (8002328 <HAL_ADC_ConfigChannel+0x1b0>)
 8002192:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x2a>
 800219e:	2302      	movs	r3, #2
 80021a0:	e32e      	b.n	8002800 <HAL_ADC_ConfigChannel+0x688>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fe19 	bl	8001de6 <LL_ADC_REG_IsConversionOngoing>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 8313 	bne.w	80027e2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	db2c      	blt.n	800221e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d108      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x6a>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0e9b      	lsrs	r3, r3, #26
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	2201      	movs	r2, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	e016      	b.n	8002210 <HAL_ADC_ConfigChannel+0x98>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021f2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80021fa:	2320      	movs	r3, #32
 80021fc:	e003      	b.n	8002206 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80021fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	2201      	movs	r2, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	69d1      	ldr	r1, [r2, #28]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	430b      	orrs	r3, r1
 800221c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6859      	ldr	r1, [r3, #4]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	f7ff fcfe 	bl	8001c2c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fdd6 	bl	8001de6 <LL_ADC_REG_IsConversionOngoing>
 800223a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fde3 	bl	8001e0c <LL_ADC_INJ_IsConversionOngoing>
 8002246:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002248:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800224a:	2b00      	cmp	r3, #0
 800224c:	f040 80b8 	bne.w	80023c0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002250:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002252:	2b00      	cmp	r3, #0
 8002254:	f040 80b4 	bne.w	80023c0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	6819      	ldr	r1, [r3, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	461a      	mov	r2, r3
 8002266:	f7ff fd0d 	bl	8001c84 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800226a:	4b30      	ldr	r3, [pc, #192]	@ (800232c <HAL_ADC_ConfigChannel+0x1b4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002272:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002276:	d10b      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x118>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	089b      	lsrs	r3, r3, #2
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	e01d      	b.n	80022cc <HAL_ADC_ConfigChannel+0x154>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10b      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x13e>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	e00a      	b.n	80022cc <HAL_ADC_ConfigChannel+0x154>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d02c      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	6919      	ldr	r1, [r3, #16]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022e4:	f7ff fc4e 	bl	8001b84 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6919      	ldr	r1, [r3, #16]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	7e5b      	ldrb	r3, [r3, #25]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d102      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x186>
 80022f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80022fc:	e000      	b.n	8002300 <HAL_ADC_ConfigChannel+0x188>
 80022fe:	2300      	movs	r3, #0
 8002300:	461a      	mov	r2, r3
 8002302:	f7ff fc78 	bl	8001bf6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6919      	ldr	r1, [r3, #16]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	7e1b      	ldrb	r3, [r3, #24]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d102      	bne.n	800231c <HAL_ADC_ConfigChannel+0x1a4>
 8002316:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800231a:	e000      	b.n	800231e <HAL_ADC_ConfigChannel+0x1a6>
 800231c:	2300      	movs	r3, #0
 800231e:	461a      	mov	r2, r3
 8002320:	f7ff fc50 	bl	8001bc4 <LL_ADC_SetDataRightShift>
 8002324:	e04c      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x248>
 8002326:	bf00      	nop
 8002328:	47ff0000 	.word	0x47ff0000
 800232c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002336:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	069b      	lsls	r3, r3, #26
 8002340:	429a      	cmp	r2, r3
 8002342:	d107      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002352:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800235a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	069b      	lsls	r3, r3, #26
 8002364:	429a      	cmp	r2, r3
 8002366:	d107      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002376:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800237e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	069b      	lsls	r3, r3, #26
 8002388:	429a      	cmp	r2, r3
 800238a:	d107      	bne.n	800239c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800239a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	069b      	lsls	r3, r3, #26
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d107      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023be:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fcfb 	bl	8001dc0 <LL_ADC_IsEnabled>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f040 8211 	bne.w	80027f4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6819      	ldr	r1, [r3, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	461a      	mov	r2, r3
 80023e0:	f7ff fc7c 	bl	8001cdc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4aa1      	ldr	r2, [pc, #644]	@ (8002670 <HAL_ADC_ConfigChannel+0x4f8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	f040 812e 	bne.w	800264c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x2a0>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0e9b      	lsrs	r3, r3, #26
 8002406:	3301      	adds	r3, #1
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	2b09      	cmp	r3, #9
 800240e:	bf94      	ite	ls
 8002410:	2301      	movls	r3, #1
 8002412:	2300      	movhi	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	e019      	b.n	800244c <HAL_ADC_ConfigChannel+0x2d4>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002428:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800242a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002430:	2320      	movs	r3, #32
 8002432:	e003      	b.n	800243c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002434:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	2b09      	cmp	r3, #9
 8002444:	bf94      	ite	ls
 8002446:	2301      	movls	r3, #1
 8002448:	2300      	movhi	r3, #0
 800244a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800244c:	2b00      	cmp	r3, #0
 800244e:	d079      	beq.n	8002544 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002458:	2b00      	cmp	r3, #0
 800245a:	d107      	bne.n	800246c <HAL_ADC_ConfigChannel+0x2f4>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0e9b      	lsrs	r3, r3, #26
 8002462:	3301      	adds	r3, #1
 8002464:	069b      	lsls	r3, r3, #26
 8002466:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800246a:	e015      	b.n	8002498 <HAL_ADC_ConfigChannel+0x320>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800247a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800247c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800247e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002484:	2320      	movs	r3, #32
 8002486:	e003      	b.n	8002490 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002488:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	069b      	lsls	r3, r3, #26
 8002494:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d109      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x340>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	3301      	adds	r3, #1
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	2101      	movs	r1, #1
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	e017      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x370>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80024c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80024ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80024d0:	2320      	movs	r3, #32
 80024d2:	e003      	b.n	80024dc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80024d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	2101      	movs	r1, #1
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	ea42 0103 	orr.w	r1, r2, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <HAL_ADC_ConfigChannel+0x396>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	0e9b      	lsrs	r3, r3, #26
 80024fe:	3301      	adds	r3, #1
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	051b      	lsls	r3, r3, #20
 800250c:	e018      	b.n	8002540 <HAL_ADC_ConfigChannel+0x3c8>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800251c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002526:	2320      	movs	r3, #32
 8002528:	e003      	b.n	8002532 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800252a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252c:	fab3 f383 	clz	r3, r3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	3301      	adds	r3, #1
 8002534:	f003 021f 	and.w	r2, r3, #31
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002540:	430b      	orrs	r3, r1
 8002542:	e07e      	b.n	8002642 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800254c:	2b00      	cmp	r3, #0
 800254e:	d107      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x3e8>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0e9b      	lsrs	r3, r3, #26
 8002556:	3301      	adds	r3, #1
 8002558:	069b      	lsls	r3, r3, #26
 800255a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800255e:	e015      	b.n	800258c <HAL_ADC_ConfigChannel+0x414>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002578:	2320      	movs	r3, #32
 800257a:	e003      	b.n	8002584 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800257c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	3301      	adds	r3, #1
 8002586:	069b      	lsls	r3, r3, #26
 8002588:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002594:	2b00      	cmp	r3, #0
 8002596:	d109      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x434>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0e9b      	lsrs	r3, r3, #26
 800259e:	3301      	adds	r3, #1
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	2101      	movs	r1, #1
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	e017      	b.n	80025dc <HAL_ADC_ConfigChannel+0x464>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	61bb      	str	r3, [r7, #24]
  return result;
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80025c4:	2320      	movs	r3, #32
 80025c6:	e003      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	3301      	adds	r3, #1
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2101      	movs	r1, #1
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	ea42 0103 	orr.w	r1, r2, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10d      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x490>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0e9b      	lsrs	r3, r3, #26
 80025f2:	3301      	adds	r3, #1
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4613      	mov	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	3b1e      	subs	r3, #30
 8002600:	051b      	lsls	r3, r3, #20
 8002602:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002606:	e01b      	b.n	8002640 <HAL_ADC_ConfigChannel+0x4c8>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	60fb      	str	r3, [r7, #12]
  return result;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002620:	2320      	movs	r3, #32
 8002622:	e003      	b.n	800262c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	3301      	adds	r3, #1
 800262e:	f003 021f 	and.w	r2, r3, #31
 8002632:	4613      	mov	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	3b1e      	subs	r3, #30
 800263a:	051b      	lsls	r3, r3, #20
 800263c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002640:	430b      	orrs	r3, r1
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	6892      	ldr	r2, [r2, #8]
 8002646:	4619      	mov	r1, r3
 8002648:	f7ff fb1c 	bl	8001c84 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	f280 80cf 	bge.w	80027f4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a06      	ldr	r2, [pc, #24]	@ (8002674 <HAL_ADC_ConfigChannel+0x4fc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d004      	beq.n	800266a <HAL_ADC_ConfigChannel+0x4f2>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a04      	ldr	r2, [pc, #16]	@ (8002678 <HAL_ADC_ConfigChannel+0x500>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d10a      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x508>
 800266a:	4b04      	ldr	r3, [pc, #16]	@ (800267c <HAL_ADC_ConfigChannel+0x504>)
 800266c:	e009      	b.n	8002682 <HAL_ADC_ConfigChannel+0x50a>
 800266e:	bf00      	nop
 8002670:	47ff0000 	.word	0x47ff0000
 8002674:	40022000 	.word	0x40022000
 8002678:	40022100 	.word	0x40022100
 800267c:	40022300 	.word	0x40022300
 8002680:	4b61      	ldr	r3, [pc, #388]	@ (8002808 <HAL_ADC_ConfigChannel+0x690>)
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fa70 	bl	8001b68 <LL_ADC_GetCommonPathInternalCh>
 8002688:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a5f      	ldr	r2, [pc, #380]	@ (800280c <HAL_ADC_ConfigChannel+0x694>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d004      	beq.n	800269e <HAL_ADC_ConfigChannel+0x526>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a5d      	ldr	r2, [pc, #372]	@ (8002810 <HAL_ADC_ConfigChannel+0x698>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d10e      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x544>
 800269e:	485b      	ldr	r0, [pc, #364]	@ (800280c <HAL_ADC_ConfigChannel+0x694>)
 80026a0:	f7ff fb8e 	bl	8001dc0 <LL_ADC_IsEnabled>
 80026a4:	4604      	mov	r4, r0
 80026a6:	485a      	ldr	r0, [pc, #360]	@ (8002810 <HAL_ADC_ConfigChannel+0x698>)
 80026a8:	f7ff fb8a 	bl	8001dc0 <LL_ADC_IsEnabled>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4323      	orrs	r3, r4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf0c      	ite	eq
 80026b4:	2301      	moveq	r3, #1
 80026b6:	2300      	movne	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	e008      	b.n	80026ce <HAL_ADC_ConfigChannel+0x556>
 80026bc:	4855      	ldr	r0, [pc, #340]	@ (8002814 <HAL_ADC_ConfigChannel+0x69c>)
 80026be:	f7ff fb7f 	bl	8001dc0 <LL_ADC_IsEnabled>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d07d      	beq.n	80027ce <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a50      	ldr	r2, [pc, #320]	@ (8002818 <HAL_ADC_ConfigChannel+0x6a0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d130      	bne.n	800273e <HAL_ADC_ConfigChannel+0x5c6>
 80026dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d12b      	bne.n	800273e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a4a      	ldr	r2, [pc, #296]	@ (8002814 <HAL_ADC_ConfigChannel+0x69c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	f040 8081 	bne.w	80027f4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a45      	ldr	r2, [pc, #276]	@ (800280c <HAL_ADC_ConfigChannel+0x694>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d004      	beq.n	8002706 <HAL_ADC_ConfigChannel+0x58e>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a43      	ldr	r2, [pc, #268]	@ (8002810 <HAL_ADC_ConfigChannel+0x698>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d101      	bne.n	800270a <HAL_ADC_ConfigChannel+0x592>
 8002706:	4a45      	ldr	r2, [pc, #276]	@ (800281c <HAL_ADC_ConfigChannel+0x6a4>)
 8002708:	e000      	b.n	800270c <HAL_ADC_ConfigChannel+0x594>
 800270a:	4a3f      	ldr	r2, [pc, #252]	@ (8002808 <HAL_ADC_ConfigChannel+0x690>)
 800270c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800270e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002712:	4619      	mov	r1, r3
 8002714:	4610      	mov	r0, r2
 8002716:	f7ff fa14 	bl	8001b42 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800271a:	4b41      	ldr	r3, [pc, #260]	@ (8002820 <HAL_ADC_ConfigChannel+0x6a8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	099b      	lsrs	r3, r3, #6
 8002720:	4a40      	ldr	r2, [pc, #256]	@ (8002824 <HAL_ADC_ConfigChannel+0x6ac>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	099b      	lsrs	r3, r3, #6
 8002728:	3301      	adds	r3, #1
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800272e:	e002      	b.n	8002736 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	3b01      	subs	r3, #1
 8002734:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f9      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800273c:	e05a      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a39      	ldr	r2, [pc, #228]	@ (8002828 <HAL_ADC_ConfigChannel+0x6b0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d11e      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x60e>
 8002748:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800274a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d119      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a2f      	ldr	r2, [pc, #188]	@ (8002814 <HAL_ADC_ConfigChannel+0x69c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d14b      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a2a      	ldr	r2, [pc, #168]	@ (800280c <HAL_ADC_ConfigChannel+0x694>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d004      	beq.n	8002770 <HAL_ADC_ConfigChannel+0x5f8>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a29      	ldr	r2, [pc, #164]	@ (8002810 <HAL_ADC_ConfigChannel+0x698>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d101      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x5fc>
 8002770:	4a2a      	ldr	r2, [pc, #168]	@ (800281c <HAL_ADC_ConfigChannel+0x6a4>)
 8002772:	e000      	b.n	8002776 <HAL_ADC_ConfigChannel+0x5fe>
 8002774:	4a24      	ldr	r2, [pc, #144]	@ (8002808 <HAL_ADC_ConfigChannel+0x690>)
 8002776:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002778:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f7ff f9df 	bl	8001b42 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002784:	e036      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a28      	ldr	r2, [pc, #160]	@ (800282c <HAL_ADC_ConfigChannel+0x6b4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d131      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x67c>
 8002790:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d12c      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a1d      	ldr	r2, [pc, #116]	@ (8002814 <HAL_ADC_ConfigChannel+0x69c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d127      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a18      	ldr	r2, [pc, #96]	@ (800280c <HAL_ADC_ConfigChannel+0x694>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d004      	beq.n	80027b8 <HAL_ADC_ConfigChannel+0x640>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a17      	ldr	r2, [pc, #92]	@ (8002810 <HAL_ADC_ConfigChannel+0x698>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d101      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x644>
 80027b8:	4a18      	ldr	r2, [pc, #96]	@ (800281c <HAL_ADC_ConfigChannel+0x6a4>)
 80027ba:	e000      	b.n	80027be <HAL_ADC_ConfigChannel+0x646>
 80027bc:	4a12      	ldr	r2, [pc, #72]	@ (8002808 <HAL_ADC_ConfigChannel+0x690>)
 80027be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027c4:	4619      	mov	r1, r3
 80027c6:	4610      	mov	r0, r2
 80027c8:	f7ff f9bb 	bl	8001b42 <LL_ADC_SetCommonPathInternalCh>
 80027cc:	e012      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d2:	f043 0220 	orr.w	r2, r3, #32
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80027e0:	e008      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e6:	f043 0220 	orr.w	r2, r3, #32
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80027fc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002800:	4618      	mov	r0, r3
 8002802:	3784      	adds	r7, #132	@ 0x84
 8002804:	46bd      	mov	sp, r7
 8002806:	bd90      	pop	{r4, r7, pc}
 8002808:	58026300 	.word	0x58026300
 800280c:	40022000 	.word	0x40022000
 8002810:	40022100 	.word	0x40022100
 8002814:	58026000 	.word	0x58026000
 8002818:	cb840000 	.word	0xcb840000
 800281c:	40022300 	.word	0x40022300
 8002820:	24000004 	.word	0x24000004
 8002824:	053e2d63 	.word	0x053e2d63
 8002828:	c7520000 	.word	0xc7520000
 800282c:	cfb80000 	.word	0xcfb80000

08002830 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a7a      	ldr	r2, [pc, #488]	@ (8002a28 <ADC_ConfigureBoostMode+0x1f8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d004      	beq.n	800284c <ADC_ConfigureBoostMode+0x1c>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a79      	ldr	r2, [pc, #484]	@ (8002a2c <ADC_ConfigureBoostMode+0x1fc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d109      	bne.n	8002860 <ADC_ConfigureBoostMode+0x30>
 800284c:	4b78      	ldr	r3, [pc, #480]	@ (8002a30 <ADC_ConfigureBoostMode+0x200>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf14      	ite	ne
 8002858:	2301      	movne	r3, #1
 800285a:	2300      	moveq	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	e008      	b.n	8002872 <ADC_ConfigureBoostMode+0x42>
 8002860:	4b74      	ldr	r3, [pc, #464]	@ (8002a34 <ADC_ConfigureBoostMode+0x204>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf14      	ite	ne
 800286c:	2301      	movne	r3, #1
 800286e:	2300      	moveq	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d01c      	beq.n	80028b0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002876:	f004 fd83 	bl	8007380 <HAL_RCC_GetHCLKFreq>
 800287a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002884:	d010      	beq.n	80028a8 <ADC_ConfigureBoostMode+0x78>
 8002886:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800288a:	d873      	bhi.n	8002974 <ADC_ConfigureBoostMode+0x144>
 800288c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002890:	d002      	beq.n	8002898 <ADC_ConfigureBoostMode+0x68>
 8002892:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002896:	d16d      	bne.n	8002974 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	60fb      	str	r3, [r7, #12]
        break;
 80028a6:	e068      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	60fb      	str	r3, [r7, #12]
        break;
 80028ae:	e064      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80028b0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80028b4:	f04f 0100 	mov.w	r1, #0
 80028b8:	f005 ffc8 	bl	800884c <HAL_RCCEx_GetPeriphCLKFreq>
 80028bc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80028c6:	d051      	beq.n	800296c <ADC_ConfigureBoostMode+0x13c>
 80028c8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80028cc:	d854      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 80028ce:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80028d2:	d047      	beq.n	8002964 <ADC_ConfigureBoostMode+0x134>
 80028d4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80028d8:	d84e      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 80028da:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80028de:	d03d      	beq.n	800295c <ADC_ConfigureBoostMode+0x12c>
 80028e0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80028e4:	d848      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 80028e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028ea:	d033      	beq.n	8002954 <ADC_ConfigureBoostMode+0x124>
 80028ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028f0:	d842      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 80028f2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80028f6:	d029      	beq.n	800294c <ADC_ConfigureBoostMode+0x11c>
 80028f8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80028fc:	d83c      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 80028fe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002902:	d01a      	beq.n	800293a <ADC_ConfigureBoostMode+0x10a>
 8002904:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002908:	d836      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 800290a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800290e:	d014      	beq.n	800293a <ADC_ConfigureBoostMode+0x10a>
 8002910:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002914:	d830      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 8002916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800291a:	d00e      	beq.n	800293a <ADC_ConfigureBoostMode+0x10a>
 800291c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002920:	d82a      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 8002922:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002926:	d008      	beq.n	800293a <ADC_ConfigureBoostMode+0x10a>
 8002928:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800292c:	d824      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 800292e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002932:	d002      	beq.n	800293a <ADC_ConfigureBoostMode+0x10a>
 8002934:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002938:	d11e      	bne.n	8002978 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	0c9b      	lsrs	r3, r3, #18
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	60fb      	str	r3, [r7, #12]
        break;
 800294a:	e016      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	60fb      	str	r3, [r7, #12]
        break;
 8002952:	e012      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	60fb      	str	r3, [r7, #12]
        break;
 800295a:	e00e      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	099b      	lsrs	r3, r3, #6
 8002960:	60fb      	str	r3, [r7, #12]
        break;
 8002962:	e00a      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	09db      	lsrs	r3, r3, #7
 8002968:	60fb      	str	r3, [r7, #12]
        break;
 800296a:	e006      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	60fb      	str	r3, [r7, #12]
        break;
 8002972:	e002      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002974:	bf00      	nop
 8002976:	e000      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002978:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800297a:	f7ff f8af 	bl	8001adc <HAL_GetREVID>
 800297e:	4603      	mov	r3, r0
 8002980:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002984:	4293      	cmp	r3, r2
 8002986:	d815      	bhi.n	80029b4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a2b      	ldr	r2, [pc, #172]	@ (8002a38 <ADC_ConfigureBoostMode+0x208>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d908      	bls.n	80029a2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800299e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80029a0:	e03e      	b.n	8002a20 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029b0:	609a      	str	r2, [r3, #8]
}
 80029b2:	e035      	b.n	8002a20 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4a1f      	ldr	r2, [pc, #124]	@ (8002a3c <ADC_ConfigureBoostMode+0x20c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d808      	bhi.n	80029d4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80029d0:	609a      	str	r2, [r3, #8]
}
 80029d2:	e025      	b.n	8002a20 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002a40 <ADC_ConfigureBoostMode+0x210>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d80a      	bhi.n	80029f2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029ee:	609a      	str	r2, [r3, #8]
}
 80029f0:	e016      	b.n	8002a20 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4a13      	ldr	r2, [pc, #76]	@ (8002a44 <ADC_ConfigureBoostMode+0x214>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d80a      	bhi.n	8002a10 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a0c:	609a      	str	r2, [r3, #8]
}
 8002a0e:	e007      	b.n	8002a20 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002a1e:	609a      	str	r2, [r3, #8]
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40022000 	.word	0x40022000
 8002a2c:	40022100 	.word	0x40022100
 8002a30:	40022300 	.word	0x40022300
 8002a34:	58026300 	.word	0x58026300
 8002a38:	01312d00 	.word	0x01312d00
 8002a3c:	005f5e10 	.word	0x005f5e10
 8002a40:	00bebc20 	.word	0x00bebc20
 8002a44:	017d7840 	.word	0x017d7840

08002a48 <LL_ADC_IsEnabled>:
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <LL_ADC_IsEnabled+0x18>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <LL_ADC_IsEnabled+0x1a>
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <LL_ADC_REG_IsConversionOngoing>:
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d101      	bne.n	8002a86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b09f      	sub	sp, #124	@ 0x7c
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e0be      	b.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002aba:	2300      	movs	r3, #0
 8002abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d102      	bne.n	8002ad2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002acc:	4b5b      	ldr	r3, [pc, #364]	@ (8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	e001      	b.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10b      	bne.n	8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae0:	f043 0220 	orr.w	r2, r3, #32
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e09d      	b.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff ffb9 	bl	8002a6e <LL_ADC_REG_IsConversionOngoing>
 8002afc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ffb3 	bl	8002a6e <LL_ADC_REG_IsConversionOngoing>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d17f      	bne.n	8002c0e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d17c      	bne.n	8002c0e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a47      	ldr	r2, [pc, #284]	@ (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d004      	beq.n	8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a46      	ldr	r2, [pc, #280]	@ (8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d101      	bne.n	8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002b28:	4b45      	ldr	r3, [pc, #276]	@ (8002c40 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002b2a:	e000      	b.n	8002b2e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002b2c:	4b45      	ldr	r3, [pc, #276]	@ (8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002b2e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d039      	beq.n	8002bac <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002b38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b48:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a3a      	ldr	r2, [pc, #232]	@ (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d004      	beq.n	8002b5e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a38      	ldr	r2, [pc, #224]	@ (8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d10e      	bne.n	8002b7c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002b5e:	4836      	ldr	r0, [pc, #216]	@ (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b60:	f7ff ff72 	bl	8002a48 <LL_ADC_IsEnabled>
 8002b64:	4604      	mov	r4, r0
 8002b66:	4835      	ldr	r0, [pc, #212]	@ (8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b68:	f7ff ff6e 	bl	8002a48 <LL_ADC_IsEnabled>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4323      	orrs	r3, r4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	e008      	b.n	8002b8e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002b7c:	4832      	ldr	r0, [pc, #200]	@ (8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002b7e:	f7ff ff63 	bl	8002a48 <LL_ADC_IsEnabled>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf0c      	ite	eq
 8002b88:	2301      	moveq	r3, #1
 8002b8a:	2300      	movne	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d047      	beq.n	8002c22 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	4b2d      	ldr	r3, [pc, #180]	@ (8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	6811      	ldr	r1, [r2, #0]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	6892      	ldr	r2, [r2, #8]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ba8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002baa:	e03a      	b.n	8002c22 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bb6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d004      	beq.n	8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d10e      	bne.n	8002bea <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002bcc:	481a      	ldr	r0, [pc, #104]	@ (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002bce:	f7ff ff3b 	bl	8002a48 <LL_ADC_IsEnabled>
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	4819      	ldr	r0, [pc, #100]	@ (8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bd6:	f7ff ff37 	bl	8002a48 <LL_ADC_IsEnabled>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4323      	orrs	r3, r4
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bf0c      	ite	eq
 8002be2:	2301      	moveq	r3, #1
 8002be4:	2300      	movne	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	e008      	b.n	8002bfc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002bea:	4817      	ldr	r0, [pc, #92]	@ (8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002bec:	f7ff ff2c 	bl	8002a48 <LL_ADC_IsEnabled>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	bf0c      	ite	eq
 8002bf6:	2301      	moveq	r3, #1
 8002bf8:	2300      	movne	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d010      	beq.n	8002c22 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c0a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c0c:	e009      	b.n	8002c22 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c12:	f043 0220 	orr.w	r2, r3, #32
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002c20:	e000      	b.n	8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c22:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c2c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	377c      	adds	r7, #124	@ 0x7c
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd90      	pop	{r4, r7, pc}
 8002c38:	40022000 	.word	0x40022000
 8002c3c:	40022100 	.word	0x40022100
 8002c40:	40022300 	.word	0x40022300
 8002c44:	58026300 	.word	0x58026300
 8002c48:	58026000 	.word	0x58026000
 8002c4c:	fffff0e0 	.word	0xfffff0e0

08002c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c60:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <__NVIC_SetPriorityGrouping+0x40>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <__NVIC_SetPriorityGrouping+0x44>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c7e:	4a04      	ldr	r2, [pc, #16]	@ (8002c90 <__NVIC_SetPriorityGrouping+0x40>)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	60d3      	str	r3, [r2, #12]
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000ed00 	.word	0xe000ed00
 8002c94:	05fa0000 	.word	0x05fa0000

08002c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c9c:	4b04      	ldr	r3, [pc, #16]	@ (8002cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	f003 0307 	and.w	r3, r3, #7
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	db0b      	blt.n	8002cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	f003 021f 	and.w	r2, r3, #31
 8002ccc:	4907      	ldr	r1, [pc, #28]	@ (8002cec <__NVIC_EnableIRQ+0x38>)
 8002cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000e100 	.word	0xe000e100

08002cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	6039      	str	r1, [r7, #0]
 8002cfa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	db0a      	blt.n	8002d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	490c      	ldr	r1, [pc, #48]	@ (8002d3c <__NVIC_SetPriority+0x4c>)
 8002d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d0e:	0112      	lsls	r2, r2, #4
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	440b      	add	r3, r1
 8002d14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d18:	e00a      	b.n	8002d30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	4908      	ldr	r1, [pc, #32]	@ (8002d40 <__NVIC_SetPriority+0x50>)
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	3b04      	subs	r3, #4
 8002d28:	0112      	lsls	r2, r2, #4
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	761a      	strb	r2, [r3, #24]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000e100 	.word	0xe000e100
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b089      	sub	sp, #36	@ 0x24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f1c3 0307 	rsb	r3, r3, #7
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	bf28      	it	cs
 8002d62:	2304      	movcs	r3, #4
 8002d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	2b06      	cmp	r3, #6
 8002d6c:	d902      	bls.n	8002d74 <NVIC_EncodePriority+0x30>
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3b03      	subs	r3, #3
 8002d72:	e000      	b.n	8002d76 <NVIC_EncodePriority+0x32>
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43da      	mvns	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	401a      	ands	r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	43d9      	mvns	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d9c:	4313      	orrs	r3, r2
         );
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3724      	adds	r7, #36	@ 0x24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dbc:	d301      	bcc.n	8002dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e00f      	b.n	8002de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dec <SysTick_Config+0x40>)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dca:	210f      	movs	r1, #15
 8002dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd0:	f7ff ff8e 	bl	8002cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dd4:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <SysTick_Config+0x40>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dda:	4b04      	ldr	r3, [pc, #16]	@ (8002dec <SysTick_Config+0x40>)
 8002ddc:	2207      	movs	r2, #7
 8002dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	e000e010 	.word	0xe000e010

08002df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ff29 	bl	8002c50 <__NVIC_SetPriorityGrouping>
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b086      	sub	sp, #24
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e14:	f7ff ff40 	bl	8002c98 <__NVIC_GetPriorityGrouping>
 8002e18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	6978      	ldr	r0, [r7, #20]
 8002e20:	f7ff ff90 	bl	8002d44 <NVIC_EncodePriority>
 8002e24:	4602      	mov	r2, r0
 8002e26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff5f 	bl	8002cf0 <__NVIC_SetPriority>
}
 8002e32:	bf00      	nop
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	4603      	mov	r3, r0
 8002e42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff33 	bl	8002cb4 <__NVIC_EnableIRQ>
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ffa4 	bl	8002dac <SysTick_Config>
 8002e64:	4603      	mov	r3, r0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e014      	b.n	8002eaa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	791b      	ldrb	r3, [r3, #4]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d105      	bne.n	8002e96 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7fe f999 	bl	80011c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2202      	movs	r2, #2
 8002e9a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08a      	sub	sp, #40	@ 0x28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_DAC_ConfigChannel+0x1e>
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e12a      	b.n	800312c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	795b      	ldrb	r3, [r3, #5]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_DAC_ConfigChannel+0x2e>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e124      	b.n	800312c <HAL_DAC_ConfigChannel+0x278>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2202      	movs	r2, #2
 8002eec:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d17a      	bne.n	8002fec <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002ef6:	f7fe fdc1 	bl	8001a7c <HAL_GetTick>
 8002efa:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d13d      	bne.n	8002f7e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f02:	e018      	b.n	8002f36 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f04:	f7fe fdba 	bl	8001a7c <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d911      	bls.n	8002f36 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f18:	4b86      	ldr	r3, [pc, #536]	@ (8003134 <HAL_DAC_ConfigChannel+0x280>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f043 0208 	orr.w	r2, r3, #8
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2203      	movs	r2, #3
 8002f30:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e0fa      	b.n	800312c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f3c:	4b7d      	ldr	r3, [pc, #500]	@ (8003134 <HAL_DAC_ConfigChannel+0x280>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1df      	bne.n	8002f04 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	6992      	ldr	r2, [r2, #24]
 8002f4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f4e:	e020      	b.n	8002f92 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f50:	f7fe fd94 	bl	8001a7c <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d90f      	bls.n	8002f7e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	da0a      	bge.n	8002f7e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f043 0208 	orr.w	r2, r3, #8
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2203      	movs	r2, #3
 8002f78:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e0d6      	b.n	800312c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	dbe3      	blt.n	8002f50 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	6992      	ldr	r2, [r2, #24]
 8002f90:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	ea02 0103 	and.w	r1, r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	21ff      	movs	r1, #255	@ 0xff
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	ea02 0103 	and.w	r1, r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	6a1a      	ldr	r2, [r3, #32]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d11d      	bne.n	8003030 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffa:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	221f      	movs	r2, #31
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003036:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2207      	movs	r2, #7
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d102      	bne.n	800305a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
 8003058:	e00f      	b.n	800307a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d102      	bne.n	8003068 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003062:	2301      	movs	r3, #1
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24
 8003066:	e008      	b.n	800307a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d102      	bne.n	8003076 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003070:	2301      	movs	r3, #1
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24
 8003074:	e001      	b.n	800307a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003076:	2300      	movs	r3, #0
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	4313      	orrs	r3, r2
 8003084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6819      	ldr	r1, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43da      	mvns	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	400a      	ands	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6819      	ldr	r1, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	22c0      	movs	r2, #192	@ 0xc0
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	400a      	ands	r2, r1
 800311a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003128:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800312c:	4618      	mov	r0, r3
 800312e:	3728      	adds	r7, #40	@ 0x28
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20008000 	.word	0x20008000

08003138 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003140:	f7fe fc9c 	bl	8001a7c <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e2dc      	b.n	800370a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d008      	beq.n	800316e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2280      	movs	r2, #128	@ 0x80
 8003160:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e2cd      	b.n	800370a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a76      	ldr	r2, [pc, #472]	@ (800334c <HAL_DMA_Abort+0x214>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d04a      	beq.n	800320e <HAL_DMA_Abort+0xd6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a74      	ldr	r2, [pc, #464]	@ (8003350 <HAL_DMA_Abort+0x218>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d045      	beq.n	800320e <HAL_DMA_Abort+0xd6>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a73      	ldr	r2, [pc, #460]	@ (8003354 <HAL_DMA_Abort+0x21c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d040      	beq.n	800320e <HAL_DMA_Abort+0xd6>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a71      	ldr	r2, [pc, #452]	@ (8003358 <HAL_DMA_Abort+0x220>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d03b      	beq.n	800320e <HAL_DMA_Abort+0xd6>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a70      	ldr	r2, [pc, #448]	@ (800335c <HAL_DMA_Abort+0x224>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d036      	beq.n	800320e <HAL_DMA_Abort+0xd6>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003360 <HAL_DMA_Abort+0x228>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d031      	beq.n	800320e <HAL_DMA_Abort+0xd6>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a6d      	ldr	r2, [pc, #436]	@ (8003364 <HAL_DMA_Abort+0x22c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d02c      	beq.n	800320e <HAL_DMA_Abort+0xd6>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a6b      	ldr	r2, [pc, #428]	@ (8003368 <HAL_DMA_Abort+0x230>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d027      	beq.n	800320e <HAL_DMA_Abort+0xd6>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6a      	ldr	r2, [pc, #424]	@ (800336c <HAL_DMA_Abort+0x234>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d022      	beq.n	800320e <HAL_DMA_Abort+0xd6>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a68      	ldr	r2, [pc, #416]	@ (8003370 <HAL_DMA_Abort+0x238>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01d      	beq.n	800320e <HAL_DMA_Abort+0xd6>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a67      	ldr	r2, [pc, #412]	@ (8003374 <HAL_DMA_Abort+0x23c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d018      	beq.n	800320e <HAL_DMA_Abort+0xd6>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a65      	ldr	r2, [pc, #404]	@ (8003378 <HAL_DMA_Abort+0x240>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d013      	beq.n	800320e <HAL_DMA_Abort+0xd6>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a64      	ldr	r2, [pc, #400]	@ (800337c <HAL_DMA_Abort+0x244>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00e      	beq.n	800320e <HAL_DMA_Abort+0xd6>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a62      	ldr	r2, [pc, #392]	@ (8003380 <HAL_DMA_Abort+0x248>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d009      	beq.n	800320e <HAL_DMA_Abort+0xd6>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a61      	ldr	r2, [pc, #388]	@ (8003384 <HAL_DMA_Abort+0x24c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d004      	beq.n	800320e <HAL_DMA_Abort+0xd6>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a5f      	ldr	r2, [pc, #380]	@ (8003388 <HAL_DMA_Abort+0x250>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d101      	bne.n	8003212 <HAL_DMA_Abort+0xda>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_DMA_Abort+0xdc>
 8003212:	2300      	movs	r3, #0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d013      	beq.n	8003240 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 021e 	bic.w	r2, r2, #30
 8003226:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003236:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	e00a      	b.n	8003256 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 020e 	bic.w	r2, r2, #14
 800324e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a3c      	ldr	r2, [pc, #240]	@ (800334c <HAL_DMA_Abort+0x214>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d072      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a3a      	ldr	r2, [pc, #232]	@ (8003350 <HAL_DMA_Abort+0x218>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d06d      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a39      	ldr	r2, [pc, #228]	@ (8003354 <HAL_DMA_Abort+0x21c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d068      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a37      	ldr	r2, [pc, #220]	@ (8003358 <HAL_DMA_Abort+0x220>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d063      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a36      	ldr	r2, [pc, #216]	@ (800335c <HAL_DMA_Abort+0x224>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d05e      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a34      	ldr	r2, [pc, #208]	@ (8003360 <HAL_DMA_Abort+0x228>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d059      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a33      	ldr	r2, [pc, #204]	@ (8003364 <HAL_DMA_Abort+0x22c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d054      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a31      	ldr	r2, [pc, #196]	@ (8003368 <HAL_DMA_Abort+0x230>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d04f      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a30      	ldr	r2, [pc, #192]	@ (800336c <HAL_DMA_Abort+0x234>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d04a      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003370 <HAL_DMA_Abort+0x238>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d045      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a2d      	ldr	r2, [pc, #180]	@ (8003374 <HAL_DMA_Abort+0x23c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d040      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003378 <HAL_DMA_Abort+0x240>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d03b      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a2a      	ldr	r2, [pc, #168]	@ (800337c <HAL_DMA_Abort+0x244>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d036      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a28      	ldr	r2, [pc, #160]	@ (8003380 <HAL_DMA_Abort+0x248>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d031      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a27      	ldr	r2, [pc, #156]	@ (8003384 <HAL_DMA_Abort+0x24c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d02c      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a25      	ldr	r2, [pc, #148]	@ (8003388 <HAL_DMA_Abort+0x250>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d027      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a24      	ldr	r2, [pc, #144]	@ (800338c <HAL_DMA_Abort+0x254>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d022      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a22      	ldr	r2, [pc, #136]	@ (8003390 <HAL_DMA_Abort+0x258>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01d      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a21      	ldr	r2, [pc, #132]	@ (8003394 <HAL_DMA_Abort+0x25c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d018      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1f      	ldr	r2, [pc, #124]	@ (8003398 <HAL_DMA_Abort+0x260>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d013      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1e      	ldr	r2, [pc, #120]	@ (800339c <HAL_DMA_Abort+0x264>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00e      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1c      	ldr	r2, [pc, #112]	@ (80033a0 <HAL_DMA_Abort+0x268>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d009      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1b      	ldr	r2, [pc, #108]	@ (80033a4 <HAL_DMA_Abort+0x26c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d004      	beq.n	8003346 <HAL_DMA_Abort+0x20e>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a19      	ldr	r2, [pc, #100]	@ (80033a8 <HAL_DMA_Abort+0x270>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d132      	bne.n	80033ac <HAL_DMA_Abort+0x274>
 8003346:	2301      	movs	r3, #1
 8003348:	e031      	b.n	80033ae <HAL_DMA_Abort+0x276>
 800334a:	bf00      	nop
 800334c:	40020010 	.word	0x40020010
 8003350:	40020028 	.word	0x40020028
 8003354:	40020040 	.word	0x40020040
 8003358:	40020058 	.word	0x40020058
 800335c:	40020070 	.word	0x40020070
 8003360:	40020088 	.word	0x40020088
 8003364:	400200a0 	.word	0x400200a0
 8003368:	400200b8 	.word	0x400200b8
 800336c:	40020410 	.word	0x40020410
 8003370:	40020428 	.word	0x40020428
 8003374:	40020440 	.word	0x40020440
 8003378:	40020458 	.word	0x40020458
 800337c:	40020470 	.word	0x40020470
 8003380:	40020488 	.word	0x40020488
 8003384:	400204a0 	.word	0x400204a0
 8003388:	400204b8 	.word	0x400204b8
 800338c:	58025408 	.word	0x58025408
 8003390:	5802541c 	.word	0x5802541c
 8003394:	58025430 	.word	0x58025430
 8003398:	58025444 	.word	0x58025444
 800339c:	58025458 	.word	0x58025458
 80033a0:	5802546c 	.word	0x5802546c
 80033a4:	58025480 	.word	0x58025480
 80033a8:	58025494 	.word	0x58025494
 80033ac:	2300      	movs	r3, #0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d007      	beq.n	80033c2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a6d      	ldr	r2, [pc, #436]	@ (800357c <HAL_DMA_Abort+0x444>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d04a      	beq.n	8003462 <HAL_DMA_Abort+0x32a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003580 <HAL_DMA_Abort+0x448>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d045      	beq.n	8003462 <HAL_DMA_Abort+0x32a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a6a      	ldr	r2, [pc, #424]	@ (8003584 <HAL_DMA_Abort+0x44c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d040      	beq.n	8003462 <HAL_DMA_Abort+0x32a>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a68      	ldr	r2, [pc, #416]	@ (8003588 <HAL_DMA_Abort+0x450>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d03b      	beq.n	8003462 <HAL_DMA_Abort+0x32a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a67      	ldr	r2, [pc, #412]	@ (800358c <HAL_DMA_Abort+0x454>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d036      	beq.n	8003462 <HAL_DMA_Abort+0x32a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a65      	ldr	r2, [pc, #404]	@ (8003590 <HAL_DMA_Abort+0x458>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d031      	beq.n	8003462 <HAL_DMA_Abort+0x32a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a64      	ldr	r2, [pc, #400]	@ (8003594 <HAL_DMA_Abort+0x45c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d02c      	beq.n	8003462 <HAL_DMA_Abort+0x32a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a62      	ldr	r2, [pc, #392]	@ (8003598 <HAL_DMA_Abort+0x460>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d027      	beq.n	8003462 <HAL_DMA_Abort+0x32a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a61      	ldr	r2, [pc, #388]	@ (800359c <HAL_DMA_Abort+0x464>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d022      	beq.n	8003462 <HAL_DMA_Abort+0x32a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a5f      	ldr	r2, [pc, #380]	@ (80035a0 <HAL_DMA_Abort+0x468>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01d      	beq.n	8003462 <HAL_DMA_Abort+0x32a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a5e      	ldr	r2, [pc, #376]	@ (80035a4 <HAL_DMA_Abort+0x46c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d018      	beq.n	8003462 <HAL_DMA_Abort+0x32a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a5c      	ldr	r2, [pc, #368]	@ (80035a8 <HAL_DMA_Abort+0x470>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_DMA_Abort+0x32a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a5b      	ldr	r2, [pc, #364]	@ (80035ac <HAL_DMA_Abort+0x474>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00e      	beq.n	8003462 <HAL_DMA_Abort+0x32a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a59      	ldr	r2, [pc, #356]	@ (80035b0 <HAL_DMA_Abort+0x478>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d009      	beq.n	8003462 <HAL_DMA_Abort+0x32a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a58      	ldr	r2, [pc, #352]	@ (80035b4 <HAL_DMA_Abort+0x47c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_DMA_Abort+0x32a>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a56      	ldr	r2, [pc, #344]	@ (80035b8 <HAL_DMA_Abort+0x480>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d108      	bne.n	8003474 <HAL_DMA_Abort+0x33c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0201 	bic.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	e007      	b.n	8003484 <HAL_DMA_Abort+0x34c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003484:	e013      	b.n	80034ae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003486:	f7fe faf9 	bl	8001a7c <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b05      	cmp	r3, #5
 8003492:	d90c      	bls.n	80034ae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2203      	movs	r2, #3
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e12d      	b.n	800370a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e5      	bne.n	8003486 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a2f      	ldr	r2, [pc, #188]	@ (800357c <HAL_DMA_Abort+0x444>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d04a      	beq.n	800355a <HAL_DMA_Abort+0x422>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003580 <HAL_DMA_Abort+0x448>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d045      	beq.n	800355a <HAL_DMA_Abort+0x422>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003584 <HAL_DMA_Abort+0x44c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d040      	beq.n	800355a <HAL_DMA_Abort+0x422>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a2a      	ldr	r2, [pc, #168]	@ (8003588 <HAL_DMA_Abort+0x450>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d03b      	beq.n	800355a <HAL_DMA_Abort+0x422>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a29      	ldr	r2, [pc, #164]	@ (800358c <HAL_DMA_Abort+0x454>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d036      	beq.n	800355a <HAL_DMA_Abort+0x422>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a27      	ldr	r2, [pc, #156]	@ (8003590 <HAL_DMA_Abort+0x458>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d031      	beq.n	800355a <HAL_DMA_Abort+0x422>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a26      	ldr	r2, [pc, #152]	@ (8003594 <HAL_DMA_Abort+0x45c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d02c      	beq.n	800355a <HAL_DMA_Abort+0x422>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a24      	ldr	r2, [pc, #144]	@ (8003598 <HAL_DMA_Abort+0x460>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d027      	beq.n	800355a <HAL_DMA_Abort+0x422>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a23      	ldr	r2, [pc, #140]	@ (800359c <HAL_DMA_Abort+0x464>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d022      	beq.n	800355a <HAL_DMA_Abort+0x422>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a21      	ldr	r2, [pc, #132]	@ (80035a0 <HAL_DMA_Abort+0x468>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01d      	beq.n	800355a <HAL_DMA_Abort+0x422>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a20      	ldr	r2, [pc, #128]	@ (80035a4 <HAL_DMA_Abort+0x46c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d018      	beq.n	800355a <HAL_DMA_Abort+0x422>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1e      	ldr	r2, [pc, #120]	@ (80035a8 <HAL_DMA_Abort+0x470>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <HAL_DMA_Abort+0x422>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1d      	ldr	r2, [pc, #116]	@ (80035ac <HAL_DMA_Abort+0x474>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00e      	beq.n	800355a <HAL_DMA_Abort+0x422>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1b      	ldr	r2, [pc, #108]	@ (80035b0 <HAL_DMA_Abort+0x478>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d009      	beq.n	800355a <HAL_DMA_Abort+0x422>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1a      	ldr	r2, [pc, #104]	@ (80035b4 <HAL_DMA_Abort+0x47c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d004      	beq.n	800355a <HAL_DMA_Abort+0x422>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a18      	ldr	r2, [pc, #96]	@ (80035b8 <HAL_DMA_Abort+0x480>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d101      	bne.n	800355e <HAL_DMA_Abort+0x426>
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <HAL_DMA_Abort+0x428>
 800355e:	2300      	movs	r3, #0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d02b      	beq.n	80035bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003568:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	223f      	movs	r2, #63	@ 0x3f
 8003574:	409a      	lsls	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	609a      	str	r2, [r3, #8]
 800357a:	e02a      	b.n	80035d2 <HAL_DMA_Abort+0x49a>
 800357c:	40020010 	.word	0x40020010
 8003580:	40020028 	.word	0x40020028
 8003584:	40020040 	.word	0x40020040
 8003588:	40020058 	.word	0x40020058
 800358c:	40020070 	.word	0x40020070
 8003590:	40020088 	.word	0x40020088
 8003594:	400200a0 	.word	0x400200a0
 8003598:	400200b8 	.word	0x400200b8
 800359c:	40020410 	.word	0x40020410
 80035a0:	40020428 	.word	0x40020428
 80035a4:	40020440 	.word	0x40020440
 80035a8:	40020458 	.word	0x40020458
 80035ac:	40020470 	.word	0x40020470
 80035b0:	40020488 	.word	0x40020488
 80035b4:	400204a0 	.word	0x400204a0
 80035b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	2201      	movs	r2, #1
 80035cc:	409a      	lsls	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a4f      	ldr	r2, [pc, #316]	@ (8003714 <HAL_DMA_Abort+0x5dc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d072      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003718 <HAL_DMA_Abort+0x5e0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d06d      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a4c      	ldr	r2, [pc, #304]	@ (800371c <HAL_DMA_Abort+0x5e4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d068      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a4a      	ldr	r2, [pc, #296]	@ (8003720 <HAL_DMA_Abort+0x5e8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d063      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a49      	ldr	r2, [pc, #292]	@ (8003724 <HAL_DMA_Abort+0x5ec>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d05e      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a47      	ldr	r2, [pc, #284]	@ (8003728 <HAL_DMA_Abort+0x5f0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d059      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a46      	ldr	r2, [pc, #280]	@ (800372c <HAL_DMA_Abort+0x5f4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d054      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a44      	ldr	r2, [pc, #272]	@ (8003730 <HAL_DMA_Abort+0x5f8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d04f      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a43      	ldr	r2, [pc, #268]	@ (8003734 <HAL_DMA_Abort+0x5fc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d04a      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a41      	ldr	r2, [pc, #260]	@ (8003738 <HAL_DMA_Abort+0x600>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d045      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a40      	ldr	r2, [pc, #256]	@ (800373c <HAL_DMA_Abort+0x604>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d040      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a3e      	ldr	r2, [pc, #248]	@ (8003740 <HAL_DMA_Abort+0x608>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d03b      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a3d      	ldr	r2, [pc, #244]	@ (8003744 <HAL_DMA_Abort+0x60c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d036      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a3b      	ldr	r2, [pc, #236]	@ (8003748 <HAL_DMA_Abort+0x610>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d031      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a3a      	ldr	r2, [pc, #232]	@ (800374c <HAL_DMA_Abort+0x614>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d02c      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a38      	ldr	r2, [pc, #224]	@ (8003750 <HAL_DMA_Abort+0x618>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d027      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a37      	ldr	r2, [pc, #220]	@ (8003754 <HAL_DMA_Abort+0x61c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d022      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a35      	ldr	r2, [pc, #212]	@ (8003758 <HAL_DMA_Abort+0x620>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d01d      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a34      	ldr	r2, [pc, #208]	@ (800375c <HAL_DMA_Abort+0x624>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d018      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a32      	ldr	r2, [pc, #200]	@ (8003760 <HAL_DMA_Abort+0x628>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d013      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a31      	ldr	r2, [pc, #196]	@ (8003764 <HAL_DMA_Abort+0x62c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00e      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003768 <HAL_DMA_Abort+0x630>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d009      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a2e      	ldr	r2, [pc, #184]	@ (800376c <HAL_DMA_Abort+0x634>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_DMA_Abort+0x58a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003770 <HAL_DMA_Abort+0x638>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d101      	bne.n	80036c6 <HAL_DMA_Abort+0x58e>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <HAL_DMA_Abort+0x590>
 80036c6:	2300      	movs	r3, #0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d015      	beq.n	80036f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80036d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00c      	beq.n	80036f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80036f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40020010 	.word	0x40020010
 8003718:	40020028 	.word	0x40020028
 800371c:	40020040 	.word	0x40020040
 8003720:	40020058 	.word	0x40020058
 8003724:	40020070 	.word	0x40020070
 8003728:	40020088 	.word	0x40020088
 800372c:	400200a0 	.word	0x400200a0
 8003730:	400200b8 	.word	0x400200b8
 8003734:	40020410 	.word	0x40020410
 8003738:	40020428 	.word	0x40020428
 800373c:	40020440 	.word	0x40020440
 8003740:	40020458 	.word	0x40020458
 8003744:	40020470 	.word	0x40020470
 8003748:	40020488 	.word	0x40020488
 800374c:	400204a0 	.word	0x400204a0
 8003750:	400204b8 	.word	0x400204b8
 8003754:	58025408 	.word	0x58025408
 8003758:	5802541c 	.word	0x5802541c
 800375c:	58025430 	.word	0x58025430
 8003760:	58025444 	.word	0x58025444
 8003764:	58025458 	.word	0x58025458
 8003768:	5802546c 	.word	0x5802546c
 800376c:	58025480 	.word	0x58025480
 8003770:	58025494 	.word	0x58025494

08003774 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e237      	b.n	8003bf6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d004      	beq.n	800379c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2280      	movs	r2, #128	@ 0x80
 8003796:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e22c      	b.n	8003bf6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a5c      	ldr	r2, [pc, #368]	@ (8003914 <HAL_DMA_Abort_IT+0x1a0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d04a      	beq.n	800383c <HAL_DMA_Abort_IT+0xc8>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003918 <HAL_DMA_Abort_IT+0x1a4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d045      	beq.n	800383c <HAL_DMA_Abort_IT+0xc8>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a59      	ldr	r2, [pc, #356]	@ (800391c <HAL_DMA_Abort_IT+0x1a8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d040      	beq.n	800383c <HAL_DMA_Abort_IT+0xc8>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a58      	ldr	r2, [pc, #352]	@ (8003920 <HAL_DMA_Abort_IT+0x1ac>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d03b      	beq.n	800383c <HAL_DMA_Abort_IT+0xc8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a56      	ldr	r2, [pc, #344]	@ (8003924 <HAL_DMA_Abort_IT+0x1b0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d036      	beq.n	800383c <HAL_DMA_Abort_IT+0xc8>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a55      	ldr	r2, [pc, #340]	@ (8003928 <HAL_DMA_Abort_IT+0x1b4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d031      	beq.n	800383c <HAL_DMA_Abort_IT+0xc8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a53      	ldr	r2, [pc, #332]	@ (800392c <HAL_DMA_Abort_IT+0x1b8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d02c      	beq.n	800383c <HAL_DMA_Abort_IT+0xc8>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a52      	ldr	r2, [pc, #328]	@ (8003930 <HAL_DMA_Abort_IT+0x1bc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d027      	beq.n	800383c <HAL_DMA_Abort_IT+0xc8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a50      	ldr	r2, [pc, #320]	@ (8003934 <HAL_DMA_Abort_IT+0x1c0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d022      	beq.n	800383c <HAL_DMA_Abort_IT+0xc8>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a4f      	ldr	r2, [pc, #316]	@ (8003938 <HAL_DMA_Abort_IT+0x1c4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d01d      	beq.n	800383c <HAL_DMA_Abort_IT+0xc8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a4d      	ldr	r2, [pc, #308]	@ (800393c <HAL_DMA_Abort_IT+0x1c8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d018      	beq.n	800383c <HAL_DMA_Abort_IT+0xc8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a4c      	ldr	r2, [pc, #304]	@ (8003940 <HAL_DMA_Abort_IT+0x1cc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d013      	beq.n	800383c <HAL_DMA_Abort_IT+0xc8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a4a      	ldr	r2, [pc, #296]	@ (8003944 <HAL_DMA_Abort_IT+0x1d0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00e      	beq.n	800383c <HAL_DMA_Abort_IT+0xc8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a49      	ldr	r2, [pc, #292]	@ (8003948 <HAL_DMA_Abort_IT+0x1d4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d009      	beq.n	800383c <HAL_DMA_Abort_IT+0xc8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a47      	ldr	r2, [pc, #284]	@ (800394c <HAL_DMA_Abort_IT+0x1d8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <HAL_DMA_Abort_IT+0xc8>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a46      	ldr	r2, [pc, #280]	@ (8003950 <HAL_DMA_Abort_IT+0x1dc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d101      	bne.n	8003840 <HAL_DMA_Abort_IT+0xcc>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <HAL_DMA_Abort_IT+0xce>
 8003840:	2300      	movs	r3, #0
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8086 	beq.w	8003954 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2204      	movs	r2, #4
 800384c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a2f      	ldr	r2, [pc, #188]	@ (8003914 <HAL_DMA_Abort_IT+0x1a0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d04a      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x17c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a2e      	ldr	r2, [pc, #184]	@ (8003918 <HAL_DMA_Abort_IT+0x1a4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d045      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x17c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2c      	ldr	r2, [pc, #176]	@ (800391c <HAL_DMA_Abort_IT+0x1a8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d040      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x17c>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a2b      	ldr	r2, [pc, #172]	@ (8003920 <HAL_DMA_Abort_IT+0x1ac>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d03b      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x17c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a29      	ldr	r2, [pc, #164]	@ (8003924 <HAL_DMA_Abort_IT+0x1b0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d036      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x17c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a28      	ldr	r2, [pc, #160]	@ (8003928 <HAL_DMA_Abort_IT+0x1b4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d031      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x17c>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a26      	ldr	r2, [pc, #152]	@ (800392c <HAL_DMA_Abort_IT+0x1b8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d02c      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x17c>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a25      	ldr	r2, [pc, #148]	@ (8003930 <HAL_DMA_Abort_IT+0x1bc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d027      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x17c>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a23      	ldr	r2, [pc, #140]	@ (8003934 <HAL_DMA_Abort_IT+0x1c0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d022      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x17c>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a22      	ldr	r2, [pc, #136]	@ (8003938 <HAL_DMA_Abort_IT+0x1c4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d01d      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x17c>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a20      	ldr	r2, [pc, #128]	@ (800393c <HAL_DMA_Abort_IT+0x1c8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d018      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x17c>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003940 <HAL_DMA_Abort_IT+0x1cc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d013      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x17c>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003944 <HAL_DMA_Abort_IT+0x1d0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00e      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x17c>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003948 <HAL_DMA_Abort_IT+0x1d4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d009      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x17c>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1a      	ldr	r2, [pc, #104]	@ (800394c <HAL_DMA_Abort_IT+0x1d8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d004      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x17c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a19      	ldr	r2, [pc, #100]	@ (8003950 <HAL_DMA_Abort_IT+0x1dc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d108      	bne.n	8003902 <HAL_DMA_Abort_IT+0x18e>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	e178      	b.n	8003bf4 <HAL_DMA_Abort_IT+0x480>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0201 	bic.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e16f      	b.n	8003bf4 <HAL_DMA_Abort_IT+0x480>
 8003914:	40020010 	.word	0x40020010
 8003918:	40020028 	.word	0x40020028
 800391c:	40020040 	.word	0x40020040
 8003920:	40020058 	.word	0x40020058
 8003924:	40020070 	.word	0x40020070
 8003928:	40020088 	.word	0x40020088
 800392c:	400200a0 	.word	0x400200a0
 8003930:	400200b8 	.word	0x400200b8
 8003934:	40020410 	.word	0x40020410
 8003938:	40020428 	.word	0x40020428
 800393c:	40020440 	.word	0x40020440
 8003940:	40020458 	.word	0x40020458
 8003944:	40020470 	.word	0x40020470
 8003948:	40020488 	.word	0x40020488
 800394c:	400204a0 	.word	0x400204a0
 8003950:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 020e 	bic.w	r2, r2, #14
 8003962:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a6c      	ldr	r2, [pc, #432]	@ (8003b1c <HAL_DMA_Abort_IT+0x3a8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d04a      	beq.n	8003a04 <HAL_DMA_Abort_IT+0x290>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a6b      	ldr	r2, [pc, #428]	@ (8003b20 <HAL_DMA_Abort_IT+0x3ac>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d045      	beq.n	8003a04 <HAL_DMA_Abort_IT+0x290>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a69      	ldr	r2, [pc, #420]	@ (8003b24 <HAL_DMA_Abort_IT+0x3b0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d040      	beq.n	8003a04 <HAL_DMA_Abort_IT+0x290>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a68      	ldr	r2, [pc, #416]	@ (8003b28 <HAL_DMA_Abort_IT+0x3b4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d03b      	beq.n	8003a04 <HAL_DMA_Abort_IT+0x290>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a66      	ldr	r2, [pc, #408]	@ (8003b2c <HAL_DMA_Abort_IT+0x3b8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d036      	beq.n	8003a04 <HAL_DMA_Abort_IT+0x290>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a65      	ldr	r2, [pc, #404]	@ (8003b30 <HAL_DMA_Abort_IT+0x3bc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d031      	beq.n	8003a04 <HAL_DMA_Abort_IT+0x290>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a63      	ldr	r2, [pc, #396]	@ (8003b34 <HAL_DMA_Abort_IT+0x3c0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d02c      	beq.n	8003a04 <HAL_DMA_Abort_IT+0x290>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a62      	ldr	r2, [pc, #392]	@ (8003b38 <HAL_DMA_Abort_IT+0x3c4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d027      	beq.n	8003a04 <HAL_DMA_Abort_IT+0x290>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a60      	ldr	r2, [pc, #384]	@ (8003b3c <HAL_DMA_Abort_IT+0x3c8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d022      	beq.n	8003a04 <HAL_DMA_Abort_IT+0x290>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a5f      	ldr	r2, [pc, #380]	@ (8003b40 <HAL_DMA_Abort_IT+0x3cc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d01d      	beq.n	8003a04 <HAL_DMA_Abort_IT+0x290>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a5d      	ldr	r2, [pc, #372]	@ (8003b44 <HAL_DMA_Abort_IT+0x3d0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d018      	beq.n	8003a04 <HAL_DMA_Abort_IT+0x290>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a5c      	ldr	r2, [pc, #368]	@ (8003b48 <HAL_DMA_Abort_IT+0x3d4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d013      	beq.n	8003a04 <HAL_DMA_Abort_IT+0x290>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a5a      	ldr	r2, [pc, #360]	@ (8003b4c <HAL_DMA_Abort_IT+0x3d8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00e      	beq.n	8003a04 <HAL_DMA_Abort_IT+0x290>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a59      	ldr	r2, [pc, #356]	@ (8003b50 <HAL_DMA_Abort_IT+0x3dc>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d009      	beq.n	8003a04 <HAL_DMA_Abort_IT+0x290>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a57      	ldr	r2, [pc, #348]	@ (8003b54 <HAL_DMA_Abort_IT+0x3e0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d004      	beq.n	8003a04 <HAL_DMA_Abort_IT+0x290>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a56      	ldr	r2, [pc, #344]	@ (8003b58 <HAL_DMA_Abort_IT+0x3e4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d108      	bne.n	8003a16 <HAL_DMA_Abort_IT+0x2a2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	e007      	b.n	8003a26 <HAL_DMA_Abort_IT+0x2b2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a3c      	ldr	r2, [pc, #240]	@ (8003b1c <HAL_DMA_Abort_IT+0x3a8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d072      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a3a      	ldr	r2, [pc, #232]	@ (8003b20 <HAL_DMA_Abort_IT+0x3ac>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d06d      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a39      	ldr	r2, [pc, #228]	@ (8003b24 <HAL_DMA_Abort_IT+0x3b0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d068      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a37      	ldr	r2, [pc, #220]	@ (8003b28 <HAL_DMA_Abort_IT+0x3b4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d063      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a36      	ldr	r2, [pc, #216]	@ (8003b2c <HAL_DMA_Abort_IT+0x3b8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d05e      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a34      	ldr	r2, [pc, #208]	@ (8003b30 <HAL_DMA_Abort_IT+0x3bc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d059      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a33      	ldr	r2, [pc, #204]	@ (8003b34 <HAL_DMA_Abort_IT+0x3c0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d054      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a31      	ldr	r2, [pc, #196]	@ (8003b38 <HAL_DMA_Abort_IT+0x3c4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d04f      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a30      	ldr	r2, [pc, #192]	@ (8003b3c <HAL_DMA_Abort_IT+0x3c8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d04a      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a2e      	ldr	r2, [pc, #184]	@ (8003b40 <HAL_DMA_Abort_IT+0x3cc>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d045      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b44 <HAL_DMA_Abort_IT+0x3d0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d040      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a2b      	ldr	r2, [pc, #172]	@ (8003b48 <HAL_DMA_Abort_IT+0x3d4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d03b      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8003b4c <HAL_DMA_Abort_IT+0x3d8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d036      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a28      	ldr	r2, [pc, #160]	@ (8003b50 <HAL_DMA_Abort_IT+0x3dc>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d031      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a27      	ldr	r2, [pc, #156]	@ (8003b54 <HAL_DMA_Abort_IT+0x3e0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d02c      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a25      	ldr	r2, [pc, #148]	@ (8003b58 <HAL_DMA_Abort_IT+0x3e4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d027      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a24      	ldr	r2, [pc, #144]	@ (8003b5c <HAL_DMA_Abort_IT+0x3e8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d022      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a22      	ldr	r2, [pc, #136]	@ (8003b60 <HAL_DMA_Abort_IT+0x3ec>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01d      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a21      	ldr	r2, [pc, #132]	@ (8003b64 <HAL_DMA_Abort_IT+0x3f0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d018      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8003b68 <HAL_DMA_Abort_IT+0x3f4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b6c <HAL_DMA_Abort_IT+0x3f8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00e      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1c      	ldr	r2, [pc, #112]	@ (8003b70 <HAL_DMA_Abort_IT+0x3fc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d009      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a1b      	ldr	r2, [pc, #108]	@ (8003b74 <HAL_DMA_Abort_IT+0x400>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d004      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x3a2>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a19      	ldr	r2, [pc, #100]	@ (8003b78 <HAL_DMA_Abort_IT+0x404>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d132      	bne.n	8003b7c <HAL_DMA_Abort_IT+0x408>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e031      	b.n	8003b7e <HAL_DMA_Abort_IT+0x40a>
 8003b1a:	bf00      	nop
 8003b1c:	40020010 	.word	0x40020010
 8003b20:	40020028 	.word	0x40020028
 8003b24:	40020040 	.word	0x40020040
 8003b28:	40020058 	.word	0x40020058
 8003b2c:	40020070 	.word	0x40020070
 8003b30:	40020088 	.word	0x40020088
 8003b34:	400200a0 	.word	0x400200a0
 8003b38:	400200b8 	.word	0x400200b8
 8003b3c:	40020410 	.word	0x40020410
 8003b40:	40020428 	.word	0x40020428
 8003b44:	40020440 	.word	0x40020440
 8003b48:	40020458 	.word	0x40020458
 8003b4c:	40020470 	.word	0x40020470
 8003b50:	40020488 	.word	0x40020488
 8003b54:	400204a0 	.word	0x400204a0
 8003b58:	400204b8 	.word	0x400204b8
 8003b5c:	58025408 	.word	0x58025408
 8003b60:	5802541c 	.word	0x5802541c
 8003b64:	58025430 	.word	0x58025430
 8003b68:	58025444 	.word	0x58025444
 8003b6c:	58025458 	.word	0x58025458
 8003b70:	5802546c 	.word	0x5802546c
 8003b74:	58025480 	.word	0x58025480
 8003b78:	58025494 	.word	0x58025494
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d028      	beq.n	8003bd4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b90:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b96:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003bb0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00c      	beq.n	8003bd4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bc8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003bd2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop

08003c00 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c0e:	b2db      	uxtb	r3, r3
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0e3      	b.n	8003df6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2223      	movs	r2, #35	@ 0x23
 8003c3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7fd fb07 	bl	8001254 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c46:	4b6e      	ldr	r3, [pc, #440]	@ (8003e00 <HAL_ETH_Init+0x1e4>)
 8003c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c4c:	4a6c      	ldr	r2, [pc, #432]	@ (8003e00 <HAL_ETH_Init+0x1e4>)
 8003c4e:	f043 0302 	orr.w	r3, r3, #2
 8003c52:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003c56:	4b6a      	ldr	r3, [pc, #424]	@ (8003e00 <HAL_ETH_Init+0x1e4>)
 8003c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	7a1b      	ldrb	r3, [r3, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d103      	bne.n	8003c74 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	f7fd ff41 	bl	8001af4 <HAL_SYSCFG_ETHInterfaceSelect>
 8003c72:	e003      	b.n	8003c7c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003c74:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003c78:	f7fd ff3c 	bl	8001af4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003c7c:	4b61      	ldr	r3, [pc, #388]	@ (8003e04 <HAL_ETH_Init+0x1e8>)
 8003c7e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c98:	f7fd fef0 	bl	8001a7c <HAL_GetTick>
 8003c9c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003c9e:	e011      	b.n	8003cc4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003ca0:	f7fd feec 	bl	8001a7c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003cae:	d909      	bls.n	8003cc4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2204      	movs	r2, #4
 8003cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	22e0      	movs	r2, #224	@ 0xe0
 8003cbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e098      	b.n	8003df6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e4      	bne.n	8003ca0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f89e 	bl	8003e18 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003cdc:	f003 fb50 	bl	8007380 <HAL_RCC_GetHCLKFreq>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	4a49      	ldr	r2, [pc, #292]	@ (8003e08 <HAL_ETH_Init+0x1ec>)
 8003ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce8:	0c9a      	lsrs	r2, r3, #18
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3a01      	subs	r2, #1
 8003cf0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fa81 	bl	80041fc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d02:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003d06:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6812      	ldr	r2, [r2, #0]
 8003d0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003d12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d16:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	22e0      	movs	r2, #224	@ 0xe0
 8003d32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e05d      	b.n	8003df6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d42:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003d46:	4b31      	ldr	r3, [pc, #196]	@ (8003e0c <HAL_ETH_Init+0x1f0>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6952      	ldr	r2, [r2, #20]
 8003d4e:	0051      	lsls	r1, r2, #1
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	430b      	orrs	r3, r1
 8003d56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d5a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fae9 	bl	8004336 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fb2f 	bl	80043c8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	3305      	adds	r3, #5
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	021a      	lsls	r2, r3, #8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	3303      	adds	r3, #3
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	061a      	lsls	r2, r3, #24
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	3302      	adds	r3, #2
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	041b      	lsls	r3, r3, #16
 8003d9c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	3301      	adds	r3, #1
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003da8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003db6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003db8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4b11      	ldr	r3, [pc, #68]	@ (8003e10 <HAL_ETH_Init+0x1f4>)
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8003e14 <HAL_ETH_Init+0x1f8>)
 8003dde:	430b      	orrs	r3, r1
 8003de0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2210      	movs	r2, #16
 8003df0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	58024400 	.word	0x58024400
 8003e04:	58000400 	.word	0x58000400
 8003e08:	431bde83 	.word	0x431bde83
 8003e0c:	ffff8001 	.word	0xffff8001
 8003e10:	0c020060 	.word	0x0c020060
 8003e14:	0c20c000 	.word	0x0c20c000

08003e18 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003e32:	f003 faa5 	bl	8007380 <HAL_RCC_GetHCLKFreq>
 8003e36:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ea4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d804      	bhi.n	8003e4a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	e022      	b.n	8003e90 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	4a16      	ldr	r2, [pc, #88]	@ (8003ea8 <HAL_ETH_SetMDIOClockRange+0x90>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d204      	bcs.n	8003e5c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	e019      	b.n	8003e90 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4a13      	ldr	r2, [pc, #76]	@ (8003eac <HAL_ETH_SetMDIOClockRange+0x94>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d915      	bls.n	8003e90 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4a12      	ldr	r2, [pc, #72]	@ (8003eb0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d804      	bhi.n	8003e76 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e00c      	b.n	8003e90 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	4a0e      	ldr	r2, [pc, #56]	@ (8003eb4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d804      	bhi.n	8003e88 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	e003      	b.n	8003e90 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8003e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	02160ebf 	.word	0x02160ebf
 8003ea8:	03938700 	.word	0x03938700
 8003eac:	05f5e0ff 	.word	0x05f5e0ff
 8003eb0:	08f0d17f 	.word	0x08f0d17f
 8003eb4:	0ee6b27f 	.word	0x0ee6b27f

08003eb8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003eca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	791b      	ldrb	r3, [r3, #4]
 8003ed0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003ed2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	7b1b      	ldrb	r3, [r3, #12]
 8003ed8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003eda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	7b5b      	ldrb	r3, [r3, #13]
 8003ee0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003ee2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	7b9b      	ldrb	r3, [r3, #14]
 8003ee8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003eea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	7bdb      	ldrb	r3, [r3, #15]
 8003ef0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003ef2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	7c12      	ldrb	r2, [r2, #16]
 8003ef8:	2a00      	cmp	r2, #0
 8003efa:	d102      	bne.n	8003f02 <ETH_SetMACConfig+0x4a>
 8003efc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003f00:	e000      	b.n	8003f04 <ETH_SetMACConfig+0x4c>
 8003f02:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003f04:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	7c52      	ldrb	r2, [r2, #17]
 8003f0a:	2a00      	cmp	r2, #0
 8003f0c:	d102      	bne.n	8003f14 <ETH_SetMACConfig+0x5c>
 8003f0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f12:	e000      	b.n	8003f16 <ETH_SetMACConfig+0x5e>
 8003f14:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003f16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	7c9b      	ldrb	r3, [r3, #18]
 8003f1c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003f1e:	431a      	orrs	r2, r3
               macconf->Speed |
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003f24:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003f2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	7f1b      	ldrb	r3, [r3, #28]
 8003f30:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003f32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	7f5b      	ldrb	r3, [r3, #29]
 8003f38:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003f3a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	7f92      	ldrb	r2, [r2, #30]
 8003f40:	2a00      	cmp	r2, #0
 8003f42:	d102      	bne.n	8003f4a <ETH_SetMACConfig+0x92>
 8003f44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f48:	e000      	b.n	8003f4c <ETH_SetMACConfig+0x94>
 8003f4a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003f4c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	7fdb      	ldrb	r3, [r3, #31]
 8003f52:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003f54:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003f5c:	2a00      	cmp	r2, #0
 8003f5e:	d102      	bne.n	8003f66 <ETH_SetMACConfig+0xae>
 8003f60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f64:	e000      	b.n	8003f68 <ETH_SetMACConfig+0xb0>
 8003f66:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003f68:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003f6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f76:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003f78:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b56      	ldr	r3, [pc, #344]	@ (80040e4 <ETH_SetMACConfig+0x22c>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	68f9      	ldr	r1, [r7, #12]
 8003f92:	430b      	orrs	r3, r1
 8003f94:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003fa2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003fa4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003fac:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003fae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003fb6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003fb8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8003fc0:	2a00      	cmp	r2, #0
 8003fc2:	d102      	bne.n	8003fca <ETH_SetMACConfig+0x112>
 8003fc4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003fc8:	e000      	b.n	8003fcc <ETH_SetMACConfig+0x114>
 8003fca:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003fcc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	4b42      	ldr	r3, [pc, #264]	@ (80040e8 <ETH_SetMACConfig+0x230>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	68f9      	ldr	r1, [r7, #12]
 8003fe6:	430b      	orrs	r3, r1
 8003fe8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ff0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	4b3a      	ldr	r3, [pc, #232]	@ (80040ec <ETH_SetMACConfig+0x234>)
 8004002:	4013      	ands	r3, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	68f9      	ldr	r1, [r7, #12]
 800400a:	430b      	orrs	r3, r1
 800400c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004014:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800401a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004022:	2a00      	cmp	r2, #0
 8004024:	d101      	bne.n	800402a <ETH_SetMACConfig+0x172>
 8004026:	2280      	movs	r2, #128	@ 0x80
 8004028:	e000      	b.n	800402c <ETH_SetMACConfig+0x174>
 800402a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800402c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004032:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800403e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8004042:	4013      	ands	r3, r2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	68f9      	ldr	r1, [r7, #12]
 800404a:	430b      	orrs	r3, r1
 800404c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004054:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800405c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406a:	f023 0103 	bic.w	r1, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	430a      	orrs	r2, r1
 8004076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004082:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800409e:	2a00      	cmp	r2, #0
 80040a0:	d101      	bne.n	80040a6 <ETH_SetMACConfig+0x1ee>
 80040a2:	2240      	movs	r2, #64	@ 0x40
 80040a4:	e000      	b.n	80040a8 <ETH_SetMACConfig+0x1f0>
 80040a6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80040a8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80040b0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80040b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80040ba:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80040c8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80040d8:	bf00      	nop
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	00048083 	.word	0x00048083
 80040e8:	c0f88000 	.word	0xc0f88000
 80040ec:	fffffef0 	.word	0xfffffef0

080040f0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4b38      	ldr	r3, [pc, #224]	@ (80041e8 <ETH_SetDMAConfig+0xf8>)
 8004106:	4013      	ands	r3, r2
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	6811      	ldr	r1, [r2, #0]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	430b      	orrs	r3, r1
 8004112:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004116:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	791b      	ldrb	r3, [r3, #4]
 800411c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004122:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	7b1b      	ldrb	r3, [r3, #12]
 8004128:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	4b2c      	ldr	r3, [pc, #176]	@ (80041ec <ETH_SetDMAConfig+0xfc>)
 800413a:	4013      	ands	r3, r2
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	68f9      	ldr	r1, [r7, #12]
 8004142:	430b      	orrs	r3, r1
 8004144:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004148:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	7b5b      	ldrb	r3, [r3, #13]
 800414e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004160:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004164:	4b22      	ldr	r3, [pc, #136]	@ (80041f0 <ETH_SetDMAConfig+0x100>)
 8004166:	4013      	ands	r3, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	68f9      	ldr	r1, [r7, #12]
 800416e:	430b      	orrs	r3, r1
 8004170:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004174:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	7d1b      	ldrb	r3, [r3, #20]
 8004180:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004182:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	7f5b      	ldrb	r3, [r3, #29]
 8004188:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004196:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800419a:	4b16      	ldr	r3, [pc, #88]	@ (80041f4 <ETH_SetDMAConfig+0x104>)
 800419c:	4013      	ands	r3, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	68f9      	ldr	r1, [r7, #12]
 80041a4:	430b      	orrs	r3, r1
 80041a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041aa:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	7f1b      	ldrb	r3, [r3, #28]
 80041b2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041c4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80041c8:	4b0b      	ldr	r3, [pc, #44]	@ (80041f8 <ETH_SetDMAConfig+0x108>)
 80041ca:	4013      	ands	r3, r2
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	68f9      	ldr	r1, [r7, #12]
 80041d2:	430b      	orrs	r3, r1
 80041d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041d8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	ffff87fd 	.word	0xffff87fd
 80041ec:	ffff2ffe 	.word	0xffff2ffe
 80041f0:	fffec000 	.word	0xfffec000
 80041f4:	ffc0efef 	.word	0xffc0efef
 80041f8:	7fc0ffff 	.word	0x7fc0ffff

080041fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b0a4      	sub	sp, #144	@ 0x90
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800420a:	2300      	movs	r3, #0
 800420c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800420e:	2300      	movs	r3, #0
 8004210:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004214:	2300      	movs	r3, #0
 8004216:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004220:	2301      	movs	r3, #1
 8004222:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004226:	2301      	movs	r3, #1
 8004228:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800422c:	2300      	movs	r3, #0
 800422e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004232:	2301      	movs	r3, #1
 8004234:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004238:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800423c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800423e:	2300      	movs	r3, #0
 8004240:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004244:	2300      	movs	r3, #0
 8004246:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004248:	2300      	movs	r3, #0
 800424a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800424e:	2300      	movs	r3, #0
 8004250:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004254:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8004258:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800425a:	2300      	movs	r3, #0
 800425c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004260:	2300      	movs	r3, #0
 8004262:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8004264:	2301      	movs	r3, #1
 8004266:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800426a:	2300      	movs	r3, #0
 800426c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004270:	2300      	movs	r3, #0
 8004272:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004276:	2300      	movs	r3, #0
 8004278:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800427a:	2300      	movs	r3, #0
 800427c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800427e:	2300      	movs	r3, #0
 8004280:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004282:	2300      	movs	r3, #0
 8004284:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004288:	2300      	movs	r3, #0
 800428a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800428e:	2301      	movs	r3, #1
 8004290:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004294:	2320      	movs	r3, #32
 8004296:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800429a:	2301      	movs	r3, #1
 800429c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80042a0:	2300      	movs	r3, #0
 80042a2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80042a6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80042aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80042ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80042b0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80042b8:	2302      	movs	r3, #2
 80042ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80042be:	2300      	movs	r3, #0
 80042c0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80042c4:	2300      	movs	r3, #0
 80042c6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80042ca:	2300      	movs	r3, #0
 80042cc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80042d6:	2300      	movs	r3, #0
 80042d8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80042da:	2301      	movs	r3, #1
 80042dc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80042e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80042e4:	4619      	mov	r1, r3
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff fde6 	bl	8003eb8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80042ec:	2301      	movs	r3, #1
 80042ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80042f0:	2301      	movs	r3, #1
 80042f2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80042f8:	2300      	movs	r3, #0
 80042fa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80042fe:	2300      	movs	r3, #0
 8004300:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004302:	2300      	movs	r3, #0
 8004304:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004306:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800430a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800430c:	2300      	movs	r3, #0
 800430e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004310:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004314:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004316:	2300      	movs	r3, #0
 8004318:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800431c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8004320:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004322:	f107 0308 	add.w	r3, r7, #8
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff fee1 	bl	80040f0 <ETH_SetDMAConfig>
}
 800432e:	bf00      	nop
 8004330:	3790      	adds	r7, #144	@ 0x90
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	e01d      	b.n	8004380 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68d9      	ldr	r1, [r3, #12]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4613      	mov	r3, r2
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	4413      	add	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	440b      	add	r3, r1
 8004354:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2200      	movs	r2, #0
 8004360:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2200      	movs	r2, #0
 8004366:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2200      	movs	r2, #0
 800436c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	3206      	adds	r2, #6
 8004376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3301      	adds	r3, #1
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b03      	cmp	r3, #3
 8004384:	d9de      	bls.n	8004344 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004394:	461a      	mov	r2, r3
 8004396:	2303      	movs	r3, #3
 8004398:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043a8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043b8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	e023      	b.n	800441e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6919      	ldr	r1, [r3, #16]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4613      	mov	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4413      	add	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	440b      	add	r3, r1
 80043e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2200      	movs	r2, #0
 80043f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2200      	movs	r2, #0
 80043f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2200      	movs	r2, #0
 80043fe:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2200      	movs	r2, #0
 8004404:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2200      	movs	r2, #0
 800440a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	3212      	adds	r2, #18
 8004414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3301      	adds	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b03      	cmp	r3, #3
 8004422:	d9d8      	bls.n	80043d6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800444a:	461a      	mov	r2, r3
 800444c:	2303      	movs	r3, #3
 800444e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800445e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004472:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8004476:	bf00      	nop
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
	...

08004484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004484:	b480      	push	{r7}
 8004486:	b089      	sub	sp, #36	@ 0x24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004492:	4b89      	ldr	r3, [pc, #548]	@ (80046b8 <HAL_GPIO_Init+0x234>)
 8004494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004496:	e194      	b.n	80047c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	2101      	movs	r1, #1
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	4013      	ands	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 8186 	beq.w	80047bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d005      	beq.n	80044c8 <HAL_GPIO_Init+0x44>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d130      	bne.n	800452a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	2203      	movs	r2, #3
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	43db      	mvns	r3, r3
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	4013      	ands	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044fe:	2201      	movs	r2, #1
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43db      	mvns	r3, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4013      	ands	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	f003 0201 	and.w	r2, r3, #1
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4313      	orrs	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b03      	cmp	r3, #3
 8004534:	d017      	beq.n	8004566 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	2203      	movs	r2, #3
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	4013      	ands	r3, r2
 800454c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4313      	orrs	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d123      	bne.n	80045ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	08da      	lsrs	r2, r3, #3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3208      	adds	r2, #8
 800457a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800457e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	220f      	movs	r2, #15
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	43db      	mvns	r3, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	08da      	lsrs	r2, r3, #3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3208      	adds	r2, #8
 80045b4:	69b9      	ldr	r1, [r7, #24]
 80045b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	2203      	movs	r2, #3
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43db      	mvns	r3, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4013      	ands	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f003 0203 	and.w	r2, r3, #3
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 80e0 	beq.w	80047bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045fc:	4b2f      	ldr	r3, [pc, #188]	@ (80046bc <HAL_GPIO_Init+0x238>)
 80045fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004602:	4a2e      	ldr	r2, [pc, #184]	@ (80046bc <HAL_GPIO_Init+0x238>)
 8004604:	f043 0302 	orr.w	r3, r3, #2
 8004608:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800460c:	4b2b      	ldr	r3, [pc, #172]	@ (80046bc <HAL_GPIO_Init+0x238>)
 800460e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800461a:	4a29      	ldr	r2, [pc, #164]	@ (80046c0 <HAL_GPIO_Init+0x23c>)
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	089b      	lsrs	r3, r3, #2
 8004620:	3302      	adds	r3, #2
 8004622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	220f      	movs	r2, #15
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4013      	ands	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a20      	ldr	r2, [pc, #128]	@ (80046c4 <HAL_GPIO_Init+0x240>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d052      	beq.n	80046ec <HAL_GPIO_Init+0x268>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1f      	ldr	r2, [pc, #124]	@ (80046c8 <HAL_GPIO_Init+0x244>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d031      	beq.n	80046b2 <HAL_GPIO_Init+0x22e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1e      	ldr	r2, [pc, #120]	@ (80046cc <HAL_GPIO_Init+0x248>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d02b      	beq.n	80046ae <HAL_GPIO_Init+0x22a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a1d      	ldr	r2, [pc, #116]	@ (80046d0 <HAL_GPIO_Init+0x24c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d025      	beq.n	80046aa <HAL_GPIO_Init+0x226>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a1c      	ldr	r2, [pc, #112]	@ (80046d4 <HAL_GPIO_Init+0x250>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d01f      	beq.n	80046a6 <HAL_GPIO_Init+0x222>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a1b      	ldr	r2, [pc, #108]	@ (80046d8 <HAL_GPIO_Init+0x254>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d019      	beq.n	80046a2 <HAL_GPIO_Init+0x21e>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a1a      	ldr	r2, [pc, #104]	@ (80046dc <HAL_GPIO_Init+0x258>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d013      	beq.n	800469e <HAL_GPIO_Init+0x21a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a19      	ldr	r2, [pc, #100]	@ (80046e0 <HAL_GPIO_Init+0x25c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00d      	beq.n	800469a <HAL_GPIO_Init+0x216>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a18      	ldr	r2, [pc, #96]	@ (80046e4 <HAL_GPIO_Init+0x260>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d007      	beq.n	8004696 <HAL_GPIO_Init+0x212>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a17      	ldr	r2, [pc, #92]	@ (80046e8 <HAL_GPIO_Init+0x264>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d101      	bne.n	8004692 <HAL_GPIO_Init+0x20e>
 800468e:	2309      	movs	r3, #9
 8004690:	e02d      	b.n	80046ee <HAL_GPIO_Init+0x26a>
 8004692:	230a      	movs	r3, #10
 8004694:	e02b      	b.n	80046ee <HAL_GPIO_Init+0x26a>
 8004696:	2308      	movs	r3, #8
 8004698:	e029      	b.n	80046ee <HAL_GPIO_Init+0x26a>
 800469a:	2307      	movs	r3, #7
 800469c:	e027      	b.n	80046ee <HAL_GPIO_Init+0x26a>
 800469e:	2306      	movs	r3, #6
 80046a0:	e025      	b.n	80046ee <HAL_GPIO_Init+0x26a>
 80046a2:	2305      	movs	r3, #5
 80046a4:	e023      	b.n	80046ee <HAL_GPIO_Init+0x26a>
 80046a6:	2304      	movs	r3, #4
 80046a8:	e021      	b.n	80046ee <HAL_GPIO_Init+0x26a>
 80046aa:	2303      	movs	r3, #3
 80046ac:	e01f      	b.n	80046ee <HAL_GPIO_Init+0x26a>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e01d      	b.n	80046ee <HAL_GPIO_Init+0x26a>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e01b      	b.n	80046ee <HAL_GPIO_Init+0x26a>
 80046b6:	bf00      	nop
 80046b8:	58000080 	.word	0x58000080
 80046bc:	58024400 	.word	0x58024400
 80046c0:	58000400 	.word	0x58000400
 80046c4:	58020000 	.word	0x58020000
 80046c8:	58020400 	.word	0x58020400
 80046cc:	58020800 	.word	0x58020800
 80046d0:	58020c00 	.word	0x58020c00
 80046d4:	58021000 	.word	0x58021000
 80046d8:	58021400 	.word	0x58021400
 80046dc:	58021800 	.word	0x58021800
 80046e0:	58021c00 	.word	0x58021c00
 80046e4:	58022000 	.word	0x58022000
 80046e8:	58022400 	.word	0x58022400
 80046ec:	2300      	movs	r3, #0
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	f002 0203 	and.w	r2, r2, #3
 80046f4:	0092      	lsls	r2, r2, #2
 80046f6:	4093      	lsls	r3, r2
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046fe:	4938      	ldr	r1, [pc, #224]	@ (80047e0 <HAL_GPIO_Init+0x35c>)
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	089b      	lsrs	r3, r3, #2
 8004704:	3302      	adds	r3, #2
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800470c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004732:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800473a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	43db      	mvns	r3, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4013      	ands	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004760:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	43db      	mvns	r3, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4013      	ands	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	43db      	mvns	r3, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	3301      	adds	r3, #1
 80047c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f47f ae63 	bne.w	8004498 <HAL_GPIO_Init+0x14>
  }
}
 80047d2:	bf00      	nop
 80047d4:	bf00      	nop
 80047d6:	3724      	adds	r7, #36	@ 0x24
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	58000400 	.word	0x58000400

080047e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	807b      	strh	r3, [r7, #2]
 80047f0:	4613      	mov	r3, r2
 80047f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047f4:	787b      	ldrb	r3, [r7, #1]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047fa:	887a      	ldrh	r2, [r7, #2]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004800:	e003      	b.n	800480a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004802:	887b      	ldrh	r3, [r7, #2]
 8004804:	041a      	lsls	r2, r3, #16
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	619a      	str	r2, [r3, #24]
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e08b      	b.n	8004942 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fc fdd6 	bl	80013f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2224      	movs	r2, #36	@ 0x24
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004868:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004878:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d107      	bne.n	8004892 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800488e:	609a      	str	r2, [r3, #8]
 8004890:	e006      	b.n	80048a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800489e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d108      	bne.n	80048ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048b6:	605a      	str	r2, [r3, #4]
 80048b8:	e007      	b.n	80048ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6859      	ldr	r1, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	4b1d      	ldr	r3, [pc, #116]	@ (800494c <HAL_I2C_Init+0x134>)
 80048d6:	430b      	orrs	r3, r1
 80048d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691a      	ldr	r2, [r3, #16]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69d9      	ldr	r1, [r3, #28]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a1a      	ldr	r2, [r3, #32]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2220      	movs	r2, #32
 800492e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	02008000 	.word	0x02008000

08004950 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af02      	add	r7, sp, #8
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	607a      	str	r2, [r7, #4]
 800495a:	461a      	mov	r2, r3
 800495c:	460b      	mov	r3, r1
 800495e:	817b      	strh	r3, [r7, #10]
 8004960:	4613      	mov	r3, r2
 8004962:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b20      	cmp	r3, #32
 800496e:	f040 80fd 	bne.w	8004b6c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_I2C_Master_Transmit+0x30>
 800497c:	2302      	movs	r3, #2
 800497e:	e0f6      	b.n	8004b6e <HAL_I2C_Master_Transmit+0x21e>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004988:	f7fd f878 	bl	8001a7c <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	2319      	movs	r3, #25
 8004994:	2201      	movs	r2, #1
 8004996:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f001 f875 	bl	8005a8a <I2C_WaitOnFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e0e1      	b.n	8004b6e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2221      	movs	r2, #33	@ 0x21
 80049ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2210      	movs	r2, #16
 80049b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	893a      	ldrh	r2, [r7, #8]
 80049ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2bff      	cmp	r3, #255	@ 0xff
 80049da:	d906      	bls.n	80049ea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	22ff      	movs	r2, #255	@ 0xff
 80049e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80049e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	e007      	b.n	80049fa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80049f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049f8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d024      	beq.n	8004a4c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	781a      	ldrb	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	3301      	adds	r3, #1
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	8979      	ldrh	r1, [r7, #10]
 8004a3e:	4b4e      	ldr	r3, [pc, #312]	@ (8004b78 <HAL_I2C_Master_Transmit+0x228>)
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f001 fa6f 	bl	8005f28 <I2C_TransferConfig>
 8004a4a:	e066      	b.n	8004b1a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	8979      	ldrh	r1, [r7, #10]
 8004a54:	4b48      	ldr	r3, [pc, #288]	@ (8004b78 <HAL_I2C_Master_Transmit+0x228>)
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f001 fa64 	bl	8005f28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004a60:	e05b      	b.n	8004b1a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	6a39      	ldr	r1, [r7, #32]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f001 f868 	bl	8005b3c <I2C_WaitOnTXISFlagUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e07b      	b.n	8004b6e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7a:	781a      	ldrb	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d034      	beq.n	8004b1a <HAL_I2C_Master_Transmit+0x1ca>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d130      	bne.n	8004b1a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2180      	movs	r1, #128	@ 0x80
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 ffe1 	bl	8005a8a <I2C_WaitOnFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e04d      	b.n	8004b6e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2bff      	cmp	r3, #255	@ 0xff
 8004ada:	d90e      	bls.n	8004afa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	22ff      	movs	r2, #255	@ 0xff
 8004ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	8979      	ldrh	r1, [r7, #10]
 8004aea:	2300      	movs	r3, #0
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f001 fa18 	bl	8005f28 <I2C_TransferConfig>
 8004af8:	e00f      	b.n	8004b1a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	8979      	ldrh	r1, [r7, #10]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f001 fa07 	bl	8005f28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d19e      	bne.n	8004a62 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	6a39      	ldr	r1, [r7, #32]
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f001 f84e 	bl	8005bca <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e01a      	b.n	8004b6e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6859      	ldr	r1, [r3, #4]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b7c <HAL_I2C_Master_Transmit+0x22c>)
 8004b4c:	400b      	ands	r3, r1
 8004b4e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e000      	b.n	8004b6e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004b6c:	2302      	movs	r3, #2
  }
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	80002000 	.word	0x80002000
 8004b7c:	fe00e800 	.word	0xfe00e800

08004b80 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	817b      	strh	r3, [r7, #10]
 8004b90:	4613      	mov	r3, r2
 8004b92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	f040 80db 	bne.w	8004d58 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_I2C_Master_Receive+0x30>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e0d4      	b.n	8004d5a <HAL_I2C_Master_Receive+0x1da>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bb8:	f7fc ff60 	bl	8001a7c <HAL_GetTick>
 8004bbc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	2319      	movs	r3, #25
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 ff5d 	bl	8005a8a <I2C_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e0bf      	b.n	8004d5a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2222      	movs	r2, #34	@ 0x22
 8004bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2210      	movs	r2, #16
 8004be6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	893a      	ldrh	r2, [r7, #8]
 8004bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2bff      	cmp	r3, #255	@ 0xff
 8004c0a:	d90e      	bls.n	8004c2a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	22ff      	movs	r2, #255	@ 0xff
 8004c10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	8979      	ldrh	r1, [r7, #10]
 8004c1a:	4b52      	ldr	r3, [pc, #328]	@ (8004d64 <HAL_I2C_Master_Receive+0x1e4>)
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f001 f980 	bl	8005f28 <I2C_TransferConfig>
 8004c28:	e06d      	b.n	8004d06 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	8979      	ldrh	r1, [r7, #10]
 8004c3c:	4b49      	ldr	r3, [pc, #292]	@ (8004d64 <HAL_I2C_Master_Receive+0x1e4>)
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f001 f96f 	bl	8005f28 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004c4a:	e05c      	b.n	8004d06 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	6a39      	ldr	r1, [r7, #32]
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 fffd 	bl	8005c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e07c      	b.n	8004d5a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d034      	beq.n	8004d06 <HAL_I2C_Master_Receive+0x186>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d130      	bne.n	8004d06 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	2200      	movs	r2, #0
 8004cac:	2180      	movs	r1, #128	@ 0x80
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 feeb 	bl	8005a8a <I2C_WaitOnFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e04d      	b.n	8004d5a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2bff      	cmp	r3, #255	@ 0xff
 8004cc6:	d90e      	bls.n	8004ce6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	22ff      	movs	r2, #255	@ 0xff
 8004ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	8979      	ldrh	r1, [r7, #10]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f001 f922 	bl	8005f28 <I2C_TransferConfig>
 8004ce4:	e00f      	b.n	8004d06 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	8979      	ldrh	r1, [r7, #10]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f001 f911 	bl	8005f28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d19d      	bne.n	8004c4c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	6a39      	ldr	r1, [r7, #32]
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 ff58 	bl	8005bca <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e01a      	b.n	8004d5a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6859      	ldr	r1, [r3, #4]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	4b0c      	ldr	r3, [pc, #48]	@ (8004d68 <HAL_I2C_Master_Receive+0x1e8>)
 8004d38:	400b      	ands	r3, r1
 8004d3a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	e000      	b.n	8004d5a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004d58:	2302      	movs	r3, #2
  }
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	80002400 	.word	0x80002400
 8004d68:	fe00e800 	.word	0xfe00e800

08004d6c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	68f9      	ldr	r1, [r7, #12]
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	4798      	blx	r3
  }
}
 8004d98:	bf00      	nop
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00f      	beq.n	8004de2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd0:	f043 0201 	orr.w	r2, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004de0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00f      	beq.n	8004e0c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dfa:	f043 0208 	orr.w	r2, r3, #8
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e0a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00f      	beq.n	8004e36 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e24:	f043 0202 	orr.w	r2, r3, #2
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e34:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 030b 	and.w	r3, r3, #11
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004e46:	68f9      	ldr	r1, [r7, #12]
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fcc5 	bl	80057d8 <I2C_ITError>
  }
}
 8004e4e:	bf00      	nop
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	460b      	mov	r3, r1
 8004e88:	70fb      	strb	r3, [r7, #3]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b086      	sub	sp, #24
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <I2C_Slave_ISR_IT+0x24>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e0e2      	b.n	80050c0 <I2C_Slave_ISR_IT+0x1ea>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f003 0320 	and.w	r3, r3, #32
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d009      	beq.n	8004f20 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d004      	beq.n	8004f20 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004f16:	6939      	ldr	r1, [r7, #16]
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f9b5 	bl	8005288 <I2C_ITSlaveCplt>
 8004f1e:	e0ca      	b.n	80050b6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f003 0310 	and.w	r3, r3, #16
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d04b      	beq.n	8004fc2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d046      	beq.n	8004fc2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d128      	bne.n	8004f90 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b28      	cmp	r3, #40	@ 0x28
 8004f48:	d108      	bne.n	8004f5c <I2C_Slave_ISR_IT+0x86>
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f50:	d104      	bne.n	8004f5c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004f52:	6939      	ldr	r1, [r7, #16]
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 fbeb 	bl	8005730 <I2C_ITListenCplt>
 8004f5a:	e031      	b.n	8004fc0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b29      	cmp	r3, #41	@ 0x29
 8004f66:	d10e      	bne.n	8004f86 <I2C_Slave_ISR_IT+0xb0>
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f6e:	d00a      	beq.n	8004f86 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2210      	movs	r2, #16
 8004f76:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fd44 	bl	8005a06 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 f926 	bl	80051d0 <I2C_ITSlaveSeqCplt>
 8004f84:	e01c      	b.n	8004fc0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2210      	movs	r2, #16
 8004f8c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004f8e:	e08f      	b.n	80050b0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2210      	movs	r2, #16
 8004f96:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f9c:	f043 0204 	orr.w	r2, r3, #4
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <I2C_Slave_ISR_IT+0xdc>
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fb0:	d17e      	bne.n	80050b0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 fc0d 	bl	80057d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004fbe:	e077      	b.n	80050b0 <I2C_Slave_ISR_IT+0x1da>
 8004fc0:	e076      	b.n	80050b0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d02f      	beq.n	800502c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d02a      	beq.n	800502c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d018      	beq.n	8005012 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d14b      	bne.n	80050b4 <I2C_Slave_ISR_IT+0x1de>
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005022:	d047      	beq.n	80050b4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 f8d3 	bl	80051d0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800502a:	e043      	b.n	80050b4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800503c:	2b00      	cmp	r3, #0
 800503e:	d004      	beq.n	800504a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005040:	6939      	ldr	r1, [r7, #16]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f840 	bl	80050c8 <I2C_ITAddrCplt>
 8005048:	e035      	b.n	80050b6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d030      	beq.n	80050b6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800505a:	2b00      	cmp	r3, #0
 800505c:	d02b      	beq.n	80050b6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d018      	beq.n	800509a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506c:	781a      	ldrb	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005098:	e00d      	b.n	80050b6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050a0:	d002      	beq.n	80050a8 <I2C_Slave_ISR_IT+0x1d2>
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f891 	bl	80051d0 <I2C_ITSlaveSeqCplt>
 80050ae:	e002      	b.n	80050b6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80050b0:	bf00      	nop
 80050b2:	e000      	b.n	80050b6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80050b4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050de:	2b28      	cmp	r3, #40	@ 0x28
 80050e0:	d16a      	bne.n	80051b8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	0c1b      	lsrs	r3, r3, #16
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	0c1b      	lsrs	r3, r3, #16
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005100:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	b29b      	uxth	r3, r3
 800510a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800510e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	b29b      	uxth	r3, r3
 8005118:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800511c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d138      	bne.n	8005198 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005126:	897b      	ldrh	r3, [r7, #10]
 8005128:	09db      	lsrs	r3, r3, #7
 800512a:	b29a      	uxth	r2, r3
 800512c:	89bb      	ldrh	r3, [r7, #12]
 800512e:	4053      	eors	r3, r2
 8005130:	b29b      	uxth	r3, r3
 8005132:	f003 0306 	and.w	r3, r3, #6
 8005136:	2b00      	cmp	r3, #0
 8005138:	d11c      	bne.n	8005174 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800513a:	897b      	ldrh	r3, [r7, #10]
 800513c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800514c:	2b02      	cmp	r3, #2
 800514e:	d13b      	bne.n	80051c8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2208      	movs	r2, #8
 800515c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005166:	89ba      	ldrh	r2, [r7, #12]
 8005168:	7bfb      	ldrb	r3, [r7, #15]
 800516a:	4619      	mov	r1, r3
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7ff fe86 	bl	8004e7e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005172:	e029      	b.n	80051c8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005174:	893b      	ldrh	r3, [r7, #8]
 8005176:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005178:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 ff05 	bl	8005f8c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800518a:	89ba      	ldrh	r2, [r7, #12]
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	4619      	mov	r1, r3
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff fe74 	bl	8004e7e <HAL_I2C_AddrCallback>
}
 8005196:	e017      	b.n	80051c8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005198:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fef5 	bl	8005f8c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80051aa:	89ba      	ldrh	r2, [r7, #12]
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	4619      	mov	r1, r3
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff fe64 	bl	8004e7e <HAL_I2C_AddrCallback>
}
 80051b6:	e007      	b.n	80051c8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2208      	movs	r2, #8
 80051be:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80051c8:	bf00      	nop
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d008      	beq.n	8005204 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	e00c      	b.n	800521e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800521c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b29      	cmp	r3, #41	@ 0x29
 8005228:	d112      	bne.n	8005250 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2228      	movs	r2, #40	@ 0x28
 800522e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2221      	movs	r2, #33	@ 0x21
 8005236:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005238:	2101      	movs	r1, #1
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fea6 	bl	8005f8c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff fe04 	bl	8004e56 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800524e:	e017      	b.n	8005280 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b2a      	cmp	r3, #42	@ 0x2a
 800525a:	d111      	bne.n	8005280 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2228      	movs	r2, #40	@ 0x28
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2222      	movs	r2, #34	@ 0x22
 8005268:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800526a:	2102      	movs	r1, #2
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fe8d 	bl	8005f8c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7ff fdf5 	bl	8004e6a <HAL_I2C_SlaveRxCpltCallback>
}
 8005280:	bf00      	nop
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052aa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2220      	movs	r2, #32
 80052b2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80052b4:	7afb      	ldrb	r3, [r7, #11]
 80052b6:	2b21      	cmp	r3, #33	@ 0x21
 80052b8:	d002      	beq.n	80052c0 <I2C_ITSlaveCplt+0x38>
 80052ba:	7afb      	ldrb	r3, [r7, #11]
 80052bc:	2b29      	cmp	r3, #41	@ 0x29
 80052be:	d108      	bne.n	80052d2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80052c0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fe61 	bl	8005f8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2221      	movs	r2, #33	@ 0x21
 80052ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80052d0:	e019      	b.n	8005306 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80052d2:	7afb      	ldrb	r3, [r7, #11]
 80052d4:	2b22      	cmp	r3, #34	@ 0x22
 80052d6:	d002      	beq.n	80052de <I2C_ITSlaveCplt+0x56>
 80052d8:	7afb      	ldrb	r3, [r7, #11]
 80052da:	2b2a      	cmp	r3, #42	@ 0x2a
 80052dc:	d108      	bne.n	80052f0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80052de:	f248 0102 	movw	r1, #32770	@ 0x8002
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fe52 	bl	8005f8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2222      	movs	r2, #34	@ 0x22
 80052ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80052ee:	e00a      	b.n	8005306 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80052f0:	7afb      	ldrb	r3, [r7, #11]
 80052f2:	2b28      	cmp	r3, #40	@ 0x28
 80052f4:	d107      	bne.n	8005306 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80052f6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fe46 	bl	8005f8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005314:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6859      	ldr	r1, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	4b7f      	ldr	r3, [pc, #508]	@ (8005520 <I2C_ITSlaveCplt+0x298>)
 8005322:	400b      	ands	r3, r1
 8005324:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fb6d 	bl	8005a06 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d07a      	beq.n	800542c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005344:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 8111 	beq.w	8005572 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a73      	ldr	r2, [pc, #460]	@ (8005524 <I2C_ITSlaveCplt+0x29c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d059      	beq.n	8005410 <I2C_ITSlaveCplt+0x188>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a71      	ldr	r2, [pc, #452]	@ (8005528 <I2C_ITSlaveCplt+0x2a0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d053      	beq.n	8005410 <I2C_ITSlaveCplt+0x188>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a6f      	ldr	r2, [pc, #444]	@ (800552c <I2C_ITSlaveCplt+0x2a4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d04d      	beq.n	8005410 <I2C_ITSlaveCplt+0x188>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a6d      	ldr	r2, [pc, #436]	@ (8005530 <I2C_ITSlaveCplt+0x2a8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d047      	beq.n	8005410 <I2C_ITSlaveCplt+0x188>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a6b      	ldr	r2, [pc, #428]	@ (8005534 <I2C_ITSlaveCplt+0x2ac>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d041      	beq.n	8005410 <I2C_ITSlaveCplt+0x188>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a69      	ldr	r2, [pc, #420]	@ (8005538 <I2C_ITSlaveCplt+0x2b0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d03b      	beq.n	8005410 <I2C_ITSlaveCplt+0x188>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a67      	ldr	r2, [pc, #412]	@ (800553c <I2C_ITSlaveCplt+0x2b4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d035      	beq.n	8005410 <I2C_ITSlaveCplt+0x188>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a65      	ldr	r2, [pc, #404]	@ (8005540 <I2C_ITSlaveCplt+0x2b8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d02f      	beq.n	8005410 <I2C_ITSlaveCplt+0x188>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a63      	ldr	r2, [pc, #396]	@ (8005544 <I2C_ITSlaveCplt+0x2bc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d029      	beq.n	8005410 <I2C_ITSlaveCplt+0x188>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a61      	ldr	r2, [pc, #388]	@ (8005548 <I2C_ITSlaveCplt+0x2c0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d023      	beq.n	8005410 <I2C_ITSlaveCplt+0x188>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a5f      	ldr	r2, [pc, #380]	@ (800554c <I2C_ITSlaveCplt+0x2c4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d01d      	beq.n	8005410 <I2C_ITSlaveCplt+0x188>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a5d      	ldr	r2, [pc, #372]	@ (8005550 <I2C_ITSlaveCplt+0x2c8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d017      	beq.n	8005410 <I2C_ITSlaveCplt+0x188>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a5b      	ldr	r2, [pc, #364]	@ (8005554 <I2C_ITSlaveCplt+0x2cc>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d011      	beq.n	8005410 <I2C_ITSlaveCplt+0x188>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a59      	ldr	r2, [pc, #356]	@ (8005558 <I2C_ITSlaveCplt+0x2d0>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00b      	beq.n	8005410 <I2C_ITSlaveCplt+0x188>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a57      	ldr	r2, [pc, #348]	@ (800555c <I2C_ITSlaveCplt+0x2d4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d005      	beq.n	8005410 <I2C_ITSlaveCplt+0x188>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a55      	ldr	r2, [pc, #340]	@ (8005560 <I2C_ITSlaveCplt+0x2d8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d105      	bne.n	800541c <I2C_ITSlaveCplt+0x194>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	b29b      	uxth	r3, r3
 800541a:	e004      	b.n	8005426 <I2C_ITSlaveCplt+0x19e>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	b29b      	uxth	r3, r3
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800542a:	e0a2      	b.n	8005572 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 809d 	beq.w	8005572 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005446:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 8090 	beq.w	8005572 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a32      	ldr	r2, [pc, #200]	@ (8005524 <I2C_ITSlaveCplt+0x29c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d059      	beq.n	8005512 <I2C_ITSlaveCplt+0x28a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a30      	ldr	r2, [pc, #192]	@ (8005528 <I2C_ITSlaveCplt+0x2a0>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d053      	beq.n	8005512 <I2C_ITSlaveCplt+0x28a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a2e      	ldr	r2, [pc, #184]	@ (800552c <I2C_ITSlaveCplt+0x2a4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d04d      	beq.n	8005512 <I2C_ITSlaveCplt+0x28a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a2c      	ldr	r2, [pc, #176]	@ (8005530 <I2C_ITSlaveCplt+0x2a8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d047      	beq.n	8005512 <I2C_ITSlaveCplt+0x28a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a2a      	ldr	r2, [pc, #168]	@ (8005534 <I2C_ITSlaveCplt+0x2ac>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d041      	beq.n	8005512 <I2C_ITSlaveCplt+0x28a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a28      	ldr	r2, [pc, #160]	@ (8005538 <I2C_ITSlaveCplt+0x2b0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d03b      	beq.n	8005512 <I2C_ITSlaveCplt+0x28a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a26      	ldr	r2, [pc, #152]	@ (800553c <I2C_ITSlaveCplt+0x2b4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d035      	beq.n	8005512 <I2C_ITSlaveCplt+0x28a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a24      	ldr	r2, [pc, #144]	@ (8005540 <I2C_ITSlaveCplt+0x2b8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d02f      	beq.n	8005512 <I2C_ITSlaveCplt+0x28a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a22      	ldr	r2, [pc, #136]	@ (8005544 <I2C_ITSlaveCplt+0x2bc>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d029      	beq.n	8005512 <I2C_ITSlaveCplt+0x28a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a20      	ldr	r2, [pc, #128]	@ (8005548 <I2C_ITSlaveCplt+0x2c0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d023      	beq.n	8005512 <I2C_ITSlaveCplt+0x28a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1e      	ldr	r2, [pc, #120]	@ (800554c <I2C_ITSlaveCplt+0x2c4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d01d      	beq.n	8005512 <I2C_ITSlaveCplt+0x28a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1c      	ldr	r2, [pc, #112]	@ (8005550 <I2C_ITSlaveCplt+0x2c8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d017      	beq.n	8005512 <I2C_ITSlaveCplt+0x28a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005554 <I2C_ITSlaveCplt+0x2cc>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d011      	beq.n	8005512 <I2C_ITSlaveCplt+0x28a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a18      	ldr	r2, [pc, #96]	@ (8005558 <I2C_ITSlaveCplt+0x2d0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00b      	beq.n	8005512 <I2C_ITSlaveCplt+0x28a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a16      	ldr	r2, [pc, #88]	@ (800555c <I2C_ITSlaveCplt+0x2d4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d005      	beq.n	8005512 <I2C_ITSlaveCplt+0x28a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a14      	ldr	r2, [pc, #80]	@ (8005560 <I2C_ITSlaveCplt+0x2d8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d128      	bne.n	8005564 <I2C_ITSlaveCplt+0x2dc>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	b29b      	uxth	r3, r3
 800551c:	e027      	b.n	800556e <I2C_ITSlaveCplt+0x2e6>
 800551e:	bf00      	nop
 8005520:	fe00e800 	.word	0xfe00e800
 8005524:	40020010 	.word	0x40020010
 8005528:	40020028 	.word	0x40020028
 800552c:	40020040 	.word	0x40020040
 8005530:	40020058 	.word	0x40020058
 8005534:	40020070 	.word	0x40020070
 8005538:	40020088 	.word	0x40020088
 800553c:	400200a0 	.word	0x400200a0
 8005540:	400200b8 	.word	0x400200b8
 8005544:	40020410 	.word	0x40020410
 8005548:	40020428 	.word	0x40020428
 800554c:	40020440 	.word	0x40020440
 8005550:	40020458 	.word	0x40020458
 8005554:	40020470 	.word	0x40020470
 8005558:	40020488 	.word	0x40020488
 800555c:	400204a0 	.word	0x400204a0
 8005560:	400204b8 	.word	0x400204b8
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	b29b      	uxth	r3, r3
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d020      	beq.n	80055be <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f023 0304 	bic.w	r3, r3, #4
 8005582:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00c      	beq.n	80055be <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055cc:	f043 0204 	orr.w	r2, r3, #4
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f003 0310 	and.w	r3, r3, #16
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d049      	beq.n	8005672 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d044      	beq.n	8005672 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d128      	bne.n	8005644 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b28      	cmp	r3, #40	@ 0x28
 80055fc:	d108      	bne.n	8005610 <I2C_ITSlaveCplt+0x388>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005604:	d104      	bne.n	8005610 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005606:	6979      	ldr	r1, [r7, #20]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f891 	bl	8005730 <I2C_ITListenCplt>
 800560e:	e030      	b.n	8005672 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b29      	cmp	r3, #41	@ 0x29
 800561a:	d10e      	bne.n	800563a <I2C_ITSlaveCplt+0x3b2>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005622:	d00a      	beq.n	800563a <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2210      	movs	r2, #16
 800562a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f9ea 	bl	8005a06 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7ff fdcc 	bl	80051d0 <I2C_ITSlaveSeqCplt>
 8005638:	e01b      	b.n	8005672 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2210      	movs	r2, #16
 8005640:	61da      	str	r2, [r3, #28]
 8005642:	e016      	b.n	8005672 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2210      	movs	r2, #16
 800564a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005650:	f043 0204 	orr.w	r2, r3, #4
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <I2C_ITSlaveCplt+0x3de>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005664:	d105      	bne.n	8005672 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f8b3 	bl	80057d8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005684:	2b00      	cmp	r3, #0
 8005686:	d010      	beq.n	80056aa <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568c:	4619      	mov	r1, r3
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f8a2 	bl	80057d8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b28      	cmp	r3, #40	@ 0x28
 800569e:	d141      	bne.n	8005724 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80056a0:	6979      	ldr	r1, [r7, #20]
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f844 	bl	8005730 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056a8:	e03c      	b.n	8005724 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056b2:	d014      	beq.n	80056de <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff fd8b 	bl	80051d0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a1b      	ldr	r2, [pc, #108]	@ (800572c <I2C_ITSlaveCplt+0x4a4>)
 80056be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7ff fbdf 	bl	8004e9a <HAL_I2C_ListenCpltCallback>
}
 80056dc:	e022      	b.n	8005724 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b22      	cmp	r3, #34	@ 0x22
 80056e8:	d10e      	bne.n	8005708 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff fbb2 	bl	8004e6a <HAL_I2C_SlaveRxCpltCallback>
}
 8005706:	e00d      	b.n	8005724 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7ff fb99 	bl	8004e56 <HAL_I2C_SlaveTxCpltCallback>
}
 8005724:	bf00      	nop
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	ffff0000 	.word	0xffff0000

08005730 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a25      	ldr	r2, [pc, #148]	@ (80057d4 <I2C_ITListenCplt+0xa4>)
 800573e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2220      	movs	r2, #32
 800574a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	f003 0304 	and.w	r3, r3, #4
 8005762:	2b00      	cmp	r3, #0
 8005764:	d022      	beq.n	80057ac <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005782:	2b00      	cmp	r3, #0
 8005784:	d012      	beq.n	80057ac <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a4:	f043 0204 	orr.w	r2, r3, #4
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80057ac:	f248 0103 	movw	r1, #32771	@ 0x8003
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fbeb 	bl	8005f8c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2210      	movs	r2, #16
 80057bc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff fb67 	bl	8004e9a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80057cc:	bf00      	nop
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	ffff0000 	.word	0xffff0000

080057d8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057e8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a6d      	ldr	r2, [pc, #436]	@ (80059ac <I2C_ITError+0x1d4>)
 80057f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	431a      	orrs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	2b28      	cmp	r3, #40	@ 0x28
 800580e:	d005      	beq.n	800581c <I2C_ITError+0x44>
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	2b29      	cmp	r3, #41	@ 0x29
 8005814:	d002      	beq.n	800581c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005816:	7bfb      	ldrb	r3, [r7, #15]
 8005818:	2b2a      	cmp	r3, #42	@ 0x2a
 800581a:	d10b      	bne.n	8005834 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800581c:	2103      	movs	r1, #3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fbb4 	bl	8005f8c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2228      	movs	r2, #40	@ 0x28
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a60      	ldr	r2, [pc, #384]	@ (80059b0 <I2C_ITError+0x1d8>)
 8005830:	635a      	str	r2, [r3, #52]	@ 0x34
 8005832:	e030      	b.n	8005896 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005834:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fba7 	bl	8005f8c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f8e1 	bl	8005a06 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b60      	cmp	r3, #96	@ 0x60
 800584e:	d01f      	beq.n	8005890 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b20      	cmp	r3, #32
 8005864:	d114      	bne.n	8005890 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b10      	cmp	r3, #16
 8005872:	d109      	bne.n	8005888 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2210      	movs	r2, #16
 800587a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005880:	f043 0204 	orr.w	r2, r3, #4
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2220      	movs	r2, #32
 800588e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d039      	beq.n	8005918 <I2C_ITError+0x140>
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b11      	cmp	r3, #17
 80058a8:	d002      	beq.n	80058b0 <I2C_ITError+0xd8>
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b21      	cmp	r3, #33	@ 0x21
 80058ae:	d133      	bne.n	8005918 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058be:	d107      	bne.n	80058d0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80058ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fe f993 	bl	8003c00 <HAL_DMA_GetState>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d017      	beq.n	8005910 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e4:	4a33      	ldr	r2, [pc, #204]	@ (80059b4 <I2C_ITError+0x1dc>)
 80058e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7fd ff3d 	bl	8003774 <HAL_DMA_Abort_IT>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d04d      	beq.n	800599c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800590a:	4610      	mov	r0, r2
 800590c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800590e:	e045      	b.n	800599c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f851 	bl	80059b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005916:	e041      	b.n	800599c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d039      	beq.n	8005994 <I2C_ITError+0x1bc>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b12      	cmp	r3, #18
 8005924:	d002      	beq.n	800592c <I2C_ITError+0x154>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b22      	cmp	r3, #34	@ 0x22
 800592a:	d133      	bne.n	8005994 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800593a:	d107      	bne.n	800594c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800594a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005950:	4618      	mov	r0, r3
 8005952:	f7fe f955 	bl	8003c00 <HAL_DMA_GetState>
 8005956:	4603      	mov	r3, r0
 8005958:	2b01      	cmp	r3, #1
 800595a:	d017      	beq.n	800598c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005960:	4a14      	ldr	r2, [pc, #80]	@ (80059b4 <I2C_ITError+0x1dc>)
 8005962:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005970:	4618      	mov	r0, r3
 8005972:	f7fd feff 	bl	8003774 <HAL_DMA_Abort_IT>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d011      	beq.n	80059a0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005986:	4610      	mov	r0, r2
 8005988:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800598a:	e009      	b.n	80059a0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f813 	bl	80059b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005992:	e005      	b.n	80059a0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f80f 	bl	80059b8 <I2C_TreatErrorCallback>
  }
}
 800599a:	e002      	b.n	80059a2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800599c:	bf00      	nop
 800599e:	e000      	b.n	80059a2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059a0:	bf00      	nop
}
 80059a2:	bf00      	nop
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	ffff0000 	.word	0xffff0000
 80059b0:	08004ed7 	.word	0x08004ed7
 80059b4:	08005a4f 	.word	0x08005a4f

080059b8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b60      	cmp	r3, #96	@ 0x60
 80059ca:	d10e      	bne.n	80059ea <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff fa6d 	bl	8004ec2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80059e8:	e009      	b.n	80059fe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff fa58 	bl	8004eae <HAL_I2C_ErrorCallback>
}
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d103      	bne.n	8005a24 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2200      	movs	r2, #0
 8005a22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d007      	beq.n	8005a42 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	699a      	ldr	r2, [r3, #24]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0201 	orr.w	r2, r2, #1
 8005a40:	619a      	str	r2, [r3, #24]
  }
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a68:	2200      	movs	r2, #0
 8005a6a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a78:	2200      	movs	r2, #0
 8005a7a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f7ff ff9b 	bl	80059b8 <I2C_TreatErrorCallback>
}
 8005a82:	bf00      	nop
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	603b      	str	r3, [r7, #0]
 8005a96:	4613      	mov	r3, r2
 8005a98:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a9a:	e03b      	b.n	8005b14 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	6839      	ldr	r1, [r7, #0]
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f961 	bl	8005d68 <I2C_IsErrorOccurred>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e041      	b.n	8005b34 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab6:	d02d      	beq.n	8005b14 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab8:	f7fb ffe0 	bl	8001a7c <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d302      	bcc.n	8005ace <I2C_WaitOnFlagUntilTimeout+0x44>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d122      	bne.n	8005b14 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	699a      	ldr	r2, [r3, #24]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	bf0c      	ite	eq
 8005ade:	2301      	moveq	r3, #1
 8005ae0:	2300      	movne	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d113      	bne.n	8005b14 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af0:	f043 0220 	orr.w	r2, r3, #32
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e00f      	b.n	8005b34 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	bf0c      	ite	eq
 8005b24:	2301      	moveq	r3, #1
 8005b26:	2300      	movne	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d0b4      	beq.n	8005a9c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b48:	e033      	b.n	8005bb2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f90a 	bl	8005d68 <I2C_IsErrorOccurred>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e031      	b.n	8005bc2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b64:	d025      	beq.n	8005bb2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b66:	f7fb ff89 	bl	8001a7c <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d302      	bcc.n	8005b7c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d11a      	bne.n	8005bb2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d013      	beq.n	8005bb2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8e:	f043 0220 	orr.w	r2, r3, #32
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e007      	b.n	8005bc2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d1c4      	bne.n	8005b4a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	60f8      	str	r0, [r7, #12]
 8005bd2:	60b9      	str	r1, [r7, #8]
 8005bd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bd6:	e02f      	b.n	8005c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f8c3 	bl	8005d68 <I2C_IsErrorOccurred>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e02d      	b.n	8005c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bec:	f7fb ff46 	bl	8001a7c <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d302      	bcc.n	8005c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d11a      	bne.n	8005c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	d013      	beq.n	8005c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c14:	f043 0220 	orr.w	r2, r3, #32
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e007      	b.n	8005c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d1c8      	bne.n	8005bd8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005c60:	e071      	b.n	8005d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f87e 	bl	8005d68 <I2C_IsErrorOccurred>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	f003 0320 	and.w	r3, r3, #32
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	d13b      	bne.n	8005cfc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d138      	bne.n	8005cfc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b04      	cmp	r3, #4
 8005c96:	d105      	bne.n	8005ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	2b10      	cmp	r3, #16
 8005cb0:	d121      	bne.n	8005cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2210      	movs	r2, #16
 8005cb8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2204      	movs	r2, #4
 8005cbe:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6859      	ldr	r1, [r3, #4]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4b24      	ldr	r3, [pc, #144]	@ (8005d64 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005cd4:	400b      	ands	r3, r1
 8005cd6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	75fb      	strb	r3, [r7, #23]
 8005cf4:	e002      	b.n	8005cfc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005cfc:	f7fb febe 	bl	8001a7c <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d302      	bcc.n	8005d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d119      	bne.n	8005d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d116      	bne.n	8005d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d00f      	beq.n	8005d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d2a:	f043 0220 	orr.w	r2, r3, #32
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d002      	beq.n	8005d5a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d083      	beq.n	8005c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	fe00e800 	.word	0xfe00e800

08005d68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b08a      	sub	sp, #40	@ 0x28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d068      	beq.n	8005e66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2210      	movs	r2, #16
 8005d9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d9c:	e049      	b.n	8005e32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da4:	d045      	beq.n	8005e32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005da6:	f7fb fe69 	bl	8001a7c <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d302      	bcc.n	8005dbc <I2C_IsErrorOccurred+0x54>
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d13a      	bne.n	8005e32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005dda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dde:	d121      	bne.n	8005e24 <I2C_IsErrorOccurred+0xbc>
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005de6:	d01d      	beq.n	8005e24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005de8:	7cfb      	ldrb	r3, [r7, #19]
 8005dea:	2b20      	cmp	r3, #32
 8005dec:	d01a      	beq.n	8005e24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dfc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005dfe:	f7fb fe3d 	bl	8001a7c <HAL_GetTick>
 8005e02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e04:	e00e      	b.n	8005e24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e06:	f7fb fe39 	bl	8001a7c <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b19      	cmp	r3, #25
 8005e12:	d907      	bls.n	8005e24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	f043 0320 	orr.w	r3, r3, #32
 8005e1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005e22:	e006      	b.n	8005e32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b20      	cmp	r3, #32
 8005e30:	d1e9      	bne.n	8005e06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d003      	beq.n	8005e48 <I2C_IsErrorOccurred+0xe0>
 8005e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0aa      	beq.n	8005d9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d103      	bne.n	8005e58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2220      	movs	r2, #32
 8005e56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	f043 0304 	orr.w	r3, r3, #4
 8005e5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00b      	beq.n	8005e90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	f043 0301 	orr.w	r3, r3, #1
 8005e7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	f043 0308 	orr.w	r3, r3, #8
 8005ea0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005eaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00b      	beq.n	8005ed4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	f043 0302 	orr.w	r3, r3, #2
 8005ec2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ecc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01c      	beq.n	8005f16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f7ff fd92 	bl	8005a06 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6859      	ldr	r1, [r3, #4]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	4b0d      	ldr	r3, [pc, #52]	@ (8005f24 <I2C_IsErrorOccurred+0x1bc>)
 8005eee:	400b      	ands	r3, r1
 8005ef0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005f16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3728      	adds	r7, #40	@ 0x28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	fe00e800 	.word	0xfe00e800

08005f28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	607b      	str	r3, [r7, #4]
 8005f32:	460b      	mov	r3, r1
 8005f34:	817b      	strh	r3, [r7, #10]
 8005f36:	4613      	mov	r3, r2
 8005f38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f3a:	897b      	ldrh	r3, [r7, #10]
 8005f3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f40:	7a7b      	ldrb	r3, [r7, #9]
 8005f42:	041b      	lsls	r3, r3, #16
 8005f44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f48:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f56:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	0d5b      	lsrs	r3, r3, #21
 8005f62:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005f66:	4b08      	ldr	r3, [pc, #32]	@ (8005f88 <I2C_TransferConfig+0x60>)
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	43db      	mvns	r3, r3
 8005f6c:	ea02 0103 	and.w	r1, r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	03ff63ff 	.word	0x03ff63ff

08005f8c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005f9c:	887b      	ldrh	r3, [r7, #2]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00f      	beq.n	8005fc6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005fac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005fba:	2b28      	cmp	r3, #40	@ 0x28
 8005fbc:	d003      	beq.n	8005fc6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005fc4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005fc6:	887b      	ldrh	r3, [r7, #2]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00f      	beq.n	8005ff0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005fd6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005fe4:	2b28      	cmp	r3, #40	@ 0x28
 8005fe6:	d003      	beq.n	8005ff0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005fee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005ff0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	da03      	bge.n	8006000 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005ffe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006000:	887b      	ldrh	r3, [r7, #2]
 8006002:	2b10      	cmp	r3, #16
 8006004:	d103      	bne.n	800600e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800600c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800600e:	887b      	ldrh	r3, [r7, #2]
 8006010:	2b20      	cmp	r3, #32
 8006012:	d103      	bne.n	800601c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f043 0320 	orr.w	r3, r3, #32
 800601a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800601c:	887b      	ldrh	r3, [r7, #2]
 800601e:	2b40      	cmp	r3, #64	@ 0x40
 8006020:	d103      	bne.n	800602a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006028:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6819      	ldr	r1, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	43da      	mvns	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	400a      	ands	r2, r1
 800603a:	601a      	str	r2, [r3, #0]
}
 800603c:	bf00      	nop
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b20      	cmp	r3, #32
 800605c:	d138      	bne.n	80060d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006068:	2302      	movs	r3, #2
 800606a:	e032      	b.n	80060d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2224      	movs	r2, #36	@ 0x24
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0201 	bic.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800609a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6819      	ldr	r1, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	e000      	b.n	80060d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060d0:	2302      	movs	r3, #2
  }
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	d139      	bne.n	8006168 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d101      	bne.n	8006102 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060fe:	2302      	movs	r3, #2
 8006100:	e033      	b.n	800616a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2224      	movs	r2, #36	@ 0x24
 800610e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0201 	bic.w	r2, r2, #1
 8006120:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006130:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	021b      	lsls	r3, r3, #8
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	e000      	b.n	800616a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006168:	2302      	movs	r3, #2
  }
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b086      	sub	sp, #24
 800617a:	af02      	add	r7, sp, #8
 800617c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e0fe      	b.n	8006386 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d106      	bne.n	80061a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7fb fa35 	bl	800160c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2203      	movs	r2, #3
 80061a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f007 f93e 	bl	800d430 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	7c1a      	ldrb	r2, [r3, #16]
 80061bc:	f88d 2000 	strb.w	r2, [sp]
 80061c0:	3304      	adds	r3, #4
 80061c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061c4:	f007 f8c2 	bl	800d34c <USB_CoreInit>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e0d5      	b.n	8006386 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2100      	movs	r1, #0
 80061e0:	4618      	mov	r0, r3
 80061e2:	f007 f936 	bl	800d452 <USB_SetCurrentMode>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e0c6      	b.n	8006386 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061f8:	2300      	movs	r3, #0
 80061fa:	73fb      	strb	r3, [r7, #15]
 80061fc:	e04a      	b.n	8006294 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80061fe:	7bfa      	ldrb	r2, [r7, #15]
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	3315      	adds	r3, #21
 800620e:	2201      	movs	r2, #1
 8006210:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006212:	7bfa      	ldrb	r2, [r7, #15]
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	4613      	mov	r3, r2
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	3314      	adds	r3, #20
 8006222:	7bfa      	ldrb	r2, [r7, #15]
 8006224:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006226:	7bfa      	ldrb	r2, [r7, #15]
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	b298      	uxth	r0, r3
 800622c:	6879      	ldr	r1, [r7, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	440b      	add	r3, r1
 8006238:	332e      	adds	r3, #46	@ 0x2e
 800623a:	4602      	mov	r2, r0
 800623c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800623e:	7bfa      	ldrb	r2, [r7, #15]
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	4613      	mov	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	3318      	adds	r3, #24
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006252:	7bfa      	ldrb	r2, [r7, #15]
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	4613      	mov	r3, r2
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	440b      	add	r3, r1
 8006260:	331c      	adds	r3, #28
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006266:	7bfa      	ldrb	r2, [r7, #15]
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	4413      	add	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	440b      	add	r3, r1
 8006274:	3320      	adds	r3, #32
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800627a:	7bfa      	ldrb	r2, [r7, #15]
 800627c:	6879      	ldr	r1, [r7, #4]
 800627e:	4613      	mov	r3, r2
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	440b      	add	r3, r1
 8006288:	3324      	adds	r3, #36	@ 0x24
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800628e:	7bfb      	ldrb	r3, [r7, #15]
 8006290:	3301      	adds	r3, #1
 8006292:	73fb      	strb	r3, [r7, #15]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	791b      	ldrb	r3, [r3, #4]
 8006298:	7bfa      	ldrb	r2, [r7, #15]
 800629a:	429a      	cmp	r2, r3
 800629c:	d3af      	bcc.n	80061fe <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]
 80062a2:	e044      	b.n	800632e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80062a4:	7bfa      	ldrb	r2, [r7, #15]
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80062b6:	2200      	movs	r2, #0
 80062b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80062ba:	7bfa      	ldrb	r2, [r7, #15]
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	4613      	mov	r3, r2
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	440b      	add	r3, r1
 80062c8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80062cc:	7bfa      	ldrb	r2, [r7, #15]
 80062ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80062d0:	7bfa      	ldrb	r2, [r7, #15]
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	4613      	mov	r3, r2
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80062e6:	7bfa      	ldrb	r2, [r7, #15]
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80062fc:	7bfa      	ldrb	r2, [r7, #15]
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	4613      	mov	r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	4413      	add	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006312:	7bfa      	ldrb	r2, [r7, #15]
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	4613      	mov	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	3301      	adds	r3, #1
 800632c:	73fb      	strb	r3, [r7, #15]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	791b      	ldrb	r3, [r3, #4]
 8006332:	7bfa      	ldrb	r2, [r7, #15]
 8006334:	429a      	cmp	r2, r3
 8006336:	d3b5      	bcc.n	80062a4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	7c1a      	ldrb	r2, [r3, #16]
 8006340:	f88d 2000 	strb.w	r2, [sp]
 8006344:	3304      	adds	r3, #4
 8006346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006348:	f007 f8d0 	bl	800d4ec <USB_DevInit>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d005      	beq.n	800635e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e013      	b.n	8006386 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	7b1b      	ldrb	r3, [r3, #12]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d102      	bne.n	800637a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f80b 	bl	8006390 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4618      	mov	r0, r3
 8006380:	f007 fa8b 	bl	800d89a <USB_DevDisconnect>

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063be:	4b05      	ldr	r3, [pc, #20]	@ (80063d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	10000003 	.word	0x10000003

080063d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80063e0:	4b19      	ldr	r3, [pc, #100]	@ (8006448 <HAL_PWREx_ConfigSupply+0x70>)
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d00a      	beq.n	8006402 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80063ec:	4b16      	ldr	r3, [pc, #88]	@ (8006448 <HAL_PWREx_ConfigSupply+0x70>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d001      	beq.n	80063fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e01f      	b.n	800643e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	e01d      	b.n	800643e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006402:	4b11      	ldr	r3, [pc, #68]	@ (8006448 <HAL_PWREx_ConfigSupply+0x70>)
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f023 0207 	bic.w	r2, r3, #7
 800640a:	490f      	ldr	r1, [pc, #60]	@ (8006448 <HAL_PWREx_ConfigSupply+0x70>)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4313      	orrs	r3, r2
 8006410:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006412:	f7fb fb33 	bl	8001a7c <HAL_GetTick>
 8006416:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006418:	e009      	b.n	800642e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800641a:	f7fb fb2f 	bl	8001a7c <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006428:	d901      	bls.n	800642e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e007      	b.n	800643e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800642e:	4b06      	ldr	r3, [pc, #24]	@ (8006448 <HAL_PWREx_ConfigSupply+0x70>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800643a:	d1ee      	bne.n	800641a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	58024800 	.word	0x58024800

0800644c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800644c:	b480      	push	{r7}
 800644e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006450:	4b05      	ldr	r3, [pc, #20]	@ (8006468 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	4a04      	ldr	r2, [pc, #16]	@ (8006468 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006456:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800645a:	60d3      	str	r3, [r2, #12]
}
 800645c:	bf00      	nop
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	58024800 	.word	0x58024800

0800646c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08c      	sub	sp, #48	@ 0x30
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f000 bc48 	b.w	8006d10 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 8088 	beq.w	800659e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800648e:	4b99      	ldr	r3, [pc, #612]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006496:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006498:	4b96      	ldr	r3, [pc, #600]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 800649a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800649e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a0:	2b10      	cmp	r3, #16
 80064a2:	d007      	beq.n	80064b4 <HAL_RCC_OscConfig+0x48>
 80064a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a6:	2b18      	cmp	r3, #24
 80064a8:	d111      	bne.n	80064ce <HAL_RCC_OscConfig+0x62>
 80064aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ac:	f003 0303 	and.w	r3, r3, #3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d10c      	bne.n	80064ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064b4:	4b8f      	ldr	r3, [pc, #572]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d06d      	beq.n	800659c <HAL_RCC_OscConfig+0x130>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d169      	bne.n	800659c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	f000 bc21 	b.w	8006d10 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d6:	d106      	bne.n	80064e6 <HAL_RCC_OscConfig+0x7a>
 80064d8:	4b86      	ldr	r3, [pc, #536]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a85      	ldr	r2, [pc, #532]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80064de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	e02e      	b.n	8006544 <HAL_RCC_OscConfig+0xd8>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10c      	bne.n	8006508 <HAL_RCC_OscConfig+0x9c>
 80064ee:	4b81      	ldr	r3, [pc, #516]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a80      	ldr	r2, [pc, #512]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80064f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	4b7e      	ldr	r3, [pc, #504]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a7d      	ldr	r2, [pc, #500]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006500:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	e01d      	b.n	8006544 <HAL_RCC_OscConfig+0xd8>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006510:	d10c      	bne.n	800652c <HAL_RCC_OscConfig+0xc0>
 8006512:	4b78      	ldr	r3, [pc, #480]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a77      	ldr	r2, [pc, #476]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	4b75      	ldr	r3, [pc, #468]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a74      	ldr	r2, [pc, #464]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	e00b      	b.n	8006544 <HAL_RCC_OscConfig+0xd8>
 800652c:	4b71      	ldr	r3, [pc, #452]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a70      	ldr	r2, [pc, #448]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	4b6e      	ldr	r3, [pc, #440]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a6d      	ldr	r2, [pc, #436]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 800653e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d013      	beq.n	8006574 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654c:	f7fb fa96 	bl	8001a7c <HAL_GetTick>
 8006550:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006552:	e008      	b.n	8006566 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006554:	f7fb fa92 	bl	8001a7c <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b64      	cmp	r3, #100	@ 0x64
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e3d4      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006566:	4b63      	ldr	r3, [pc, #396]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0f0      	beq.n	8006554 <HAL_RCC_OscConfig+0xe8>
 8006572:	e014      	b.n	800659e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006574:	f7fb fa82 	bl	8001a7c <HAL_GetTick>
 8006578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800657a:	e008      	b.n	800658e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800657c:	f7fb fa7e 	bl	8001a7c <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b64      	cmp	r3, #100	@ 0x64
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e3c0      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800658e:	4b59      	ldr	r3, [pc, #356]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1f0      	bne.n	800657c <HAL_RCC_OscConfig+0x110>
 800659a:	e000      	b.n	800659e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800659c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 80ca 	beq.w	8006740 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ac:	4b51      	ldr	r3, [pc, #324]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065b6:	4b4f      	ldr	r3, [pc, #316]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80065b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d007      	beq.n	80065d2 <HAL_RCC_OscConfig+0x166>
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	2b18      	cmp	r3, #24
 80065c6:	d156      	bne.n	8006676 <HAL_RCC_OscConfig+0x20a>
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d151      	bne.n	8006676 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065d2:	4b48      	ldr	r3, [pc, #288]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0304 	and.w	r3, r3, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <HAL_RCC_OscConfig+0x17e>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e392      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065ea:	4b42      	ldr	r3, [pc, #264]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f023 0219 	bic.w	r2, r3, #25
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	493f      	ldr	r1, [pc, #252]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fc:	f7fb fa3e 	bl	8001a7c <HAL_GetTick>
 8006600:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006602:	e008      	b.n	8006616 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006604:	f7fb fa3a 	bl	8001a7c <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e37c      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006616:	4b37      	ldr	r3, [pc, #220]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0f0      	beq.n	8006604 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006622:	f7fb fa5b 	bl	8001adc <HAL_GetREVID>
 8006626:	4603      	mov	r3, r0
 8006628:	f241 0203 	movw	r2, #4099	@ 0x1003
 800662c:	4293      	cmp	r3, r2
 800662e:	d817      	bhi.n	8006660 <HAL_RCC_OscConfig+0x1f4>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	2b40      	cmp	r3, #64	@ 0x40
 8006636:	d108      	bne.n	800664a <HAL_RCC_OscConfig+0x1de>
 8006638:	4b2e      	ldr	r3, [pc, #184]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006640:	4a2c      	ldr	r2, [pc, #176]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006646:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006648:	e07a      	b.n	8006740 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800664a:	4b2a      	ldr	r3, [pc, #168]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	031b      	lsls	r3, r3, #12
 8006658:	4926      	ldr	r1, [pc, #152]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 800665a:	4313      	orrs	r3, r2
 800665c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800665e:	e06f      	b.n	8006740 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006660:	4b24      	ldr	r3, [pc, #144]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	061b      	lsls	r3, r3, #24
 800666e:	4921      	ldr	r1, [pc, #132]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006670:	4313      	orrs	r3, r2
 8006672:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006674:	e064      	b.n	8006740 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d047      	beq.n	800670e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800667e:	4b1d      	ldr	r3, [pc, #116]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f023 0219 	bic.w	r2, r3, #25
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	491a      	ldr	r1, [pc, #104]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 800668c:	4313      	orrs	r3, r2
 800668e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006690:	f7fb f9f4 	bl	8001a7c <HAL_GetTick>
 8006694:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006698:	f7fb f9f0 	bl	8001a7c <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e332      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066aa:	4b12      	ldr	r3, [pc, #72]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0304 	and.w	r3, r3, #4
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0f0      	beq.n	8006698 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066b6:	f7fb fa11 	bl	8001adc <HAL_GetREVID>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d819      	bhi.n	80066f8 <HAL_RCC_OscConfig+0x28c>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	2b40      	cmp	r3, #64	@ 0x40
 80066ca:	d108      	bne.n	80066de <HAL_RCC_OscConfig+0x272>
 80066cc:	4b09      	ldr	r3, [pc, #36]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80066d4:	4a07      	ldr	r2, [pc, #28]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80066d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066da:	6053      	str	r3, [r2, #4]
 80066dc:	e030      	b.n	8006740 <HAL_RCC_OscConfig+0x2d4>
 80066de:	4b05      	ldr	r3, [pc, #20]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	031b      	lsls	r3, r3, #12
 80066ec:	4901      	ldr	r1, [pc, #4]	@ (80066f4 <HAL_RCC_OscConfig+0x288>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	604b      	str	r3, [r1, #4]
 80066f2:	e025      	b.n	8006740 <HAL_RCC_OscConfig+0x2d4>
 80066f4:	58024400 	.word	0x58024400
 80066f8:	4b9a      	ldr	r3, [pc, #616]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	061b      	lsls	r3, r3, #24
 8006706:	4997      	ldr	r1, [pc, #604]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006708:	4313      	orrs	r3, r2
 800670a:	604b      	str	r3, [r1, #4]
 800670c:	e018      	b.n	8006740 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800670e:	4b95      	ldr	r3, [pc, #596]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a94      	ldr	r2, [pc, #592]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671a:	f7fb f9af 	bl	8001a7c <HAL_GetTick>
 800671e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006720:	e008      	b.n	8006734 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006722:	f7fb f9ab 	bl	8001a7c <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e2ed      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006734:	4b8b      	ldr	r3, [pc, #556]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1f0      	bne.n	8006722 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 80a9 	beq.w	80068a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800674e:	4b85      	ldr	r3, [pc, #532]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006756:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006758:	4b82      	ldr	r3, [pc, #520]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 800675a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	2b08      	cmp	r3, #8
 8006762:	d007      	beq.n	8006774 <HAL_RCC_OscConfig+0x308>
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	2b18      	cmp	r3, #24
 8006768:	d13a      	bne.n	80067e0 <HAL_RCC_OscConfig+0x374>
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	2b01      	cmp	r3, #1
 8006772:	d135      	bne.n	80067e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006774:	4b7b      	ldr	r3, [pc, #492]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <HAL_RCC_OscConfig+0x320>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	2b80      	cmp	r3, #128	@ 0x80
 8006786:	d001      	beq.n	800678c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e2c1      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800678c:	f7fb f9a6 	bl	8001adc <HAL_GetREVID>
 8006790:	4603      	mov	r3, r0
 8006792:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006796:	4293      	cmp	r3, r2
 8006798:	d817      	bhi.n	80067ca <HAL_RCC_OscConfig+0x35e>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	2b20      	cmp	r3, #32
 80067a0:	d108      	bne.n	80067b4 <HAL_RCC_OscConfig+0x348>
 80067a2:	4b70      	ldr	r3, [pc, #448]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80067aa:	4a6e      	ldr	r2, [pc, #440]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80067ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067b0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067b2:	e075      	b.n	80068a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067b4:	4b6b      	ldr	r3, [pc, #428]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	069b      	lsls	r3, r3, #26
 80067c2:	4968      	ldr	r1, [pc, #416]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067c8:	e06a      	b.n	80068a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067ca:	4b66      	ldr	r3, [pc, #408]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	061b      	lsls	r3, r3, #24
 80067d8:	4962      	ldr	r1, [pc, #392]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067de:	e05f      	b.n	80068a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d042      	beq.n	800686e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80067e8:	4b5e      	ldr	r3, [pc, #376]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a5d      	ldr	r2, [pc, #372]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80067ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f4:	f7fb f942 	bl	8001a7c <HAL_GetTick>
 80067f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80067fc:	f7fb f93e 	bl	8001a7c <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b02      	cmp	r3, #2
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e280      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800680e:	4b55      	ldr	r3, [pc, #340]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006816:	2b00      	cmp	r3, #0
 8006818:	d0f0      	beq.n	80067fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800681a:	f7fb f95f 	bl	8001adc <HAL_GetREVID>
 800681e:	4603      	mov	r3, r0
 8006820:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006824:	4293      	cmp	r3, r2
 8006826:	d817      	bhi.n	8006858 <HAL_RCC_OscConfig+0x3ec>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	2b20      	cmp	r3, #32
 800682e:	d108      	bne.n	8006842 <HAL_RCC_OscConfig+0x3d6>
 8006830:	4b4c      	ldr	r3, [pc, #304]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006838:	4a4a      	ldr	r2, [pc, #296]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 800683a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800683e:	6053      	str	r3, [r2, #4]
 8006840:	e02e      	b.n	80068a0 <HAL_RCC_OscConfig+0x434>
 8006842:	4b48      	ldr	r3, [pc, #288]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	069b      	lsls	r3, r3, #26
 8006850:	4944      	ldr	r1, [pc, #272]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006852:	4313      	orrs	r3, r2
 8006854:	604b      	str	r3, [r1, #4]
 8006856:	e023      	b.n	80068a0 <HAL_RCC_OscConfig+0x434>
 8006858:	4b42      	ldr	r3, [pc, #264]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	061b      	lsls	r3, r3, #24
 8006866:	493f      	ldr	r1, [pc, #252]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006868:	4313      	orrs	r3, r2
 800686a:	60cb      	str	r3, [r1, #12]
 800686c:	e018      	b.n	80068a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800686e:	4b3d      	ldr	r3, [pc, #244]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a3c      	ldr	r2, [pc, #240]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006874:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800687a:	f7fb f8ff 	bl	8001a7c <HAL_GetTick>
 800687e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006882:	f7fb f8fb 	bl	8001a7c <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e23d      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006894:	4b33      	ldr	r3, [pc, #204]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1f0      	bne.n	8006882 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d036      	beq.n	800691a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d019      	beq.n	80068e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80068b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068b8:	4a2a      	ldr	r2, [pc, #168]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c0:	f7fb f8dc 	bl	8001a7c <HAL_GetTick>
 80068c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068c8:	f7fb f8d8 	bl	8001a7c <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e21a      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80068da:	4b22      	ldr	r3, [pc, #136]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80068dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0f0      	beq.n	80068c8 <HAL_RCC_OscConfig+0x45c>
 80068e6:	e018      	b.n	800691a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068e8:	4b1e      	ldr	r3, [pc, #120]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80068ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 80068ee:	f023 0301 	bic.w	r3, r3, #1
 80068f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f4:	f7fb f8c2 	bl	8001a7c <HAL_GetTick>
 80068f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068fc:	f7fb f8be 	bl	8001a7c <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e200      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800690e:	4b15      	ldr	r3, [pc, #84]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f0      	bne.n	80068fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0320 	and.w	r3, r3, #32
 8006922:	2b00      	cmp	r3, #0
 8006924:	d039      	beq.n	800699a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01c      	beq.n	8006968 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800692e:	4b0d      	ldr	r3, [pc, #52]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a0c      	ldr	r2, [pc, #48]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006934:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006938:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800693a:	f7fb f89f 	bl	8001a7c <HAL_GetTick>
 800693e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006940:	e008      	b.n	8006954 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006942:	f7fb f89b 	bl	8001a7c <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d901      	bls.n	8006954 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e1dd      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006954:	4b03      	ldr	r3, [pc, #12]	@ (8006964 <HAL_RCC_OscConfig+0x4f8>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0f0      	beq.n	8006942 <HAL_RCC_OscConfig+0x4d6>
 8006960:	e01b      	b.n	800699a <HAL_RCC_OscConfig+0x52e>
 8006962:	bf00      	nop
 8006964:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006968:	4b9b      	ldr	r3, [pc, #620]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a9a      	ldr	r2, [pc, #616]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 800696e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006972:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006974:	f7fb f882 	bl	8001a7c <HAL_GetTick>
 8006978:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800697a:	e008      	b.n	800698e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800697c:	f7fb f87e 	bl	8001a7c <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	2b02      	cmp	r3, #2
 8006988:	d901      	bls.n	800698e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e1c0      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800698e:	4b92      	ldr	r3, [pc, #584]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1f0      	bne.n	800697c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0304 	and.w	r3, r3, #4
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 8081 	beq.w	8006aaa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80069a8:	4b8c      	ldr	r3, [pc, #560]	@ (8006bdc <HAL_RCC_OscConfig+0x770>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a8b      	ldr	r2, [pc, #556]	@ (8006bdc <HAL_RCC_OscConfig+0x770>)
 80069ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069b4:	f7fb f862 	bl	8001a7c <HAL_GetTick>
 80069b8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069ba:	e008      	b.n	80069ce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069bc:	f7fb f85e 	bl	8001a7c <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b64      	cmp	r3, #100	@ 0x64
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e1a0      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069ce:	4b83      	ldr	r3, [pc, #524]	@ (8006bdc <HAL_RCC_OscConfig+0x770>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d0f0      	beq.n	80069bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d106      	bne.n	80069f0 <HAL_RCC_OscConfig+0x584>
 80069e2:	4b7d      	ldr	r3, [pc, #500]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 80069e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e6:	4a7c      	ldr	r2, [pc, #496]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 80069e8:	f043 0301 	orr.w	r3, r3, #1
 80069ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80069ee:	e02d      	b.n	8006a4c <HAL_RCC_OscConfig+0x5e0>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10c      	bne.n	8006a12 <HAL_RCC_OscConfig+0x5a6>
 80069f8:	4b77      	ldr	r3, [pc, #476]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 80069fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069fc:	4a76      	ldr	r2, [pc, #472]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 80069fe:	f023 0301 	bic.w	r3, r3, #1
 8006a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a04:	4b74      	ldr	r3, [pc, #464]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a08:	4a73      	ldr	r2, [pc, #460]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a0a:	f023 0304 	bic.w	r3, r3, #4
 8006a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a10:	e01c      	b.n	8006a4c <HAL_RCC_OscConfig+0x5e0>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b05      	cmp	r3, #5
 8006a18:	d10c      	bne.n	8006a34 <HAL_RCC_OscConfig+0x5c8>
 8006a1a:	4b6f      	ldr	r3, [pc, #444]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a1e:	4a6e      	ldr	r2, [pc, #440]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a20:	f043 0304 	orr.w	r3, r3, #4
 8006a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a26:	4b6c      	ldr	r3, [pc, #432]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a2a:	4a6b      	ldr	r2, [pc, #428]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a32:	e00b      	b.n	8006a4c <HAL_RCC_OscConfig+0x5e0>
 8006a34:	4b68      	ldr	r3, [pc, #416]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a38:	4a67      	ldr	r2, [pc, #412]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a3a:	f023 0301 	bic.w	r3, r3, #1
 8006a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a40:	4b65      	ldr	r3, [pc, #404]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a44:	4a64      	ldr	r2, [pc, #400]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a46:	f023 0304 	bic.w	r3, r3, #4
 8006a4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d015      	beq.n	8006a80 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a54:	f7fb f812 	bl	8001a7c <HAL_GetTick>
 8006a58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a5a:	e00a      	b.n	8006a72 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a5c:	f7fb f80e 	bl	8001a7c <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e14e      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a72:	4b59      	ldr	r3, [pc, #356]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0ee      	beq.n	8006a5c <HAL_RCC_OscConfig+0x5f0>
 8006a7e:	e014      	b.n	8006aaa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a80:	f7fa fffc 	bl	8001a7c <HAL_GetTick>
 8006a84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a86:	e00a      	b.n	8006a9e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a88:	f7fa fff8 	bl	8001a7c <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e138      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a9e:	4b4e      	ldr	r3, [pc, #312]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1ee      	bne.n	8006a88 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 812d 	beq.w	8006d0e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006ab4:	4b48      	ldr	r3, [pc, #288]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006abc:	2b18      	cmp	r3, #24
 8006abe:	f000 80bd 	beq.w	8006c3c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	f040 809e 	bne.w	8006c08 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006acc:	4b42      	ldr	r3, [pc, #264]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a41      	ldr	r2, [pc, #260]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006ad2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad8:	f7fa ffd0 	bl	8001a7c <HAL_GetTick>
 8006adc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ae0:	f7fa ffcc 	bl	8001a7c <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e10e      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006af2:	4b39      	ldr	r3, [pc, #228]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1f0      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006afe:	4b36      	ldr	r3, [pc, #216]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b02:	4b37      	ldr	r3, [pc, #220]	@ (8006be0 <HAL_RCC_OscConfig+0x774>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006b0e:	0112      	lsls	r2, r2, #4
 8006b10:	430a      	orrs	r2, r1
 8006b12:	4931      	ldr	r1, [pc, #196]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b26:	3b01      	subs	r3, #1
 8006b28:	025b      	lsls	r3, r3, #9
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b32:	3b01      	subs	r3, #1
 8006b34:	041b      	lsls	r3, r3, #16
 8006b36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b40:	3b01      	subs	r3, #1
 8006b42:	061b      	lsls	r3, r3, #24
 8006b44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b48:	4923      	ldr	r1, [pc, #140]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006b4e:	4b22      	ldr	r3, [pc, #136]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b52:	4a21      	ldr	r2, [pc, #132]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b54:	f023 0301 	bic.w	r3, r3, #1
 8006b58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b5e:	4b21      	ldr	r3, [pc, #132]	@ (8006be4 <HAL_RCC_OscConfig+0x778>)
 8006b60:	4013      	ands	r3, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006b66:	00d2      	lsls	r2, r2, #3
 8006b68:	491b      	ldr	r1, [pc, #108]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b72:	f023 020c 	bic.w	r2, r3, #12
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7a:	4917      	ldr	r1, [pc, #92]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006b80:	4b15      	ldr	r3, [pc, #84]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b84:	f023 0202 	bic.w	r2, r3, #2
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b8c:	4912      	ldr	r1, [pc, #72]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b92:	4b11      	ldr	r3, [pc, #68]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b96:	4a10      	ldr	r2, [pc, #64]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba2:	4a0d      	ldr	r2, [pc, #52]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ba8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006baa:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bae:	4a0a      	ldr	r2, [pc, #40]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006bb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006bb6:	4b08      	ldr	r3, [pc, #32]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bba:	4a07      	ldr	r2, [pc, #28]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006bbc:	f043 0301 	orr.w	r3, r3, #1
 8006bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bc2:	4b05      	ldr	r3, [pc, #20]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a04      	ldr	r2, [pc, #16]	@ (8006bd8 <HAL_RCC_OscConfig+0x76c>)
 8006bc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bce:	f7fa ff55 	bl	8001a7c <HAL_GetTick>
 8006bd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bd4:	e011      	b.n	8006bfa <HAL_RCC_OscConfig+0x78e>
 8006bd6:	bf00      	nop
 8006bd8:	58024400 	.word	0x58024400
 8006bdc:	58024800 	.word	0x58024800
 8006be0:	fffffc0c 	.word	0xfffffc0c
 8006be4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be8:	f7fa ff48 	bl	8001a7c <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e08a      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bfa:	4b47      	ldr	r3, [pc, #284]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0f0      	beq.n	8006be8 <HAL_RCC_OscConfig+0x77c>
 8006c06:	e082      	b.n	8006d0e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c08:	4b43      	ldr	r3, [pc, #268]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a42      	ldr	r2, [pc, #264]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006c0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c14:	f7fa ff32 	bl	8001a7c <HAL_GetTick>
 8006c18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c1c:	f7fa ff2e 	bl	8001a7c <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e070      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1f0      	bne.n	8006c1c <HAL_RCC_OscConfig+0x7b0>
 8006c3a:	e068      	b.n	8006d0e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006c3c:	4b36      	ldr	r3, [pc, #216]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006c42:	4b35      	ldr	r3, [pc, #212]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c46:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d031      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f003 0203 	and.w	r2, r3, #3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d12a      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	091b      	lsrs	r3, r3, #4
 8006c62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d122      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c78:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d11a      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	0a5b      	lsrs	r3, r3, #9
 8006c82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c8a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d111      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	0c1b      	lsrs	r3, r3, #16
 8006c94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d108      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	0e1b      	lsrs	r3, r3, #24
 8006ca6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d001      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e02b      	b.n	8006d10 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006cb8:	4b17      	ldr	r3, [pc, #92]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cbc:	08db      	lsrs	r3, r3, #3
 8006cbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cc2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d01f      	beq.n	8006d0e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006cce:	4b12      	ldr	r3, [pc, #72]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd2:	4a11      	ldr	r2, [pc, #68]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006cd4:	f023 0301 	bic.w	r3, r3, #1
 8006cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006cda:	f7fa fecf 	bl	8001a7c <HAL_GetTick>
 8006cde:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006ce0:	bf00      	nop
 8006ce2:	f7fa fecb 	bl	8001a7c <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d0f9      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006cee:	4b0a      	ldr	r3, [pc, #40]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006cf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8006d1c <HAL_RCC_OscConfig+0x8b0>)
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006cfa:	00d2      	lsls	r2, r2, #3
 8006cfc:	4906      	ldr	r1, [pc, #24]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006d02:	4b05      	ldr	r3, [pc, #20]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d06:	4a04      	ldr	r2, [pc, #16]	@ (8006d18 <HAL_RCC_OscConfig+0x8ac>)
 8006d08:	f043 0301 	orr.w	r3, r3, #1
 8006d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3730      	adds	r7, #48	@ 0x30
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	58024400 	.word	0x58024400
 8006d1c:	ffff0007 	.word	0xffff0007

08006d20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e19c      	b.n	800706e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d34:	4b8a      	ldr	r3, [pc, #552]	@ (8006f60 <HAL_RCC_ClockConfig+0x240>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d910      	bls.n	8006d64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d42:	4b87      	ldr	r3, [pc, #540]	@ (8006f60 <HAL_RCC_ClockConfig+0x240>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f023 020f 	bic.w	r2, r3, #15
 8006d4a:	4985      	ldr	r1, [pc, #532]	@ (8006f60 <HAL_RCC_ClockConfig+0x240>)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d52:	4b83      	ldr	r3, [pc, #524]	@ (8006f60 <HAL_RCC_ClockConfig+0x240>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d001      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e184      	b.n	800706e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d010      	beq.n	8006d92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	691a      	ldr	r2, [r3, #16]
 8006d74:	4b7b      	ldr	r3, [pc, #492]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d908      	bls.n	8006d92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d80:	4b78      	ldr	r3, [pc, #480]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	4975      	ldr	r1, [pc, #468]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0308 	and.w	r3, r3, #8
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d010      	beq.n	8006dc0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	695a      	ldr	r2, [r3, #20]
 8006da2:	4b70      	ldr	r3, [pc, #448]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d908      	bls.n	8006dc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006dae:	4b6d      	ldr	r3, [pc, #436]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	496a      	ldr	r1, [pc, #424]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d010      	beq.n	8006dee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	699a      	ldr	r2, [r3, #24]
 8006dd0:	4b64      	ldr	r3, [pc, #400]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d908      	bls.n	8006dee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ddc:	4b61      	ldr	r3, [pc, #388]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	495e      	ldr	r1, [pc, #376]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d010      	beq.n	8006e1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	69da      	ldr	r2, [r3, #28]
 8006dfe:	4b59      	ldr	r3, [pc, #356]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d908      	bls.n	8006e1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006e0a:	4b56      	ldr	r3, [pc, #344]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	4953      	ldr	r1, [pc, #332]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0302 	and.w	r3, r3, #2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d010      	beq.n	8006e4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	4b4d      	ldr	r3, [pc, #308]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d908      	bls.n	8006e4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e38:	4b4a      	ldr	r3, [pc, #296]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	f023 020f 	bic.w	r2, r3, #15
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	4947      	ldr	r1, [pc, #284]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d055      	beq.n	8006f02 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e56:	4b43      	ldr	r3, [pc, #268]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	4940      	ldr	r1, [pc, #256]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d107      	bne.n	8006e80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e70:	4b3c      	ldr	r3, [pc, #240]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d121      	bne.n	8006ec0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e0f6      	b.n	800706e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d107      	bne.n	8006e98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e88:	4b36      	ldr	r3, [pc, #216]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d115      	bne.n	8006ec0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e0ea      	b.n	800706e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d107      	bne.n	8006eb0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ea0:	4b30      	ldr	r3, [pc, #192]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d109      	bne.n	8006ec0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e0de      	b.n	800706e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eb0:	4b2c      	ldr	r3, [pc, #176]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e0d6      	b.n	800706e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ec0:	4b28      	ldr	r3, [pc, #160]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	f023 0207 	bic.w	r2, r3, #7
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	4925      	ldr	r1, [pc, #148]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ed2:	f7fa fdd3 	bl	8001a7c <HAL_GetTick>
 8006ed6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ed8:	e00a      	b.n	8006ef0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eda:	f7fa fdcf 	bl	8001a7c <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e0be      	b.n	800706e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	00db      	lsls	r3, r3, #3
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d1eb      	bne.n	8006eda <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d010      	beq.n	8006f30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	4b14      	ldr	r3, [pc, #80]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d208      	bcs.n	8006f30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f1e:	4b11      	ldr	r3, [pc, #68]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	f023 020f 	bic.w	r2, r3, #15
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	490e      	ldr	r1, [pc, #56]	@ (8006f64 <HAL_RCC_ClockConfig+0x244>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f30:	4b0b      	ldr	r3, [pc, #44]	@ (8006f60 <HAL_RCC_ClockConfig+0x240>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d214      	bcs.n	8006f68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f3e:	4b08      	ldr	r3, [pc, #32]	@ (8006f60 <HAL_RCC_ClockConfig+0x240>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f023 020f 	bic.w	r2, r3, #15
 8006f46:	4906      	ldr	r1, [pc, #24]	@ (8006f60 <HAL_RCC_ClockConfig+0x240>)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f4e:	4b04      	ldr	r3, [pc, #16]	@ (8006f60 <HAL_RCC_ClockConfig+0x240>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 030f 	and.w	r3, r3, #15
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d005      	beq.n	8006f68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e086      	b.n	800706e <HAL_RCC_ClockConfig+0x34e>
 8006f60:	52002000 	.word	0x52002000
 8006f64:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0304 	and.w	r3, r3, #4
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d010      	beq.n	8006f96 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	691a      	ldr	r2, [r3, #16]
 8006f78:	4b3f      	ldr	r3, [pc, #252]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d208      	bcs.n	8006f96 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f84:	4b3c      	ldr	r3, [pc, #240]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	4939      	ldr	r1, [pc, #228]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d010      	beq.n	8006fc4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	695a      	ldr	r2, [r3, #20]
 8006fa6:	4b34      	ldr	r3, [pc, #208]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d208      	bcs.n	8006fc4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006fb2:	4b31      	ldr	r3, [pc, #196]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	492e      	ldr	r1, [pc, #184]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0310 	and.w	r3, r3, #16
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d010      	beq.n	8006ff2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699a      	ldr	r2, [r3, #24]
 8006fd4:	4b28      	ldr	r3, [pc, #160]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d208      	bcs.n	8006ff2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006fe0:	4b25      	ldr	r3, [pc, #148]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	4922      	ldr	r1, [pc, #136]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d010      	beq.n	8007020 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	69da      	ldr	r2, [r3, #28]
 8007002:	4b1d      	ldr	r3, [pc, #116]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800700a:	429a      	cmp	r2, r3
 800700c:	d208      	bcs.n	8007020 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800700e:	4b1a      	ldr	r3, [pc, #104]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	4917      	ldr	r1, [pc, #92]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 800701c:	4313      	orrs	r3, r2
 800701e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007020:	f000 f834 	bl	800708c <HAL_RCC_GetSysClockFreq>
 8007024:	4602      	mov	r2, r0
 8007026:	4b14      	ldr	r3, [pc, #80]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	0a1b      	lsrs	r3, r3, #8
 800702c:	f003 030f 	and.w	r3, r3, #15
 8007030:	4912      	ldr	r1, [pc, #72]	@ (800707c <HAL_RCC_ClockConfig+0x35c>)
 8007032:	5ccb      	ldrb	r3, [r1, r3]
 8007034:	f003 031f 	and.w	r3, r3, #31
 8007038:	fa22 f303 	lsr.w	r3, r2, r3
 800703c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800703e:	4b0e      	ldr	r3, [pc, #56]	@ (8007078 <HAL_RCC_ClockConfig+0x358>)
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	4a0d      	ldr	r2, [pc, #52]	@ (800707c <HAL_RCC_ClockConfig+0x35c>)
 8007048:	5cd3      	ldrb	r3, [r2, r3]
 800704a:	f003 031f 	and.w	r3, r3, #31
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	fa22 f303 	lsr.w	r3, r2, r3
 8007054:	4a0a      	ldr	r2, [pc, #40]	@ (8007080 <HAL_RCC_ClockConfig+0x360>)
 8007056:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007058:	4a0a      	ldr	r2, [pc, #40]	@ (8007084 <HAL_RCC_ClockConfig+0x364>)
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800705e:	4b0a      	ldr	r3, [pc, #40]	@ (8007088 <HAL_RCC_ClockConfig+0x368>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4618      	mov	r0, r3
 8007064:	f7fa fcc0 	bl	80019e8 <HAL_InitTick>
 8007068:	4603      	mov	r3, r0
 800706a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	58024400 	.word	0x58024400
 800707c:	0800e368 	.word	0x0800e368
 8007080:	24000008 	.word	0x24000008
 8007084:	24000004 	.word	0x24000004
 8007088:	2400000c 	.word	0x2400000c

0800708c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800708c:	b480      	push	{r7}
 800708e:	b089      	sub	sp, #36	@ 0x24
 8007090:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007092:	4bb3      	ldr	r3, [pc, #716]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800709a:	2b18      	cmp	r3, #24
 800709c:	f200 8155 	bhi.w	800734a <HAL_RCC_GetSysClockFreq+0x2be>
 80070a0:	a201      	add	r2, pc, #4	@ (adr r2, 80070a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80070a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a6:	bf00      	nop
 80070a8:	0800710d 	.word	0x0800710d
 80070ac:	0800734b 	.word	0x0800734b
 80070b0:	0800734b 	.word	0x0800734b
 80070b4:	0800734b 	.word	0x0800734b
 80070b8:	0800734b 	.word	0x0800734b
 80070bc:	0800734b 	.word	0x0800734b
 80070c0:	0800734b 	.word	0x0800734b
 80070c4:	0800734b 	.word	0x0800734b
 80070c8:	08007133 	.word	0x08007133
 80070cc:	0800734b 	.word	0x0800734b
 80070d0:	0800734b 	.word	0x0800734b
 80070d4:	0800734b 	.word	0x0800734b
 80070d8:	0800734b 	.word	0x0800734b
 80070dc:	0800734b 	.word	0x0800734b
 80070e0:	0800734b 	.word	0x0800734b
 80070e4:	0800734b 	.word	0x0800734b
 80070e8:	08007139 	.word	0x08007139
 80070ec:	0800734b 	.word	0x0800734b
 80070f0:	0800734b 	.word	0x0800734b
 80070f4:	0800734b 	.word	0x0800734b
 80070f8:	0800734b 	.word	0x0800734b
 80070fc:	0800734b 	.word	0x0800734b
 8007100:	0800734b 	.word	0x0800734b
 8007104:	0800734b 	.word	0x0800734b
 8007108:	0800713f 	.word	0x0800713f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800710c:	4b94      	ldr	r3, [pc, #592]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0320 	and.w	r3, r3, #32
 8007114:	2b00      	cmp	r3, #0
 8007116:	d009      	beq.n	800712c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007118:	4b91      	ldr	r3, [pc, #580]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	08db      	lsrs	r3, r3, #3
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	4a90      	ldr	r2, [pc, #576]	@ (8007364 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007124:	fa22 f303 	lsr.w	r3, r2, r3
 8007128:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800712a:	e111      	b.n	8007350 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800712c:	4b8d      	ldr	r3, [pc, #564]	@ (8007364 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800712e:	61bb      	str	r3, [r7, #24]
      break;
 8007130:	e10e      	b.n	8007350 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007132:	4b8d      	ldr	r3, [pc, #564]	@ (8007368 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007134:	61bb      	str	r3, [r7, #24]
      break;
 8007136:	e10b      	b.n	8007350 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007138:	4b8c      	ldr	r3, [pc, #560]	@ (800736c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800713a:	61bb      	str	r3, [r7, #24]
      break;
 800713c:	e108      	b.n	8007350 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800713e:	4b88      	ldr	r3, [pc, #544]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007142:	f003 0303 	and.w	r3, r3, #3
 8007146:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007148:	4b85      	ldr	r3, [pc, #532]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800714a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800714c:	091b      	lsrs	r3, r3, #4
 800714e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007152:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007154:	4b82      	ldr	r3, [pc, #520]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800715e:	4b80      	ldr	r3, [pc, #512]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007162:	08db      	lsrs	r3, r3, #3
 8007164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	fb02 f303 	mul.w	r3, r2, r3
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007176:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 80e1 	beq.w	8007344 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b02      	cmp	r3, #2
 8007186:	f000 8083 	beq.w	8007290 <HAL_RCC_GetSysClockFreq+0x204>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b02      	cmp	r3, #2
 800718e:	f200 80a1 	bhi.w	80072d4 <HAL_RCC_GetSysClockFreq+0x248>
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <HAL_RCC_GetSysClockFreq+0x114>
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d056      	beq.n	800724c <HAL_RCC_GetSysClockFreq+0x1c0>
 800719e:	e099      	b.n	80072d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071a0:	4b6f      	ldr	r3, [pc, #444]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d02d      	beq.n	8007208 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071ac:	4b6c      	ldr	r3, [pc, #432]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	08db      	lsrs	r3, r3, #3
 80071b2:	f003 0303 	and.w	r3, r3, #3
 80071b6:	4a6b      	ldr	r2, [pc, #428]	@ (8007364 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071b8:	fa22 f303 	lsr.w	r3, r2, r3
 80071bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	ee07 3a90 	vmov	s15, r3
 80071c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d6:	4b62      	ldr	r3, [pc, #392]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80071ea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007370 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007202:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007206:	e087      	b.n	8007318 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007212:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007374 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800721a:	4b51      	ldr	r3, [pc, #324]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800721c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800721e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007222:	ee07 3a90 	vmov	s15, r3
 8007226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722a:	ed97 6a02 	vldr	s12, [r7, #8]
 800722e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007370 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800723a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800723e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007246:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800724a:	e065      	b.n	8007318 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007256:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007378 <HAL_RCC_GetSysClockFreq+0x2ec>
 800725a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725e:	4b40      	ldr	r3, [pc, #256]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007266:	ee07 3a90 	vmov	s15, r3
 800726a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007272:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007370 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800727a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800728e:	e043      	b.n	8007318 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800737c <HAL_RCC_GetSysClockFreq+0x2f0>
 800729e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a2:	4b2f      	ldr	r3, [pc, #188]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80072b6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007370 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072d2:	e021      	b.n	8007318 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072de:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007378 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e6:	4b1e      	ldr	r3, [pc, #120]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80072fa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007370 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800730a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800730e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007312:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007316:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007318:	4b11      	ldr	r3, [pc, #68]	@ (8007360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800731a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731c:	0a5b      	lsrs	r3, r3, #9
 800731e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007322:	3301      	adds	r3, #1
 8007324:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	ee07 3a90 	vmov	s15, r3
 800732c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007330:	edd7 6a07 	vldr	s13, [r7, #28]
 8007334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800733c:	ee17 3a90 	vmov	r3, s15
 8007340:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007342:	e005      	b.n	8007350 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	61bb      	str	r3, [r7, #24]
      break;
 8007348:	e002      	b.n	8007350 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800734a:	4b07      	ldr	r3, [pc, #28]	@ (8007368 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800734c:	61bb      	str	r3, [r7, #24]
      break;
 800734e:	bf00      	nop
  }

  return sysclockfreq;
 8007350:	69bb      	ldr	r3, [r7, #24]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3724      	adds	r7, #36	@ 0x24
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	58024400 	.word	0x58024400
 8007364:	03d09000 	.word	0x03d09000
 8007368:	003d0900 	.word	0x003d0900
 800736c:	007a1200 	.word	0x007a1200
 8007370:	46000000 	.word	0x46000000
 8007374:	4c742400 	.word	0x4c742400
 8007378:	4a742400 	.word	0x4a742400
 800737c:	4af42400 	.word	0x4af42400

08007380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007386:	f7ff fe81 	bl	800708c <HAL_RCC_GetSysClockFreq>
 800738a:	4602      	mov	r2, r0
 800738c:	4b10      	ldr	r3, [pc, #64]	@ (80073d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	0a1b      	lsrs	r3, r3, #8
 8007392:	f003 030f 	and.w	r3, r3, #15
 8007396:	490f      	ldr	r1, [pc, #60]	@ (80073d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007398:	5ccb      	ldrb	r3, [r1, r3]
 800739a:	f003 031f 	and.w	r3, r3, #31
 800739e:	fa22 f303 	lsr.w	r3, r2, r3
 80073a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073a4:	4b0a      	ldr	r3, [pc, #40]	@ (80073d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	f003 030f 	and.w	r3, r3, #15
 80073ac:	4a09      	ldr	r2, [pc, #36]	@ (80073d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80073ae:	5cd3      	ldrb	r3, [r2, r3]
 80073b0:	f003 031f 	and.w	r3, r3, #31
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ba:	4a07      	ldr	r2, [pc, #28]	@ (80073d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80073bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073be:	4a07      	ldr	r2, [pc, #28]	@ (80073dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80073c4:	4b04      	ldr	r3, [pc, #16]	@ (80073d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80073c6:	681b      	ldr	r3, [r3, #0]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	58024400 	.word	0x58024400
 80073d4:	0800e368 	.word	0x0800e368
 80073d8:	24000008 	.word	0x24000008
 80073dc:	24000004 	.word	0x24000004

080073e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80073e4:	f7ff ffcc 	bl	8007380 <HAL_RCC_GetHCLKFreq>
 80073e8:	4602      	mov	r2, r0
 80073ea:	4b06      	ldr	r3, [pc, #24]	@ (8007404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	091b      	lsrs	r3, r3, #4
 80073f0:	f003 0307 	and.w	r3, r3, #7
 80073f4:	4904      	ldr	r1, [pc, #16]	@ (8007408 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073f6:	5ccb      	ldrb	r3, [r1, r3]
 80073f8:	f003 031f 	and.w	r3, r3, #31
 80073fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007400:	4618      	mov	r0, r3
 8007402:	bd80      	pop	{r7, pc}
 8007404:	58024400 	.word	0x58024400
 8007408:	0800e368 	.word	0x0800e368

0800740c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007410:	f7ff ffb6 	bl	8007380 <HAL_RCC_GetHCLKFreq>
 8007414:	4602      	mov	r2, r0
 8007416:	4b06      	ldr	r3, [pc, #24]	@ (8007430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	0a1b      	lsrs	r3, r3, #8
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	4904      	ldr	r1, [pc, #16]	@ (8007434 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007422:	5ccb      	ldrb	r3, [r1, r3]
 8007424:	f003 031f 	and.w	r3, r3, #31
 8007428:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800742c:	4618      	mov	r0, r3
 800742e:	bd80      	pop	{r7, pc}
 8007430:	58024400 	.word	0x58024400
 8007434:	0800e368 	.word	0x0800e368

08007438 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800743c:	b0ca      	sub	sp, #296	@ 0x128
 800743e:	af00      	add	r7, sp, #0
 8007440:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007444:	2300      	movs	r3, #0
 8007446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800744a:	2300      	movs	r3, #0
 800744c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007458:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800745c:	2500      	movs	r5, #0
 800745e:	ea54 0305 	orrs.w	r3, r4, r5
 8007462:	d049      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007468:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800746a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800746e:	d02f      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007470:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007474:	d828      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007476:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800747a:	d01a      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800747c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007480:	d822      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007486:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800748a:	d007      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800748c:	e01c      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800748e:	4bb8      	ldr	r3, [pc, #736]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007492:	4ab7      	ldr	r2, [pc, #732]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007498:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800749a:	e01a      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800749c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a0:	3308      	adds	r3, #8
 80074a2:	2102      	movs	r1, #2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f002 fb61 	bl	8009b6c <RCCEx_PLL2_Config>
 80074aa:	4603      	mov	r3, r0
 80074ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80074b0:	e00f      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b6:	3328      	adds	r3, #40	@ 0x28
 80074b8:	2102      	movs	r1, #2
 80074ba:	4618      	mov	r0, r3
 80074bc:	f002 fc08 	bl	8009cd0 <RCCEx_PLL3_Config>
 80074c0:	4603      	mov	r3, r0
 80074c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80074c6:	e004      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074ce:	e000      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80074d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10a      	bne.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80074da:	4ba5      	ldr	r3, [pc, #660]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80074e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074e8:	4aa1      	ldr	r2, [pc, #644]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074ea:	430b      	orrs	r3, r1
 80074ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80074ee:	e003      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007500:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007504:	f04f 0900 	mov.w	r9, #0
 8007508:	ea58 0309 	orrs.w	r3, r8, r9
 800750c:	d047      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800750e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007514:	2b04      	cmp	r3, #4
 8007516:	d82a      	bhi.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007518:	a201      	add	r2, pc, #4	@ (adr r2, 8007520 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800751a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751e:	bf00      	nop
 8007520:	08007535 	.word	0x08007535
 8007524:	08007543 	.word	0x08007543
 8007528:	08007559 	.word	0x08007559
 800752c:	08007577 	.word	0x08007577
 8007530:	08007577 	.word	0x08007577
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007534:	4b8e      	ldr	r3, [pc, #568]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007538:	4a8d      	ldr	r2, [pc, #564]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800753a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800753e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007540:	e01a      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007546:	3308      	adds	r3, #8
 8007548:	2100      	movs	r1, #0
 800754a:	4618      	mov	r0, r3
 800754c:	f002 fb0e 	bl	8009b6c <RCCEx_PLL2_Config>
 8007550:	4603      	mov	r3, r0
 8007552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007556:	e00f      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755c:	3328      	adds	r3, #40	@ 0x28
 800755e:	2100      	movs	r1, #0
 8007560:	4618      	mov	r0, r3
 8007562:	f002 fbb5 	bl	8009cd0 <RCCEx_PLL3_Config>
 8007566:	4603      	mov	r3, r0
 8007568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800756c:	e004      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007574:	e000      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10a      	bne.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007580:	4b7b      	ldr	r3, [pc, #492]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007584:	f023 0107 	bic.w	r1, r3, #7
 8007588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800758e:	4a78      	ldr	r2, [pc, #480]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007590:	430b      	orrs	r3, r1
 8007592:	6513      	str	r3, [r2, #80]	@ 0x50
 8007594:	e003      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800759a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800759e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80075aa:	f04f 0b00 	mov.w	fp, #0
 80075ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80075b2:	d04c      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80075b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075be:	d030      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80075c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075c4:	d829      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80075c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80075c8:	d02d      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80075ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80075cc:	d825      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80075ce:	2b80      	cmp	r3, #128	@ 0x80
 80075d0:	d018      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80075d2:	2b80      	cmp	r3, #128	@ 0x80
 80075d4:	d821      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d002      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80075da:	2b40      	cmp	r3, #64	@ 0x40
 80075dc:	d007      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80075de:	e01c      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075e0:	4b63      	ldr	r3, [pc, #396]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e4:	4a62      	ldr	r2, [pc, #392]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80075ec:	e01c      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f2:	3308      	adds	r3, #8
 80075f4:	2100      	movs	r1, #0
 80075f6:	4618      	mov	r0, r3
 80075f8:	f002 fab8 	bl	8009b6c <RCCEx_PLL2_Config>
 80075fc:	4603      	mov	r3, r0
 80075fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007602:	e011      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007608:	3328      	adds	r3, #40	@ 0x28
 800760a:	2100      	movs	r1, #0
 800760c:	4618      	mov	r0, r3
 800760e:	f002 fb5f 	bl	8009cd0 <RCCEx_PLL3_Config>
 8007612:	4603      	mov	r3, r0
 8007614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007618:	e006      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007620:	e002      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007622:	bf00      	nop
 8007624:	e000      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007626:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007630:	4b4f      	ldr	r3, [pc, #316]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007634:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800763e:	4a4c      	ldr	r2, [pc, #304]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007640:	430b      	orrs	r3, r1
 8007642:	6513      	str	r3, [r2, #80]	@ 0x50
 8007644:	e003      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800764a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800764e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800765a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800765e:	2300      	movs	r3, #0
 8007660:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007664:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007668:	460b      	mov	r3, r1
 800766a:	4313      	orrs	r3, r2
 800766c:	d053      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800766e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007672:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007676:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800767a:	d035      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800767c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007680:	d82e      	bhi.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007682:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007686:	d031      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007688:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800768c:	d828      	bhi.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800768e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007692:	d01a      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007694:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007698:	d822      	bhi.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800769e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076a2:	d007      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80076a4:	e01c      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076a6:	4b32      	ldr	r3, [pc, #200]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076aa:	4a31      	ldr	r2, [pc, #196]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076b2:	e01c      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b8:	3308      	adds	r3, #8
 80076ba:	2100      	movs	r1, #0
 80076bc:	4618      	mov	r0, r3
 80076be:	f002 fa55 	bl	8009b6c <RCCEx_PLL2_Config>
 80076c2:	4603      	mov	r3, r0
 80076c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80076c8:	e011      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ce:	3328      	adds	r3, #40	@ 0x28
 80076d0:	2100      	movs	r1, #0
 80076d2:	4618      	mov	r0, r3
 80076d4:	f002 fafc 	bl	8009cd0 <RCCEx_PLL3_Config>
 80076d8:	4603      	mov	r3, r0
 80076da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076de:	e006      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076e6:	e002      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80076e8:	bf00      	nop
 80076ea:	e000      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80076ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10b      	bne.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80076f6:	4b1e      	ldr	r3, [pc, #120]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076fa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80076fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007702:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007706:	4a1a      	ldr	r2, [pc, #104]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007708:	430b      	orrs	r3, r1
 800770a:	6593      	str	r3, [r2, #88]	@ 0x58
 800770c:	e003      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800770e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007712:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007722:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007726:	2300      	movs	r3, #0
 8007728:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800772c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007730:	460b      	mov	r3, r1
 8007732:	4313      	orrs	r3, r2
 8007734:	d056      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800773e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007742:	d038      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007744:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007748:	d831      	bhi.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800774a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800774e:	d034      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007750:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007754:	d82b      	bhi.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007756:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800775a:	d01d      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800775c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007760:	d825      	bhi.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d006      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007766:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800776a:	d00a      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800776c:	e01f      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800776e:	bf00      	nop
 8007770:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007774:	4ba2      	ldr	r3, [pc, #648]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007778:	4aa1      	ldr	r2, [pc, #644]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800777a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800777e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007780:	e01c      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007786:	3308      	adds	r3, #8
 8007788:	2100      	movs	r1, #0
 800778a:	4618      	mov	r0, r3
 800778c:	f002 f9ee 	bl	8009b6c <RCCEx_PLL2_Config>
 8007790:	4603      	mov	r3, r0
 8007792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007796:	e011      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779c:	3328      	adds	r3, #40	@ 0x28
 800779e:	2100      	movs	r1, #0
 80077a0:	4618      	mov	r0, r3
 80077a2:	f002 fa95 	bl	8009cd0 <RCCEx_PLL3_Config>
 80077a6:	4603      	mov	r3, r0
 80077a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077ac:	e006      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077b4:	e002      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80077b6:	bf00      	nop
 80077b8:	e000      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80077ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10b      	bne.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80077c4:	4b8e      	ldr	r3, [pc, #568]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077c8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80077cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80077d4:	4a8a      	ldr	r2, [pc, #552]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077d6:	430b      	orrs	r3, r1
 80077d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80077da:	e003      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80077f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80077f4:	2300      	movs	r3, #0
 80077f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80077fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80077fe:	460b      	mov	r3, r1
 8007800:	4313      	orrs	r3, r2
 8007802:	d03a      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800780a:	2b30      	cmp	r3, #48	@ 0x30
 800780c:	d01f      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800780e:	2b30      	cmp	r3, #48	@ 0x30
 8007810:	d819      	bhi.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007812:	2b20      	cmp	r3, #32
 8007814:	d00c      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007816:	2b20      	cmp	r3, #32
 8007818:	d815      	bhi.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800781a:	2b00      	cmp	r3, #0
 800781c:	d019      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800781e:	2b10      	cmp	r3, #16
 8007820:	d111      	bne.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007822:	4b77      	ldr	r3, [pc, #476]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007826:	4a76      	ldr	r2, [pc, #472]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800782c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800782e:	e011      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007834:	3308      	adds	r3, #8
 8007836:	2102      	movs	r1, #2
 8007838:	4618      	mov	r0, r3
 800783a:	f002 f997 	bl	8009b6c <RCCEx_PLL2_Config>
 800783e:	4603      	mov	r3, r0
 8007840:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007844:	e006      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800784c:	e002      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800784e:	bf00      	nop
 8007850:	e000      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800785c:	4b68      	ldr	r3, [pc, #416]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800785e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007860:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800786a:	4a65      	ldr	r2, [pc, #404]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800786c:	430b      	orrs	r3, r1
 800786e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007870:	e003      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007876:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800787a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007882:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007886:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800788a:	2300      	movs	r3, #0
 800788c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007890:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007894:	460b      	mov	r3, r1
 8007896:	4313      	orrs	r3, r2
 8007898:	d051      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800789a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078a4:	d035      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80078a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078aa:	d82e      	bhi.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80078ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80078b0:	d031      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80078b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80078b6:	d828      	bhi.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80078b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078bc:	d01a      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80078be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078c2:	d822      	bhi.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d003      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80078c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078cc:	d007      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80078ce:	e01c      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078d0:	4b4b      	ldr	r3, [pc, #300]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d4:	4a4a      	ldr	r2, [pc, #296]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80078dc:	e01c      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e2:	3308      	adds	r3, #8
 80078e4:	2100      	movs	r1, #0
 80078e6:	4618      	mov	r0, r3
 80078e8:	f002 f940 	bl	8009b6c <RCCEx_PLL2_Config>
 80078ec:	4603      	mov	r3, r0
 80078ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80078f2:	e011      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80078f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f8:	3328      	adds	r3, #40	@ 0x28
 80078fa:	2100      	movs	r1, #0
 80078fc:	4618      	mov	r0, r3
 80078fe:	f002 f9e7 	bl	8009cd0 <RCCEx_PLL3_Config>
 8007902:	4603      	mov	r3, r0
 8007904:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007908:	e006      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007910:	e002      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007912:	bf00      	nop
 8007914:	e000      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007916:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10a      	bne.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007920:	4b37      	ldr	r3, [pc, #220]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007924:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800792e:	4a34      	ldr	r2, [pc, #208]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007930:	430b      	orrs	r3, r1
 8007932:	6513      	str	r3, [r2, #80]	@ 0x50
 8007934:	e003      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800793a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800793e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007946:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800794a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800794e:	2300      	movs	r3, #0
 8007950:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007954:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007958:	460b      	mov	r3, r1
 800795a:	4313      	orrs	r3, r2
 800795c:	d056      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800795e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007962:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007964:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007968:	d033      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800796a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800796e:	d82c      	bhi.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007970:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007974:	d02f      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007976:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800797a:	d826      	bhi.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800797c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007980:	d02b      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007982:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007986:	d820      	bhi.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007988:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800798c:	d012      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800798e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007992:	d81a      	bhi.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007994:	2b00      	cmp	r3, #0
 8007996:	d022      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800799c:	d115      	bne.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800799e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a2:	3308      	adds	r3, #8
 80079a4:	2101      	movs	r1, #1
 80079a6:	4618      	mov	r0, r3
 80079a8:	f002 f8e0 	bl	8009b6c <RCCEx_PLL2_Config>
 80079ac:	4603      	mov	r3, r0
 80079ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80079b2:	e015      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b8:	3328      	adds	r3, #40	@ 0x28
 80079ba:	2101      	movs	r1, #1
 80079bc:	4618      	mov	r0, r3
 80079be:	f002 f987 	bl	8009cd0 <RCCEx_PLL3_Config>
 80079c2:	4603      	mov	r3, r0
 80079c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80079c8:	e00a      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079d0:	e006      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80079d2:	bf00      	nop
 80079d4:	e004      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80079d6:	bf00      	nop
 80079d8:	e002      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80079da:	bf00      	nop
 80079dc:	e000      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80079de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10d      	bne.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80079e8:	4b05      	ldr	r3, [pc, #20]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80079f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079f6:	4a02      	ldr	r2, [pc, #8]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079f8:	430b      	orrs	r3, r1
 80079fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80079fc:	e006      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80079fe:	bf00      	nop
 8007a00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007a18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a22:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007a26:	460b      	mov	r3, r1
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	d055      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a38:	d033      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a3e:	d82c      	bhi.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a44:	d02f      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a4a:	d826      	bhi.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007a4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a50:	d02b      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007a52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a56:	d820      	bhi.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007a58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a5c:	d012      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007a5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a62:	d81a      	bhi.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d022      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007a68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a6c:	d115      	bne.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a72:	3308      	adds	r3, #8
 8007a74:	2101      	movs	r1, #1
 8007a76:	4618      	mov	r0, r3
 8007a78:	f002 f878 	bl	8009b6c <RCCEx_PLL2_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007a82:	e015      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a88:	3328      	adds	r3, #40	@ 0x28
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f002 f91f 	bl	8009cd0 <RCCEx_PLL3_Config>
 8007a92:	4603      	mov	r3, r0
 8007a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007a98:	e00a      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aa0:	e006      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007aa2:	bf00      	nop
 8007aa4:	e004      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007aa6:	bf00      	nop
 8007aa8:	e002      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007aaa:	bf00      	nop
 8007aac:	e000      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10b      	bne.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ab8:	4ba3      	ldr	r3, [pc, #652]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007abc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ac8:	4a9f      	ldr	r2, [pc, #636]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aca:	430b      	orrs	r3, r1
 8007acc:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ace:	e003      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ad4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007aee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007af2:	460b      	mov	r3, r1
 8007af4:	4313      	orrs	r3, r2
 8007af6:	d037      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007afe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b02:	d00e      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b08:	d816      	bhi.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d018      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007b0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b12:	d111      	bne.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b14:	4b8c      	ldr	r3, [pc, #560]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b18:	4a8b      	ldr	r2, [pc, #556]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007b20:	e00f      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b26:	3308      	adds	r3, #8
 8007b28:	2101      	movs	r1, #1
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f002 f81e 	bl	8009b6c <RCCEx_PLL2_Config>
 8007b30:	4603      	mov	r3, r0
 8007b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007b36:	e004      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b3e:	e000      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10a      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b4a:	4b7f      	ldr	r3, [pc, #508]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b4e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b58:	4a7b      	ldr	r2, [pc, #492]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b5a:	430b      	orrs	r3, r1
 8007b5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b5e:	e003      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b70:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007b74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007b7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4313      	orrs	r3, r2
 8007b86:	d039      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d81c      	bhi.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007b92:	a201      	add	r2, pc, #4	@ (adr r2, 8007b98 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bd5 	.word	0x08007bd5
 8007b9c:	08007ba9 	.word	0x08007ba9
 8007ba0:	08007bb7 	.word	0x08007bb7
 8007ba4:	08007bd5 	.word	0x08007bd5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ba8:	4b67      	ldr	r3, [pc, #412]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bac:	4a66      	ldr	r2, [pc, #408]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007bb4:	e00f      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bba:	3308      	adds	r3, #8
 8007bbc:	2102      	movs	r1, #2
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f001 ffd4 	bl	8009b6c <RCCEx_PLL2_Config>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007bca:	e004      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bd2:	e000      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10a      	bne.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007bde:	4b5a      	ldr	r3, [pc, #360]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007be2:	f023 0103 	bic.w	r1, r3, #3
 8007be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bec:	4a56      	ldr	r2, [pc, #344]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bee:	430b      	orrs	r3, r1
 8007bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007bf2:	e003      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007c08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007c12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007c16:	460b      	mov	r3, r1
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	f000 809f 	beq.w	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c1e:	4b4b      	ldr	r3, [pc, #300]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a4a      	ldr	r2, [pc, #296]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c2a:	f7f9 ff27 	bl	8001a7c <HAL_GetTick>
 8007c2e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c32:	e00b      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c34:	f7f9 ff22 	bl	8001a7c <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	2b64      	cmp	r3, #100	@ 0x64
 8007c42:	d903      	bls.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c4a:	e005      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c4c:	4b3f      	ldr	r3, [pc, #252]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0ed      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d179      	bne.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007c60:	4b39      	ldr	r3, [pc, #228]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c6c:	4053      	eors	r3, r2
 8007c6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d015      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c76:	4b34      	ldr	r3, [pc, #208]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c7e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c82:	4b31      	ldr	r3, [pc, #196]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c86:	4a30      	ldr	r2, [pc, #192]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c8c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c8e:	4b2e      	ldr	r3, [pc, #184]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c92:	4a2d      	ldr	r2, [pc, #180]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c98:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007c9a:	4a2b      	ldr	r2, [pc, #172]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007ca0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007caa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cae:	d118      	bne.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb0:	f7f9 fee4 	bl	8001a7c <HAL_GetTick>
 8007cb4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cb8:	e00d      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cba:	f7f9 fedf 	bl	8001a7c <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007cc4:	1ad2      	subs	r2, r2, r3
 8007cc6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d903      	bls.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007cd4:	e005      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0eb      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d129      	bne.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cfa:	d10e      	bne.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007cfc:	4b12      	ldr	r3, [pc, #72]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d0c:	091a      	lsrs	r2, r3, #4
 8007d0e:	4b10      	ldr	r3, [pc, #64]	@ (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007d10:	4013      	ands	r3, r2
 8007d12:	4a0d      	ldr	r2, [pc, #52]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d14:	430b      	orrs	r3, r1
 8007d16:	6113      	str	r3, [r2, #16]
 8007d18:	e005      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007d24:	6113      	str	r3, [r2, #16]
 8007d26:	4b08      	ldr	r3, [pc, #32]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d28:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d36:	4a04      	ldr	r2, [pc, #16]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d38:	430b      	orrs	r3, r1
 8007d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d3c:	e00e      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007d46:	e009      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007d48:	58024400 	.word	0x58024400
 8007d4c:	58024800 	.word	0x58024800
 8007d50:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d64:	f002 0301 	and.w	r3, r2, #1
 8007d68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	f000 8089 	beq.w	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d84:	2b28      	cmp	r3, #40	@ 0x28
 8007d86:	d86b      	bhi.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007d88:	a201      	add	r2, pc, #4	@ (adr r2, 8007d90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8e:	bf00      	nop
 8007d90:	08007e69 	.word	0x08007e69
 8007d94:	08007e61 	.word	0x08007e61
 8007d98:	08007e61 	.word	0x08007e61
 8007d9c:	08007e61 	.word	0x08007e61
 8007da0:	08007e61 	.word	0x08007e61
 8007da4:	08007e61 	.word	0x08007e61
 8007da8:	08007e61 	.word	0x08007e61
 8007dac:	08007e61 	.word	0x08007e61
 8007db0:	08007e35 	.word	0x08007e35
 8007db4:	08007e61 	.word	0x08007e61
 8007db8:	08007e61 	.word	0x08007e61
 8007dbc:	08007e61 	.word	0x08007e61
 8007dc0:	08007e61 	.word	0x08007e61
 8007dc4:	08007e61 	.word	0x08007e61
 8007dc8:	08007e61 	.word	0x08007e61
 8007dcc:	08007e61 	.word	0x08007e61
 8007dd0:	08007e4b 	.word	0x08007e4b
 8007dd4:	08007e61 	.word	0x08007e61
 8007dd8:	08007e61 	.word	0x08007e61
 8007ddc:	08007e61 	.word	0x08007e61
 8007de0:	08007e61 	.word	0x08007e61
 8007de4:	08007e61 	.word	0x08007e61
 8007de8:	08007e61 	.word	0x08007e61
 8007dec:	08007e61 	.word	0x08007e61
 8007df0:	08007e69 	.word	0x08007e69
 8007df4:	08007e61 	.word	0x08007e61
 8007df8:	08007e61 	.word	0x08007e61
 8007dfc:	08007e61 	.word	0x08007e61
 8007e00:	08007e61 	.word	0x08007e61
 8007e04:	08007e61 	.word	0x08007e61
 8007e08:	08007e61 	.word	0x08007e61
 8007e0c:	08007e61 	.word	0x08007e61
 8007e10:	08007e69 	.word	0x08007e69
 8007e14:	08007e61 	.word	0x08007e61
 8007e18:	08007e61 	.word	0x08007e61
 8007e1c:	08007e61 	.word	0x08007e61
 8007e20:	08007e61 	.word	0x08007e61
 8007e24:	08007e61 	.word	0x08007e61
 8007e28:	08007e61 	.word	0x08007e61
 8007e2c:	08007e61 	.word	0x08007e61
 8007e30:	08007e69 	.word	0x08007e69
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e38:	3308      	adds	r3, #8
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f001 fe95 	bl	8009b6c <RCCEx_PLL2_Config>
 8007e42:	4603      	mov	r3, r0
 8007e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007e48:	e00f      	b.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4e:	3328      	adds	r3, #40	@ 0x28
 8007e50:	2101      	movs	r1, #1
 8007e52:	4618      	mov	r0, r3
 8007e54:	f001 ff3c 	bl	8009cd0 <RCCEx_PLL3_Config>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007e5e:	e004      	b.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e66:	e000      	b.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10a      	bne.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007e72:	4bbf      	ldr	r3, [pc, #764]	@ (8008170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e76:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e80:	4abb      	ldr	r2, [pc, #748]	@ (8008170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e82:	430b      	orrs	r3, r1
 8007e84:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e86:	e003      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e98:	f002 0302 	and.w	r3, r2, #2
 8007e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007ea6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4313      	orrs	r3, r2
 8007eae:	d041      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007eb6:	2b05      	cmp	r3, #5
 8007eb8:	d824      	bhi.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007eba:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec0:	08007f0d 	.word	0x08007f0d
 8007ec4:	08007ed9 	.word	0x08007ed9
 8007ec8:	08007eef 	.word	0x08007eef
 8007ecc:	08007f0d 	.word	0x08007f0d
 8007ed0:	08007f0d 	.word	0x08007f0d
 8007ed4:	08007f0d 	.word	0x08007f0d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007edc:	3308      	adds	r3, #8
 8007ede:	2101      	movs	r1, #1
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f001 fe43 	bl	8009b6c <RCCEx_PLL2_Config>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007eec:	e00f      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef2:	3328      	adds	r3, #40	@ 0x28
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f001 feea 	bl	8009cd0 <RCCEx_PLL3_Config>
 8007efc:	4603      	mov	r3, r0
 8007efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f02:	e004      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f0a:	e000      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10a      	bne.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007f16:	4b96      	ldr	r3, [pc, #600]	@ (8008170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f1a:	f023 0107 	bic.w	r1, r3, #7
 8007f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f24:	4a92      	ldr	r2, [pc, #584]	@ (8008170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f26:	430b      	orrs	r3, r1
 8007f28:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f2a:	e003      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3c:	f002 0304 	and.w	r3, r2, #4
 8007f40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f44:	2300      	movs	r3, #0
 8007f46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f4a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4313      	orrs	r3, r2
 8007f52:	d044      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f5c:	2b05      	cmp	r3, #5
 8007f5e:	d825      	bhi.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007f60:	a201      	add	r2, pc, #4	@ (adr r2, 8007f68 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f66:	bf00      	nop
 8007f68:	08007fb5 	.word	0x08007fb5
 8007f6c:	08007f81 	.word	0x08007f81
 8007f70:	08007f97 	.word	0x08007f97
 8007f74:	08007fb5 	.word	0x08007fb5
 8007f78:	08007fb5 	.word	0x08007fb5
 8007f7c:	08007fb5 	.word	0x08007fb5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f84:	3308      	adds	r3, #8
 8007f86:	2101      	movs	r1, #1
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f001 fdef 	bl	8009b6c <RCCEx_PLL2_Config>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007f94:	e00f      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9a:	3328      	adds	r3, #40	@ 0x28
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f001 fe96 	bl	8009cd0 <RCCEx_PLL3_Config>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007faa:	e004      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fb2:	e000      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10b      	bne.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007fbe:	4b6c      	ldr	r3, [pc, #432]	@ (8008170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fc2:	f023 0107 	bic.w	r1, r3, #7
 8007fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fce:	4a68      	ldr	r2, [pc, #416]	@ (8008170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fd4:	e003      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	f002 0320 	and.w	r3, r2, #32
 8007fea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ff4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	d055      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008006:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800800a:	d033      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800800c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008010:	d82c      	bhi.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008016:	d02f      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800801c:	d826      	bhi.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800801e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008022:	d02b      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008024:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008028:	d820      	bhi.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800802a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800802e:	d012      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008034:	d81a      	bhi.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008036:	2b00      	cmp	r3, #0
 8008038:	d022      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800803a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800803e:	d115      	bne.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008044:	3308      	adds	r3, #8
 8008046:	2100      	movs	r1, #0
 8008048:	4618      	mov	r0, r3
 800804a:	f001 fd8f 	bl	8009b6c <RCCEx_PLL2_Config>
 800804e:	4603      	mov	r3, r0
 8008050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008054:	e015      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805a:	3328      	adds	r3, #40	@ 0x28
 800805c:	2102      	movs	r1, #2
 800805e:	4618      	mov	r0, r3
 8008060:	f001 fe36 	bl	8009cd0 <RCCEx_PLL3_Config>
 8008064:	4603      	mov	r3, r0
 8008066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800806a:	e00a      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008072:	e006      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008074:	bf00      	nop
 8008076:	e004      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008078:	bf00      	nop
 800807a:	e002      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800807c:	bf00      	nop
 800807e:	e000      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10b      	bne.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800808a:	4b39      	ldr	r3, [pc, #228]	@ (8008170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800808c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800808e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800809a:	4a35      	ldr	r2, [pc, #212]	@ (8008170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800809c:	430b      	orrs	r3, r1
 800809e:	6553      	str	r3, [r2, #84]	@ 0x54
 80080a0:	e003      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80080aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80080b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80080ba:	2300      	movs	r3, #0
 80080bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80080c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4313      	orrs	r3, r2
 80080c8:	d058      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80080ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080d2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80080d6:	d033      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80080d8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80080dc:	d82c      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80080de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e2:	d02f      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80080e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e8:	d826      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80080ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080ee:	d02b      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80080f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080f4:	d820      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80080f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080fa:	d012      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80080fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008100:	d81a      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008102:	2b00      	cmp	r3, #0
 8008104:	d022      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800810a:	d115      	bne.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800810c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008110:	3308      	adds	r3, #8
 8008112:	2100      	movs	r1, #0
 8008114:	4618      	mov	r0, r3
 8008116:	f001 fd29 	bl	8009b6c <RCCEx_PLL2_Config>
 800811a:	4603      	mov	r3, r0
 800811c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008120:	e015      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008126:	3328      	adds	r3, #40	@ 0x28
 8008128:	2102      	movs	r1, #2
 800812a:	4618      	mov	r0, r3
 800812c:	f001 fdd0 	bl	8009cd0 <RCCEx_PLL3_Config>
 8008130:	4603      	mov	r3, r0
 8008132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008136:	e00a      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800813e:	e006      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008140:	bf00      	nop
 8008142:	e004      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008144:	bf00      	nop
 8008146:	e002      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008148:	bf00      	nop
 800814a:	e000      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800814c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800814e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10e      	bne.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008156:	4b06      	ldr	r3, [pc, #24]	@ (8008170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800815a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800815e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008162:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008166:	4a02      	ldr	r2, [pc, #8]	@ (8008170 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008168:	430b      	orrs	r3, r1
 800816a:	6593      	str	r3, [r2, #88]	@ 0x58
 800816c:	e006      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800816e:	bf00      	nop
 8008170:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008174:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008178:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800817c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008184:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800818c:	2300      	movs	r3, #0
 800818e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008192:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008196:	460b      	mov	r3, r1
 8008198:	4313      	orrs	r3, r2
 800819a:	d055      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800819c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081a4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80081a8:	d033      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80081aa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80081ae:	d82c      	bhi.n	800820a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80081b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081b4:	d02f      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80081b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081ba:	d826      	bhi.n	800820a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80081bc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80081c0:	d02b      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80081c2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80081c6:	d820      	bhi.n	800820a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80081c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081cc:	d012      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80081ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081d2:	d81a      	bhi.n	800820a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d022      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80081d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081dc:	d115      	bne.n	800820a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e2:	3308      	adds	r3, #8
 80081e4:	2100      	movs	r1, #0
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 fcc0 	bl	8009b6c <RCCEx_PLL2_Config>
 80081ec:	4603      	mov	r3, r0
 80081ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80081f2:	e015      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f8:	3328      	adds	r3, #40	@ 0x28
 80081fa:	2102      	movs	r1, #2
 80081fc:	4618      	mov	r0, r3
 80081fe:	f001 fd67 	bl	8009cd0 <RCCEx_PLL3_Config>
 8008202:	4603      	mov	r3, r0
 8008204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008208:	e00a      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008210:	e006      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008212:	bf00      	nop
 8008214:	e004      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008216:	bf00      	nop
 8008218:	e002      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800821a:	bf00      	nop
 800821c:	e000      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800821e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10b      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008228:	4ba1      	ldr	r3, [pc, #644]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800822a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800822c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008234:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008238:	4a9d      	ldr	r2, [pc, #628]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800823a:	430b      	orrs	r3, r1
 800823c:	6593      	str	r3, [r2, #88]	@ 0x58
 800823e:	e003      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008244:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	f002 0308 	and.w	r3, r2, #8
 8008254:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008258:	2300      	movs	r3, #0
 800825a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800825e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008262:	460b      	mov	r3, r1
 8008264:	4313      	orrs	r3, r2
 8008266:	d01e      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008274:	d10c      	bne.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827a:	3328      	adds	r3, #40	@ 0x28
 800827c:	2102      	movs	r1, #2
 800827e:	4618      	mov	r0, r3
 8008280:	f001 fd26 	bl	8009cd0 <RCCEx_PLL3_Config>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008290:	4b87      	ldr	r3, [pc, #540]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008294:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082a0:	4a83      	ldr	r2, [pc, #524]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082a2:	430b      	orrs	r3, r1
 80082a4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	f002 0310 	and.w	r3, r2, #16
 80082b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80082b6:	2300      	movs	r3, #0
 80082b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80082bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80082c0:	460b      	mov	r3, r1
 80082c2:	4313      	orrs	r3, r2
 80082c4:	d01e      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80082c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80082ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082d2:	d10c      	bne.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d8:	3328      	adds	r3, #40	@ 0x28
 80082da:	2102      	movs	r1, #2
 80082dc:	4618      	mov	r0, r3
 80082de:	f001 fcf7 	bl	8009cd0 <RCCEx_PLL3_Config>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80082ee:	4b70      	ldr	r3, [pc, #448]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80082f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80082fe:	4a6c      	ldr	r2, [pc, #432]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008300:	430b      	orrs	r3, r1
 8008302:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008310:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008314:	2300      	movs	r3, #0
 8008316:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800831a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800831e:	460b      	mov	r3, r1
 8008320:	4313      	orrs	r3, r2
 8008322:	d03e      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008328:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800832c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008330:	d022      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008332:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008336:	d81b      	bhi.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008338:	2b00      	cmp	r3, #0
 800833a:	d003      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800833c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008340:	d00b      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008342:	e015      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008348:	3308      	adds	r3, #8
 800834a:	2100      	movs	r1, #0
 800834c:	4618      	mov	r0, r3
 800834e:	f001 fc0d 	bl	8009b6c <RCCEx_PLL2_Config>
 8008352:	4603      	mov	r3, r0
 8008354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008358:	e00f      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800835a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835e:	3328      	adds	r3, #40	@ 0x28
 8008360:	2102      	movs	r1, #2
 8008362:	4618      	mov	r0, r3
 8008364:	f001 fcb4 	bl	8009cd0 <RCCEx_PLL3_Config>
 8008368:	4603      	mov	r3, r0
 800836a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800836e:	e004      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008376:	e000      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800837a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10b      	bne.n	800839a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008382:	4b4b      	ldr	r3, [pc, #300]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008386:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800838a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008392:	4a47      	ldr	r2, [pc, #284]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008394:	430b      	orrs	r3, r1
 8008396:	6593      	str	r3, [r2, #88]	@ 0x58
 8008398:	e003      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800839a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800839e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80083a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083aa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80083ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083b0:	2300      	movs	r3, #0
 80083b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80083b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80083b8:	460b      	mov	r3, r1
 80083ba:	4313      	orrs	r3, r2
 80083bc:	d03b      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80083be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80083ca:	d01f      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80083cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80083d0:	d818      	bhi.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80083d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083d6:	d003      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80083d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083dc:	d007      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80083de:	e011      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083e0:	4b33      	ldr	r3, [pc, #204]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e4:	4a32      	ldr	r2, [pc, #200]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80083ec:	e00f      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f2:	3328      	adds	r3, #40	@ 0x28
 80083f4:	2101      	movs	r1, #1
 80083f6:	4618      	mov	r0, r3
 80083f8:	f001 fc6a 	bl	8009cd0 <RCCEx_PLL3_Config>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008402:	e004      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800840a:	e000      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800840c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800840e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10b      	bne.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008416:	4b26      	ldr	r3, [pc, #152]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800841a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800841e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008426:	4a22      	ldr	r2, [pc, #136]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008428:	430b      	orrs	r3, r1
 800842a:	6553      	str	r3, [r2, #84]	@ 0x54
 800842c:	e003      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800842e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008432:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008442:	673b      	str	r3, [r7, #112]	@ 0x70
 8008444:	2300      	movs	r3, #0
 8008446:	677b      	str	r3, [r7, #116]	@ 0x74
 8008448:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800844c:	460b      	mov	r3, r1
 800844e:	4313      	orrs	r3, r2
 8008450:	d034      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800845c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008460:	d007      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008462:	e011      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008464:	4b12      	ldr	r3, [pc, #72]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008468:	4a11      	ldr	r2, [pc, #68]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800846a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800846e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008470:	e00e      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008476:	3308      	adds	r3, #8
 8008478:	2102      	movs	r1, #2
 800847a:	4618      	mov	r0, r3
 800847c:	f001 fb76 	bl	8009b6c <RCCEx_PLL2_Config>
 8008480:	4603      	mov	r3, r0
 8008482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008486:	e003      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800848e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10d      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008498:	4b05      	ldr	r3, [pc, #20]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800849a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800849c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80084a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a6:	4a02      	ldr	r2, [pc, #8]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084a8:	430b      	orrs	r3, r1
 80084aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80084ac:	e006      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80084ae:	bf00      	nop
 80084b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80084bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80084c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084ca:	2300      	movs	r3, #0
 80084cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80084ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80084d2:	460b      	mov	r3, r1
 80084d4:	4313      	orrs	r3, r2
 80084d6:	d00c      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80084d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084dc:	3328      	adds	r3, #40	@ 0x28
 80084de:	2102      	movs	r1, #2
 80084e0:	4618      	mov	r0, r3
 80084e2:	f001 fbf5 	bl	8009cd0 <RCCEx_PLL3_Config>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80084f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80084fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8008500:	2300      	movs	r3, #0
 8008502:	667b      	str	r3, [r7, #100]	@ 0x64
 8008504:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008508:	460b      	mov	r3, r1
 800850a:	4313      	orrs	r3, r2
 800850c:	d038      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800850e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008516:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800851a:	d018      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800851c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008520:	d811      	bhi.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008522:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008526:	d014      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800852c:	d80b      	bhi.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800852e:	2b00      	cmp	r3, #0
 8008530:	d011      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008536:	d106      	bne.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008538:	4bc3      	ldr	r3, [pc, #780]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800853a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853c:	4ac2      	ldr	r2, [pc, #776]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800853e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008544:	e008      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800854c:	e004      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800854e:	bf00      	nop
 8008550:	e002      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008552:	bf00      	nop
 8008554:	e000      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008558:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10b      	bne.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008560:	4bb9      	ldr	r3, [pc, #740]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008564:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800856c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008570:	4ab5      	ldr	r2, [pc, #724]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008572:	430b      	orrs	r3, r1
 8008574:	6553      	str	r3, [r2, #84]	@ 0x54
 8008576:	e003      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800857c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800858c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800858e:	2300      	movs	r3, #0
 8008590:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008592:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008596:	460b      	mov	r3, r1
 8008598:	4313      	orrs	r3, r2
 800859a:	d009      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800859c:	4baa      	ldr	r3, [pc, #680]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800859e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80085a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085aa:	4aa7      	ldr	r2, [pc, #668]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085ac:	430b      	orrs	r3, r1
 80085ae:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80085b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80085bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80085be:	2300      	movs	r3, #0
 80085c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80085c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80085c6:	460b      	mov	r3, r1
 80085c8:	4313      	orrs	r3, r2
 80085ca:	d00a      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80085cc:	4b9e      	ldr	r3, [pc, #632]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80085d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80085dc:	4a9a      	ldr	r2, [pc, #616]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085de:	430b      	orrs	r3, r1
 80085e0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80085e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80085ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085f0:	2300      	movs	r3, #0
 80085f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085f4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80085f8:	460b      	mov	r3, r1
 80085fa:	4313      	orrs	r3, r2
 80085fc:	d009      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80085fe:	4b92      	ldr	r3, [pc, #584]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008602:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800860a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800860c:	4a8e      	ldr	r2, [pc, #568]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800860e:	430b      	orrs	r3, r1
 8008610:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800861e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008620:	2300      	movs	r3, #0
 8008622:	647b      	str	r3, [r7, #68]	@ 0x44
 8008624:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008628:	460b      	mov	r3, r1
 800862a:	4313      	orrs	r3, r2
 800862c:	d00e      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800862e:	4b86      	ldr	r3, [pc, #536]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	4a85      	ldr	r2, [pc, #532]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008634:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008638:	6113      	str	r3, [r2, #16]
 800863a:	4b83      	ldr	r3, [pc, #524]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800863c:	6919      	ldr	r1, [r3, #16]
 800863e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008642:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008646:	4a80      	ldr	r2, [pc, #512]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008648:	430b      	orrs	r3, r1
 800864a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800864c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008658:	63bb      	str	r3, [r7, #56]	@ 0x38
 800865a:	2300      	movs	r3, #0
 800865c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800865e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008662:	460b      	mov	r3, r1
 8008664:	4313      	orrs	r3, r2
 8008666:	d009      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008668:	4b77      	ldr	r3, [pc, #476]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800866a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800866c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008676:	4a74      	ldr	r2, [pc, #464]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008678:	430b      	orrs	r3, r1
 800867a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800867c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008684:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008688:	633b      	str	r3, [r7, #48]	@ 0x30
 800868a:	2300      	movs	r3, #0
 800868c:	637b      	str	r3, [r7, #52]	@ 0x34
 800868e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008692:	460b      	mov	r3, r1
 8008694:	4313      	orrs	r3, r2
 8008696:	d00a      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008698:	4b6b      	ldr	r3, [pc, #428]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800869a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800869c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80086a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086a8:	4a67      	ldr	r2, [pc, #412]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086aa:	430b      	orrs	r3, r1
 80086ac:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80086ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	2100      	movs	r1, #0
 80086b8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80086c4:	460b      	mov	r3, r1
 80086c6:	4313      	orrs	r3, r2
 80086c8:	d011      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ce:	3308      	adds	r3, #8
 80086d0:	2100      	movs	r1, #0
 80086d2:	4618      	mov	r0, r3
 80086d4:	f001 fa4a 	bl	8009b6c <RCCEx_PLL2_Config>
 80086d8:	4603      	mov	r3, r0
 80086da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80086de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d003      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80086ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	2100      	movs	r1, #0
 80086f8:	6239      	str	r1, [r7, #32]
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008700:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008704:	460b      	mov	r3, r1
 8008706:	4313      	orrs	r3, r2
 8008708:	d011      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800870a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800870e:	3308      	adds	r3, #8
 8008710:	2101      	movs	r1, #1
 8008712:	4618      	mov	r0, r3
 8008714:	f001 fa2a 	bl	8009b6c <RCCEx_PLL2_Config>
 8008718:	4603      	mov	r3, r0
 800871a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800871e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800872a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800872e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	2100      	movs	r1, #0
 8008738:	61b9      	str	r1, [r7, #24]
 800873a:	f003 0304 	and.w	r3, r3, #4
 800873e:	61fb      	str	r3, [r7, #28]
 8008740:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008744:	460b      	mov	r3, r1
 8008746:	4313      	orrs	r3, r2
 8008748:	d011      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800874a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800874e:	3308      	adds	r3, #8
 8008750:	2102      	movs	r1, #2
 8008752:	4618      	mov	r0, r3
 8008754:	f001 fa0a 	bl	8009b6c <RCCEx_PLL2_Config>
 8008758:	4603      	mov	r3, r0
 800875a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800875e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800876a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800876e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	2100      	movs	r1, #0
 8008778:	6139      	str	r1, [r7, #16]
 800877a:	f003 0308 	and.w	r3, r3, #8
 800877e:	617b      	str	r3, [r7, #20]
 8008780:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008784:	460b      	mov	r3, r1
 8008786:	4313      	orrs	r3, r2
 8008788:	d011      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800878a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800878e:	3328      	adds	r3, #40	@ 0x28
 8008790:	2100      	movs	r1, #0
 8008792:	4618      	mov	r0, r3
 8008794:	f001 fa9c 	bl	8009cd0 <RCCEx_PLL3_Config>
 8008798:	4603      	mov	r3, r0
 800879a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800879e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80087ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	2100      	movs	r1, #0
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	f003 0310 	and.w	r3, r3, #16
 80087be:	60fb      	str	r3, [r7, #12]
 80087c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80087c4:	460b      	mov	r3, r1
 80087c6:	4313      	orrs	r3, r2
 80087c8:	d011      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ce:	3328      	adds	r3, #40	@ 0x28
 80087d0:	2101      	movs	r1, #1
 80087d2:	4618      	mov	r0, r3
 80087d4:	f001 fa7c 	bl	8009cd0 <RCCEx_PLL3_Config>
 80087d8:	4603      	mov	r3, r0
 80087da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80087ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	2100      	movs	r1, #0
 80087f8:	6039      	str	r1, [r7, #0]
 80087fa:	f003 0320 	and.w	r3, r3, #32
 80087fe:	607b      	str	r3, [r7, #4]
 8008800:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008804:	460b      	mov	r3, r1
 8008806:	4313      	orrs	r3, r2
 8008808:	d011      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800880a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800880e:	3328      	adds	r3, #40	@ 0x28
 8008810:	2102      	movs	r1, #2
 8008812:	4618      	mov	r0, r3
 8008814:	f001 fa5c 	bl	8009cd0 <RCCEx_PLL3_Config>
 8008818:	4603      	mov	r3, r0
 800881a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800881e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008822:	2b00      	cmp	r3, #0
 8008824:	d003      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800882a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800882e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	e000      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
}
 800883c:	4618      	mov	r0, r3
 800883e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008842:	46bd      	mov	sp, r7
 8008844:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008848:	58024400 	.word	0x58024400

0800884c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b090      	sub	sp, #64	@ 0x40
 8008850:	af00      	add	r7, sp, #0
 8008852:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800885a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800885e:	430b      	orrs	r3, r1
 8008860:	f040 8094 	bne.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008864:	4b9e      	ldr	r3, [pc, #632]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008868:	f003 0307 	and.w	r3, r3, #7
 800886c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800886e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008870:	2b04      	cmp	r3, #4
 8008872:	f200 8087 	bhi.w	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008876:	a201      	add	r2, pc, #4	@ (adr r2, 800887c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887c:	08008891 	.word	0x08008891
 8008880:	080088b9 	.word	0x080088b9
 8008884:	080088e1 	.word	0x080088e1
 8008888:	0800897d 	.word	0x0800897d
 800888c:	08008909 	.word	0x08008909
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008890:	4b93      	ldr	r3, [pc, #588]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008898:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800889c:	d108      	bne.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800889e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088a2:	4618      	mov	r0, r3
 80088a4:	f001 f810 	bl	80098c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ac:	f000 bd45 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088b4:	f000 bd41 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088b8:	4b89      	ldr	r3, [pc, #548]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088c4:	d108      	bne.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088c6:	f107 0318 	add.w	r3, r7, #24
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 fd54 	bl	8009378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088d4:	f000 bd31 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088dc:	f000 bd2d 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088e0:	4b7f      	ldr	r3, [pc, #508]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088ec:	d108      	bne.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ee:	f107 030c 	add.w	r3, r7, #12
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 fe94 	bl	8009620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088fc:	f000 bd1d 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008904:	f000 bd19 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008908:	4b75      	ldr	r3, [pc, #468]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800890a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800890c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008910:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008912:	4b73      	ldr	r3, [pc, #460]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0304 	and.w	r3, r3, #4
 800891a:	2b04      	cmp	r3, #4
 800891c:	d10c      	bne.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800891e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008920:	2b00      	cmp	r3, #0
 8008922:	d109      	bne.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008924:	4b6e      	ldr	r3, [pc, #440]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	08db      	lsrs	r3, r3, #3
 800892a:	f003 0303 	and.w	r3, r3, #3
 800892e:	4a6d      	ldr	r2, [pc, #436]	@ (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008930:	fa22 f303 	lsr.w	r3, r2, r3
 8008934:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008936:	e01f      	b.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008938:	4b69      	ldr	r3, [pc, #420]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008940:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008944:	d106      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008948:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800894c:	d102      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800894e:	4b66      	ldr	r3, [pc, #408]	@ (8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008952:	e011      	b.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008954:	4b62      	ldr	r3, [pc, #392]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800895c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008960:	d106      	bne.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008968:	d102      	bne.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800896a:	4b60      	ldr	r3, [pc, #384]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800896c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800896e:	e003      	b.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008970:	2300      	movs	r3, #0
 8008972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008974:	f000 bce1 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008978:	f000 bcdf 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800897c:	4b5c      	ldr	r3, [pc, #368]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800897e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008980:	f000 bcdb 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008984:	2300      	movs	r3, #0
 8008986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008988:	f000 bcd7 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800898c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008990:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008994:	430b      	orrs	r3, r1
 8008996:	f040 80ad 	bne.w	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800899a:	4b51      	ldr	r3, [pc, #324]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800899c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800899e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80089a2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80089a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089aa:	d056      	beq.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80089ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089b2:	f200 8090 	bhi.w	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80089b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b8:	2bc0      	cmp	r3, #192	@ 0xc0
 80089ba:	f000 8088 	beq.w	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80089be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80089c2:	f200 8088 	bhi.w	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80089c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c8:	2b80      	cmp	r3, #128	@ 0x80
 80089ca:	d032      	beq.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80089cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ce:	2b80      	cmp	r3, #128	@ 0x80
 80089d0:	f200 8081 	bhi.w	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80089d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80089da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089dc:	2b40      	cmp	r3, #64	@ 0x40
 80089de:	d014      	beq.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80089e0:	e079      	b.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089e2:	4b3f      	ldr	r3, [pc, #252]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089ee:	d108      	bne.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 ff67 	bl	80098c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089fe:	f000 bc9c 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a02:	2300      	movs	r3, #0
 8008a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a06:	f000 bc98 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a0a:	4b35      	ldr	r3, [pc, #212]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a16:	d108      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a18:	f107 0318 	add.w	r3, r7, #24
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 fcab 	bl	8009378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a26:	f000 bc88 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a2e:	f000 bc84 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a32:	4b2b      	ldr	r3, [pc, #172]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a3e:	d108      	bne.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a40:	f107 030c 	add.w	r3, r7, #12
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 fdeb 	bl	8009620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a4e:	f000 bc74 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a52:	2300      	movs	r3, #0
 8008a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a56:	f000 bc70 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a5a:	4b21      	ldr	r3, [pc, #132]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a62:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a64:	4b1e      	ldr	r3, [pc, #120]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0304 	and.w	r3, r3, #4
 8008a6c:	2b04      	cmp	r3, #4
 8008a6e:	d10c      	bne.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d109      	bne.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a76:	4b1a      	ldr	r3, [pc, #104]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	08db      	lsrs	r3, r3, #3
 8008a7c:	f003 0303 	and.w	r3, r3, #3
 8008a80:	4a18      	ldr	r2, [pc, #96]	@ (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008a82:	fa22 f303 	lsr.w	r3, r2, r3
 8008a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a88:	e01f      	b.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a8a:	4b15      	ldr	r3, [pc, #84]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a96:	d106      	bne.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a9e:	d102      	bne.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008aa0:	4b11      	ldr	r3, [pc, #68]	@ (8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008aa4:	e011      	b.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ab2:	d106      	bne.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ab6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aba:	d102      	bne.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008abc:	4b0b      	ldr	r3, [pc, #44]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ac0:	e003      	b.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008ac6:	f000 bc38 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008aca:	f000 bc36 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ace:	4b08      	ldr	r3, [pc, #32]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ad2:	f000 bc32 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ada:	f000 bc2e 	b.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ade:	bf00      	nop
 8008ae0:	58024400 	.word	0x58024400
 8008ae4:	03d09000 	.word	0x03d09000
 8008ae8:	003d0900 	.word	0x003d0900
 8008aec:	007a1200 	.word	0x007a1200
 8008af0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008af8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008afc:	430b      	orrs	r3, r1
 8008afe:	f040 809c 	bne.w	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008b02:	4b9e      	ldr	r3, [pc, #632]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b06:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008b0a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b12:	d054      	beq.n	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b1a:	f200 808b 	bhi.w	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b20:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008b24:	f000 8083 	beq.w	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008b2e:	f200 8081 	bhi.w	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b38:	d02f      	beq.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b40:	d878      	bhi.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d004      	beq.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b4e:	d012      	beq.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008b50:	e070      	b.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b52:	4b8a      	ldr	r3, [pc, #552]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b5e:	d107      	bne.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b64:	4618      	mov	r0, r3
 8008b66:	f000 feaf 	bl	80098c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b6e:	e3e4      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b74:	e3e1      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b76:	4b81      	ldr	r3, [pc, #516]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b82:	d107      	bne.n	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b84:	f107 0318 	add.w	r3, r7, #24
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 fbf5 	bl	8009378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b92:	e3d2      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b98:	e3cf      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b9a:	4b78      	ldr	r3, [pc, #480]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ba2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ba6:	d107      	bne.n	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ba8:	f107 030c 	add.w	r3, r7, #12
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 fd37 	bl	8009620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bb6:	e3c0      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bbc:	e3bd      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bbe:	4b6f      	ldr	r3, [pc, #444]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008bc6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bc8:	4b6c      	ldr	r3, [pc, #432]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0304 	and.w	r3, r3, #4
 8008bd0:	2b04      	cmp	r3, #4
 8008bd2:	d10c      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d109      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bda:	4b68      	ldr	r3, [pc, #416]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	08db      	lsrs	r3, r3, #3
 8008be0:	f003 0303 	and.w	r3, r3, #3
 8008be4:	4a66      	ldr	r2, [pc, #408]	@ (8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008be6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bec:	e01e      	b.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bee:	4b63      	ldr	r3, [pc, #396]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bfa:	d106      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c02:	d102      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c04:	4b5f      	ldr	r3, [pc, #380]	@ (8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c08:	e010      	b.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c16:	d106      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c1e:	d102      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c20:	4b59      	ldr	r3, [pc, #356]	@ (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c24:	e002      	b.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c26:	2300      	movs	r3, #0
 8008c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c2a:	e386      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c2c:	e385      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c2e:	4b57      	ldr	r3, [pc, #348]	@ (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c32:	e382      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c38:	e37f      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c3e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008c42:	430b      	orrs	r3, r1
 8008c44:	f040 80a7 	bne.w	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008c48:	4b4c      	ldr	r3, [pc, #304]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c4c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008c50:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c58:	d055      	beq.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c60:	f200 8096 	bhi.w	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008c6a:	f000 8084 	beq.w	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008c74:	f200 808c 	bhi.w	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c7e:	d030      	beq.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c86:	f200 8083 	bhi.w	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d004      	beq.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c96:	d012      	beq.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008c98:	e07a      	b.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c9a:	4b38      	ldr	r3, [pc, #224]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ca2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ca6:	d107      	bne.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fe0b 	bl	80098c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cb6:	e340      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cbc:	e33d      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cca:	d107      	bne.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ccc:	f107 0318 	add.w	r3, r7, #24
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 fb51 	bl	8009378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cda:	e32e      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ce0:	e32b      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ce2:	4b26      	ldr	r3, [pc, #152]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cee:	d107      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cf0:	f107 030c 	add.w	r3, r7, #12
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 fc93 	bl	8009620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cfe:	e31c      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d00:	2300      	movs	r3, #0
 8008d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d04:	e319      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d06:	4b1d      	ldr	r3, [pc, #116]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d0e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d10:	4b1a      	ldr	r3, [pc, #104]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 0304 	and.w	r3, r3, #4
 8008d18:	2b04      	cmp	r3, #4
 8008d1a:	d10c      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d109      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d22:	4b16      	ldr	r3, [pc, #88]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	08db      	lsrs	r3, r3, #3
 8008d28:	f003 0303 	and.w	r3, r3, #3
 8008d2c:	4a14      	ldr	r2, [pc, #80]	@ (8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d34:	e01e      	b.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d36:	4b11      	ldr	r3, [pc, #68]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d42:	d106      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d4a:	d102      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d50:	e010      	b.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d52:	4b0a      	ldr	r3, [pc, #40]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d5e:	d106      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d66:	d102      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d68:	4b07      	ldr	r3, [pc, #28]	@ (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d6c:	e002      	b.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008d72:	e2e2      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d74:	e2e1      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d76:	4b05      	ldr	r3, [pc, #20]	@ (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d7a:	e2de      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d7c:	58024400 	.word	0x58024400
 8008d80:	03d09000 	.word	0x03d09000
 8008d84:	003d0900 	.word	0x003d0900
 8008d88:	007a1200 	.word	0x007a1200
 8008d8c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008d90:	2300      	movs	r3, #0
 8008d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d94:	e2d1      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d9a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008d9e:	430b      	orrs	r3, r1
 8008da0:	f040 809c 	bne.w	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008da4:	4b93      	ldr	r3, [pc, #588]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008da8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008dac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008db4:	d054      	beq.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008dbc:	f200 808b 	bhi.w	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008dc6:	f000 8083 	beq.w	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dcc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008dd0:	f200 8081 	bhi.w	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dda:	d02f      	beq.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008de2:	d878      	bhi.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d004      	beq.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008df0:	d012      	beq.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008df2:	e070      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008df4:	4b7f      	ldr	r3, [pc, #508]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e00:	d107      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 fd5e 	bl	80098c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e10:	e293      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e16:	e290      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e18:	4b76      	ldr	r3, [pc, #472]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e24:	d107      	bne.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e26:	f107 0318 	add.w	r3, r7, #24
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 faa4 	bl	8009378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e34:	e281      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e3a:	e27e      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e3c:	4b6d      	ldr	r3, [pc, #436]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e48:	d107      	bne.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e4a:	f107 030c 	add.w	r3, r7, #12
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 fbe6 	bl	8009620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e58:	e26f      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e5e:	e26c      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e60:	4b64      	ldr	r3, [pc, #400]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008e68:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e6a:	4b62      	ldr	r3, [pc, #392]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 0304 	and.w	r3, r3, #4
 8008e72:	2b04      	cmp	r3, #4
 8008e74:	d10c      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d109      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e7c:	4b5d      	ldr	r3, [pc, #372]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	08db      	lsrs	r3, r3, #3
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	4a5c      	ldr	r2, [pc, #368]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008e88:	fa22 f303 	lsr.w	r3, r2, r3
 8008e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e8e:	e01e      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e90:	4b58      	ldr	r3, [pc, #352]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e9c:	d106      	bne.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ea4:	d102      	bne.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ea6:	4b55      	ldr	r3, [pc, #340]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008eaa:	e010      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008eac:	4b51      	ldr	r3, [pc, #324]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008eb8:	d106      	bne.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ebc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ec0:	d102      	bne.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ec2:	4b4f      	ldr	r3, [pc, #316]	@ (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ec6:	e002      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008ecc:	e235      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ece:	e234      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ed0:	4b4c      	ldr	r3, [pc, #304]	@ (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ed4:	e231      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eda:	e22e      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ee0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008ee4:	430b      	orrs	r3, r1
 8008ee6:	f040 808f 	bne.w	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008eea:	4b42      	ldr	r3, [pc, #264]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eee:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008efa:	d06b      	beq.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f02:	d874      	bhi.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f0a:	d056      	beq.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f12:	d86c      	bhi.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f1a:	d03b      	beq.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f22:	d864      	bhi.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f2a:	d021      	beq.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f32:	d85c      	bhi.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d004      	beq.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f40:	d004      	beq.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008f42:	e054      	b.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008f44:	f7fe fa4c 	bl	80073e0 <HAL_RCC_GetPCLK1Freq>
 8008f48:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f4a:	e1f6      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f4c:	4b29      	ldr	r3, [pc, #164]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f58:	d107      	bne.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f5a:	f107 0318 	add.w	r3, r7, #24
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 fa0a 	bl	8009378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f68:	e1e7      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f6e:	e1e4      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f70:	4b20      	ldr	r3, [pc, #128]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f7c:	d107      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f7e:	f107 030c 	add.w	r3, r7, #12
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 fb4c 	bl	8009620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f8c:	e1d5      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f92:	e1d2      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f94:	4b17      	ldr	r3, [pc, #92]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0304 	and.w	r3, r3, #4
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d109      	bne.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fa0:	4b14      	ldr	r3, [pc, #80]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	08db      	lsrs	r3, r3, #3
 8008fa6:	f003 0303 	and.w	r3, r3, #3
 8008faa:	4a13      	ldr	r2, [pc, #76]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008fac:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fb2:	e1c2      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fb8:	e1bf      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008fba:	4b0e      	ldr	r3, [pc, #56]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fc6:	d102      	bne.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fcc:	e1b5      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fd2:	e1b2      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008fd4:	4b07      	ldr	r3, [pc, #28]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fe0:	d102      	bne.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008fe2:	4b07      	ldr	r3, [pc, #28]	@ (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fe6:	e1a8      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fec:	e1a5      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff2:	e1a2      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ff4:	58024400 	.word	0x58024400
 8008ff8:	03d09000 	.word	0x03d09000
 8008ffc:	003d0900 	.word	0x003d0900
 8009000:	007a1200 	.word	0x007a1200
 8009004:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800900c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009010:	430b      	orrs	r3, r1
 8009012:	d173      	bne.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009014:	4b9c      	ldr	r3, [pc, #624]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009018:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800901c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800901e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009020:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009024:	d02f      	beq.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009028:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800902c:	d863      	bhi.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800902e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009030:	2b00      	cmp	r3, #0
 8009032:	d004      	beq.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800903a:	d012      	beq.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800903c:	e05b      	b.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800903e:	4b92      	ldr	r3, [pc, #584]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009046:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800904a:	d107      	bne.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800904c:	f107 0318 	add.w	r3, r7, #24
 8009050:	4618      	mov	r0, r3
 8009052:	f000 f991 	bl	8009378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800905a:	e16e      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800905c:	2300      	movs	r3, #0
 800905e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009060:	e16b      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009062:	4b89      	ldr	r3, [pc, #548]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800906a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800906e:	d107      	bne.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009070:	f107 030c 	add.w	r3, r7, #12
 8009074:	4618      	mov	r0, r3
 8009076:	f000 fad3 	bl	8009620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800907e:	e15c      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009084:	e159      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009086:	4b80      	ldr	r3, [pc, #512]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800908a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800908e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009090:	4b7d      	ldr	r3, [pc, #500]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0304 	and.w	r3, r3, #4
 8009098:	2b04      	cmp	r3, #4
 800909a:	d10c      	bne.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800909c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d109      	bne.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090a2:	4b79      	ldr	r3, [pc, #484]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	08db      	lsrs	r3, r3, #3
 80090a8:	f003 0303 	and.w	r3, r3, #3
 80090ac:	4a77      	ldr	r2, [pc, #476]	@ (800928c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80090ae:	fa22 f303 	lsr.w	r3, r2, r3
 80090b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090b4:	e01e      	b.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090b6:	4b74      	ldr	r3, [pc, #464]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090c2:	d106      	bne.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80090c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090ca:	d102      	bne.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80090cc:	4b70      	ldr	r3, [pc, #448]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80090ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090d0:	e010      	b.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090d2:	4b6d      	ldr	r3, [pc, #436]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090de:	d106      	bne.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80090e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090e6:	d102      	bne.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80090e8:	4b6a      	ldr	r3, [pc, #424]	@ (8009294 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80090ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090ec:	e002      	b.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80090f2:	e122      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090f4:	e121      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090fa:	e11e      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80090fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009100:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009104:	430b      	orrs	r3, r1
 8009106:	d133      	bne.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009108:	4b5f      	ldr	r3, [pc, #380]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800910a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800910c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009110:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009114:	2b00      	cmp	r3, #0
 8009116:	d004      	beq.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800911a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800911e:	d012      	beq.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009120:	e023      	b.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009122:	4b59      	ldr	r3, [pc, #356]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800912a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800912e:	d107      	bne.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009130:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009134:	4618      	mov	r0, r3
 8009136:	f000 fbc7 	bl	80098c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800913a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800913e:	e0fc      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009140:	2300      	movs	r3, #0
 8009142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009144:	e0f9      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009146:	4b50      	ldr	r3, [pc, #320]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800914e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009152:	d107      	bne.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009154:	f107 0318 	add.w	r3, r7, #24
 8009158:	4618      	mov	r0, r3
 800915a:	f000 f90d 	bl	8009378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009162:	e0ea      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009164:	2300      	movs	r3, #0
 8009166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009168:	e0e7      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800916e:	e0e4      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009174:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009178:	430b      	orrs	r3, r1
 800917a:	f040 808d 	bne.w	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800917e:	4b42      	ldr	r3, [pc, #264]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009182:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009186:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800918e:	d06b      	beq.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009192:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009196:	d874      	bhi.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800919e:	d056      	beq.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80091a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091a6:	d86c      	bhi.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80091a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80091ae:	d03b      	beq.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80091b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80091b6:	d864      	bhi.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80091b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091be:	d021      	beq.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80091c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091c6:	d85c      	bhi.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80091c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d004      	beq.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80091ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091d4:	d004      	beq.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80091d6:	e054      	b.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80091d8:	f000 f8b8 	bl	800934c <HAL_RCCEx_GetD3PCLK1Freq>
 80091dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091de:	e0ac      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091e0:	4b29      	ldr	r3, [pc, #164]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091ec:	d107      	bne.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ee:	f107 0318 	add.w	r3, r7, #24
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 f8c0 	bl	8009378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091fc:	e09d      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091fe:	2300      	movs	r3, #0
 8009200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009202:	e09a      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009204:	4b20      	ldr	r3, [pc, #128]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800920c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009210:	d107      	bne.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009212:	f107 030c 	add.w	r3, r7, #12
 8009216:	4618      	mov	r0, r3
 8009218:	f000 fa02 	bl	8009620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009220:	e08b      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009226:	e088      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009228:	4b17      	ldr	r3, [pc, #92]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 0304 	and.w	r3, r3, #4
 8009230:	2b04      	cmp	r3, #4
 8009232:	d109      	bne.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009234:	4b14      	ldr	r3, [pc, #80]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	08db      	lsrs	r3, r3, #3
 800923a:	f003 0303 	and.w	r3, r3, #3
 800923e:	4a13      	ldr	r2, [pc, #76]	@ (800928c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009240:	fa22 f303 	lsr.w	r3, r2, r3
 8009244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009246:	e078      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800924c:	e075      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800924e:	4b0e      	ldr	r3, [pc, #56]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800925a:	d102      	bne.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800925c:	4b0c      	ldr	r3, [pc, #48]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800925e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009260:	e06b      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009262:	2300      	movs	r3, #0
 8009264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009266:	e068      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009268:	4b07      	ldr	r3, [pc, #28]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009270:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009274:	d102      	bne.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009276:	4b07      	ldr	r3, [pc, #28]	@ (8009294 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800927a:	e05e      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009280:	e05b      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009286:	e058      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009288:	58024400 	.word	0x58024400
 800928c:	03d09000 	.word	0x03d09000
 8009290:	003d0900 	.word	0x003d0900
 8009294:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800929c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80092a0:	430b      	orrs	r3, r1
 80092a2:	d148      	bne.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80092a4:	4b27      	ldr	r3, [pc, #156]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80092a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80092ac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80092ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092b4:	d02a      	beq.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80092b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092bc:	d838      	bhi.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80092be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d004      	beq.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80092c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092ca:	d00d      	beq.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80092cc:	e030      	b.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80092ce:	4b1d      	ldr	r3, [pc, #116]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092da:	d102      	bne.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80092dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009348 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80092de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092e0:	e02b      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092e2:	2300      	movs	r3, #0
 80092e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092e6:	e028      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092e8:	4b16      	ldr	r3, [pc, #88]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092f4:	d107      	bne.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 fae4 	bl	80098c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009304:	e019      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009306:	2300      	movs	r3, #0
 8009308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800930a:	e016      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800930c:	4b0d      	ldr	r3, [pc, #52]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009314:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009318:	d107      	bne.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800931a:	f107 0318 	add.w	r3, r7, #24
 800931e:	4618      	mov	r0, r3
 8009320:	f000 f82a 	bl	8009378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009328:	e007      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800932e:	e004      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009330:	2300      	movs	r3, #0
 8009332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009334:	e001      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800933a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800933c:	4618      	mov	r0, r3
 800933e:	3740      	adds	r7, #64	@ 0x40
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	58024400 	.word	0x58024400
 8009348:	007a1200 	.word	0x007a1200

0800934c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009350:	f7fe f816 	bl	8007380 <HAL_RCC_GetHCLKFreq>
 8009354:	4602      	mov	r2, r0
 8009356:	4b06      	ldr	r3, [pc, #24]	@ (8009370 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009358:	6a1b      	ldr	r3, [r3, #32]
 800935a:	091b      	lsrs	r3, r3, #4
 800935c:	f003 0307 	and.w	r3, r3, #7
 8009360:	4904      	ldr	r1, [pc, #16]	@ (8009374 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009362:	5ccb      	ldrb	r3, [r1, r3]
 8009364:	f003 031f 	and.w	r3, r3, #31
 8009368:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800936c:	4618      	mov	r0, r3
 800936e:	bd80      	pop	{r7, pc}
 8009370:	58024400 	.word	0x58024400
 8009374:	0800e368 	.word	0x0800e368

08009378 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009378:	b480      	push	{r7}
 800937a:	b089      	sub	sp, #36	@ 0x24
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009380:	4ba1      	ldr	r3, [pc, #644]	@ (8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009384:	f003 0303 	and.w	r3, r3, #3
 8009388:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800938a:	4b9f      	ldr	r3, [pc, #636]	@ (8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800938c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938e:	0b1b      	lsrs	r3, r3, #12
 8009390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009394:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009396:	4b9c      	ldr	r3, [pc, #624]	@ (8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800939a:	091b      	lsrs	r3, r3, #4
 800939c:	f003 0301 	and.w	r3, r3, #1
 80093a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80093a2:	4b99      	ldr	r3, [pc, #612]	@ (8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093a6:	08db      	lsrs	r3, r3, #3
 80093a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	fb02 f303 	mul.w	r3, r2, r3
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 8111 	beq.w	80095e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	f000 8083 	beq.w	80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	f200 80a1 	bhi.w	8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d003      	beq.n	80093e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d056      	beq.n	8009490 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80093e2:	e099      	b.n	8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093e4:	4b88      	ldr	r3, [pc, #544]	@ (8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 0320 	and.w	r3, r3, #32
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d02d      	beq.n	800944c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093f0:	4b85      	ldr	r3, [pc, #532]	@ (8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	08db      	lsrs	r3, r3, #3
 80093f6:	f003 0303 	and.w	r3, r3, #3
 80093fa:	4a84      	ldr	r2, [pc, #528]	@ (800960c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80093fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009400:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	ee07 3a90 	vmov	s15, r3
 8009408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800941a:	4b7b      	ldr	r3, [pc, #492]	@ (8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800941c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800941e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009422:	ee07 3a90 	vmov	s15, r3
 8009426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800942a:	ed97 6a03 	vldr	s12, [r7, #12]
 800942e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009610 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800943a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800943e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009446:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800944a:	e087      	b.n	800955c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	ee07 3a90 	vmov	s15, r3
 8009452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009456:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009614 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800945a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800945e:	4b6a      	ldr	r3, [pc, #424]	@ (8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009466:	ee07 3a90 	vmov	s15, r3
 800946a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800946e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009472:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009610 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800947a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800947e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800948a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800948e:	e065      	b.n	800955c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	ee07 3a90 	vmov	s15, r3
 8009496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800949e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094a2:	4b59      	ldr	r3, [pc, #356]	@ (8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094aa:	ee07 3a90 	vmov	s15, r3
 80094ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80094b6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009610 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094d2:	e043      	b.n	800955c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	ee07 3a90 	vmov	s15, r3
 80094da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094de:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800961c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80094e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094e6:	4b48      	ldr	r3, [pc, #288]	@ (8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ee:	ee07 3a90 	vmov	s15, r3
 80094f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094fa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009610 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800950a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800950e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009516:	e021      	b.n	800955c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	ee07 3a90 	vmov	s15, r3
 800951e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009522:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800952a:	4b37      	ldr	r3, [pc, #220]	@ (8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800952c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800952e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009532:	ee07 3a90 	vmov	s15, r3
 8009536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800953a:	ed97 6a03 	vldr	s12, [r7, #12]
 800953e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009610 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800954a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800954e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800955a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800955c:	4b2a      	ldr	r3, [pc, #168]	@ (8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800955e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009560:	0a5b      	lsrs	r3, r3, #9
 8009562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009566:	ee07 3a90 	vmov	s15, r3
 800956a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009572:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009576:	edd7 6a07 	vldr	s13, [r7, #28]
 800957a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800957e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009582:	ee17 2a90 	vmov	r2, s15
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800958a:	4b1f      	ldr	r3, [pc, #124]	@ (8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800958c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800958e:	0c1b      	lsrs	r3, r3, #16
 8009590:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009594:	ee07 3a90 	vmov	s15, r3
 8009598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800959c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80095a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095b0:	ee17 2a90 	vmov	r2, s15
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80095b8:	4b13      	ldr	r3, [pc, #76]	@ (8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095bc:	0e1b      	lsrs	r3, r3, #24
 80095be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095c2:	ee07 3a90 	vmov	s15, r3
 80095c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80095d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095de:	ee17 2a90 	vmov	r2, s15
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80095e6:	e008      	b.n	80095fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	609a      	str	r2, [r3, #8]
}
 80095fa:	bf00      	nop
 80095fc:	3724      	adds	r7, #36	@ 0x24
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	58024400 	.word	0x58024400
 800960c:	03d09000 	.word	0x03d09000
 8009610:	46000000 	.word	0x46000000
 8009614:	4c742400 	.word	0x4c742400
 8009618:	4a742400 	.word	0x4a742400
 800961c:	4af42400 	.word	0x4af42400

08009620 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009620:	b480      	push	{r7}
 8009622:	b089      	sub	sp, #36	@ 0x24
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009628:	4ba1      	ldr	r3, [pc, #644]	@ (80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800962a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800962c:	f003 0303 	and.w	r3, r3, #3
 8009630:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009632:	4b9f      	ldr	r3, [pc, #636]	@ (80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009636:	0d1b      	lsrs	r3, r3, #20
 8009638:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800963c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800963e:	4b9c      	ldr	r3, [pc, #624]	@ (80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009642:	0a1b      	lsrs	r3, r3, #8
 8009644:	f003 0301 	and.w	r3, r3, #1
 8009648:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800964a:	4b99      	ldr	r3, [pc, #612]	@ (80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800964c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800964e:	08db      	lsrs	r3, r3, #3
 8009650:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	fb02 f303 	mul.w	r3, r2, r3
 800965a:	ee07 3a90 	vmov	s15, r3
 800965e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009662:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 8111 	beq.w	8009890 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	2b02      	cmp	r3, #2
 8009672:	f000 8083 	beq.w	800977c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	2b02      	cmp	r3, #2
 800967a:	f200 80a1 	bhi.w	80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d003      	beq.n	800968c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d056      	beq.n	8009738 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800968a:	e099      	b.n	80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800968c:	4b88      	ldr	r3, [pc, #544]	@ (80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 0320 	and.w	r3, r3, #32
 8009694:	2b00      	cmp	r3, #0
 8009696:	d02d      	beq.n	80096f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009698:	4b85      	ldr	r3, [pc, #532]	@ (80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	08db      	lsrs	r3, r3, #3
 800969e:	f003 0303 	and.w	r3, r3, #3
 80096a2:	4a84      	ldr	r2, [pc, #528]	@ (80098b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80096a4:	fa22 f303 	lsr.w	r3, r2, r3
 80096a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	ee07 3a90 	vmov	s15, r3
 80096b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	ee07 3a90 	vmov	s15, r3
 80096ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096c2:	4b7b      	ldr	r3, [pc, #492]	@ (80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ca:	ee07 3a90 	vmov	s15, r3
 80096ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80098b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80096f2:	e087      	b.n	8009804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	ee07 3a90 	vmov	s15, r3
 80096fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80098bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009706:	4b6a      	ldr	r3, [pc, #424]	@ (80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800970a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800970e:	ee07 3a90 	vmov	s15, r3
 8009712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009716:	ed97 6a03 	vldr	s12, [r7, #12]
 800971a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80098b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800971e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800972a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800972e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009736:	e065      	b.n	8009804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	ee07 3a90 	vmov	s15, r3
 800973e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009742:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80098c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800974a:	4b59      	ldr	r3, [pc, #356]	@ (80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800974c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800974e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009752:	ee07 3a90 	vmov	s15, r3
 8009756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800975a:	ed97 6a03 	vldr	s12, [r7, #12]
 800975e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80098b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800976a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800976e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800977a:	e043      	b.n	8009804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	ee07 3a90 	vmov	s15, r3
 8009782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009786:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80098c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800978a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800978e:	4b48      	ldr	r3, [pc, #288]	@ (80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009796:	ee07 3a90 	vmov	s15, r3
 800979a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800979e:	ed97 6a03 	vldr	s12, [r7, #12]
 80097a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80098b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097be:	e021      	b.n	8009804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	ee07 3a90 	vmov	s15, r3
 80097c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80098c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80097ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097d2:	4b37      	ldr	r3, [pc, #220]	@ (80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097da:	ee07 3a90 	vmov	s15, r3
 80097de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80097e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80098b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009802:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009804:	4b2a      	ldr	r3, [pc, #168]	@ (80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009808:	0a5b      	lsrs	r3, r3, #9
 800980a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800980e:	ee07 3a90 	vmov	s15, r3
 8009812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009816:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800981a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800981e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800982a:	ee17 2a90 	vmov	r2, s15
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009832:	4b1f      	ldr	r3, [pc, #124]	@ (80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009836:	0c1b      	lsrs	r3, r3, #16
 8009838:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800983c:	ee07 3a90 	vmov	s15, r3
 8009840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009844:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009848:	ee37 7a87 	vadd.f32	s14, s15, s14
 800984c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009858:	ee17 2a90 	vmov	r2, s15
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009860:	4b13      	ldr	r3, [pc, #76]	@ (80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009864:	0e1b      	lsrs	r3, r3, #24
 8009866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800986a:	ee07 3a90 	vmov	s15, r3
 800986e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009872:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800987a:	edd7 6a07 	vldr	s13, [r7, #28]
 800987e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009886:	ee17 2a90 	vmov	r2, s15
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800988e:	e008      	b.n	80098a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	609a      	str	r2, [r3, #8]
}
 80098a2:	bf00      	nop
 80098a4:	3724      	adds	r7, #36	@ 0x24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	58024400 	.word	0x58024400
 80098b4:	03d09000 	.word	0x03d09000
 80098b8:	46000000 	.word	0x46000000
 80098bc:	4c742400 	.word	0x4c742400
 80098c0:	4a742400 	.word	0x4a742400
 80098c4:	4af42400 	.word	0x4af42400

080098c8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b089      	sub	sp, #36	@ 0x24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098d0:	4ba0      	ldr	r3, [pc, #640]	@ (8009b54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d4:	f003 0303 	and.w	r3, r3, #3
 80098d8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80098da:	4b9e      	ldr	r3, [pc, #632]	@ (8009b54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098de:	091b      	lsrs	r3, r3, #4
 80098e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80098e4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80098e6:	4b9b      	ldr	r3, [pc, #620]	@ (8009b54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80098f0:	4b98      	ldr	r3, [pc, #608]	@ (8009b54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098f4:	08db      	lsrs	r3, r3, #3
 80098f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	fb02 f303 	mul.w	r3, r2, r3
 8009900:	ee07 3a90 	vmov	s15, r3
 8009904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009908:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	2b00      	cmp	r3, #0
 8009910:	f000 8111 	beq.w	8009b36 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	2b02      	cmp	r3, #2
 8009918:	f000 8083 	beq.w	8009a22 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	2b02      	cmp	r3, #2
 8009920:	f200 80a1 	bhi.w	8009a66 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d003      	beq.n	8009932 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d056      	beq.n	80099de <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009930:	e099      	b.n	8009a66 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009932:	4b88      	ldr	r3, [pc, #544]	@ (8009b54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0320 	and.w	r3, r3, #32
 800993a:	2b00      	cmp	r3, #0
 800993c:	d02d      	beq.n	800999a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800993e:	4b85      	ldr	r3, [pc, #532]	@ (8009b54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	08db      	lsrs	r3, r3, #3
 8009944:	f003 0303 	and.w	r3, r3, #3
 8009948:	4a83      	ldr	r2, [pc, #524]	@ (8009b58 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800994a:	fa22 f303 	lsr.w	r3, r2, r3
 800994e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	ee07 3a90 	vmov	s15, r3
 8009960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009964:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009968:	4b7a      	ldr	r3, [pc, #488]	@ (8009b54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800996a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800996c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009970:	ee07 3a90 	vmov	s15, r3
 8009974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009978:	ed97 6a03 	vldr	s12, [r7, #12]
 800997c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009b5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009980:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009984:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009988:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800998c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009994:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009998:	e087      	b.n	8009aaa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	ee07 3a90 	vmov	s15, r3
 80099a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009b60 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80099a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ac:	4b69      	ldr	r3, [pc, #420]	@ (8009b54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099b4:	ee07 3a90 	vmov	s15, r3
 80099b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80099c0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009b5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80099c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099dc:	e065      	b.n	8009aaa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	ee07 3a90 	vmov	s15, r3
 80099e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009b64 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80099ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099f0:	4b58      	ldr	r3, [pc, #352]	@ (8009b54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f8:	ee07 3a90 	vmov	s15, r3
 80099fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a00:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a04:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009b5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a20:	e043      	b.n	8009aaa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	ee07 3a90 	vmov	s15, r3
 8009a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009a30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a34:	4b47      	ldr	r3, [pc, #284]	@ (8009b54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a3c:	ee07 3a90 	vmov	s15, r3
 8009a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a44:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a48:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009b5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a64:	e021      	b.n	8009aaa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	ee07 3a90 	vmov	s15, r3
 8009a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a70:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009b60 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009a74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a78:	4b36      	ldr	r3, [pc, #216]	@ (8009b54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a80:	ee07 3a90 	vmov	s15, r3
 8009a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a88:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a8c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009b5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009aa8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8009b54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aae:	0a5b      	lsrs	r3, r3, #9
 8009ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ab4:	ee07 3a90 	vmov	s15, r3
 8009ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009abc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ac4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ad0:	ee17 2a90 	vmov	r2, s15
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8009b54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009adc:	0c1b      	lsrs	r3, r3, #16
 8009ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ae2:	ee07 3a90 	vmov	s15, r3
 8009ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009afe:	ee17 2a90 	vmov	r2, s15
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009b06:	4b13      	ldr	r3, [pc, #76]	@ (8009b54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b0a:	0e1b      	lsrs	r3, r3, #24
 8009b0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b10:	ee07 3a90 	vmov	s15, r3
 8009b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b20:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b2c:	ee17 2a90 	vmov	r2, s15
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009b34:	e008      	b.n	8009b48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	609a      	str	r2, [r3, #8]
}
 8009b48:	bf00      	nop
 8009b4a:	3724      	adds	r7, #36	@ 0x24
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr
 8009b54:	58024400 	.word	0x58024400
 8009b58:	03d09000 	.word	0x03d09000
 8009b5c:	46000000 	.word	0x46000000
 8009b60:	4c742400 	.word	0x4c742400
 8009b64:	4a742400 	.word	0x4a742400
 8009b68:	4af42400 	.word	0x4af42400

08009b6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b7a:	4b53      	ldr	r3, [pc, #332]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b7e:	f003 0303 	and.w	r3, r3, #3
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	d101      	bne.n	8009b8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e099      	b.n	8009cbe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009b8a:	4b4f      	ldr	r3, [pc, #316]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a4e      	ldr	r2, [pc, #312]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009b90:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b96:	f7f7 ff71 	bl	8001a7c <HAL_GetTick>
 8009b9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b9c:	e008      	b.n	8009bb0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b9e:	f7f7 ff6d 	bl	8001a7c <HAL_GetTick>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d901      	bls.n	8009bb0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bac:	2303      	movs	r3, #3
 8009bae:	e086      	b.n	8009cbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009bb0:	4b45      	ldr	r3, [pc, #276]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1f0      	bne.n	8009b9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009bbc:	4b42      	ldr	r3, [pc, #264]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	031b      	lsls	r3, r3, #12
 8009bca:	493f      	ldr	r1, [pc, #252]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	628b      	str	r3, [r1, #40]	@ 0x28
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	3b01      	subs	r3, #1
 8009be0:	025b      	lsls	r3, r3, #9
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	431a      	orrs	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	3b01      	subs	r3, #1
 8009bec:	041b      	lsls	r3, r3, #16
 8009bee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009bf2:	431a      	orrs	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	061b      	lsls	r3, r3, #24
 8009bfc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009c00:	4931      	ldr	r1, [pc, #196]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c02:	4313      	orrs	r3, r2
 8009c04:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009c06:	4b30      	ldr	r3, [pc, #192]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	492d      	ldr	r1, [pc, #180]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c14:	4313      	orrs	r3, r2
 8009c16:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009c18:	4b2b      	ldr	r3, [pc, #172]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c1c:	f023 0220 	bic.w	r2, r3, #32
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	4928      	ldr	r1, [pc, #160]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009c2a:	4b27      	ldr	r3, [pc, #156]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c2e:	4a26      	ldr	r2, [pc, #152]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c30:	f023 0310 	bic.w	r3, r3, #16
 8009c34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009c36:	4b24      	ldr	r3, [pc, #144]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c3a:	4b24      	ldr	r3, [pc, #144]	@ (8009ccc <RCCEx_PLL2_Config+0x160>)
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	69d2      	ldr	r2, [r2, #28]
 8009c42:	00d2      	lsls	r2, r2, #3
 8009c44:	4920      	ldr	r1, [pc, #128]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c50:	f043 0310 	orr.w	r3, r3, #16
 8009c54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d106      	bne.n	8009c6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c60:	4a19      	ldr	r2, [pc, #100]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009c68:	e00f      	b.n	8009c8a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d106      	bne.n	8009c7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009c70:	4b15      	ldr	r3, [pc, #84]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c74:	4a14      	ldr	r2, [pc, #80]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009c7c:	e005      	b.n	8009c8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009c7e:	4b12      	ldr	r3, [pc, #72]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c82:	4a11      	ldr	r2, [pc, #68]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009c88:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009c90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009c94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c96:	f7f7 fef1 	bl	8001a7c <HAL_GetTick>
 8009c9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c9c:	e008      	b.n	8009cb0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009c9e:	f7f7 feed 	bl	8001a7c <HAL_GetTick>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d901      	bls.n	8009cb0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e006      	b.n	8009cbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009cb0:	4b05      	ldr	r3, [pc, #20]	@ (8009cc8 <RCCEx_PLL2_Config+0x15c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d0f0      	beq.n	8009c9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	58024400 	.word	0x58024400
 8009ccc:	ffff0007 	.word	0xffff0007

08009cd0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009cde:	4b53      	ldr	r3, [pc, #332]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ce2:	f003 0303 	and.w	r3, r3, #3
 8009ce6:	2b03      	cmp	r3, #3
 8009ce8:	d101      	bne.n	8009cee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	e099      	b.n	8009e22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009cee:	4b4f      	ldr	r3, [pc, #316]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a4e      	ldr	r2, [pc, #312]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009cf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cfa:	f7f7 febf 	bl	8001a7c <HAL_GetTick>
 8009cfe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d00:	e008      	b.n	8009d14 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d02:	f7f7 febb 	bl	8001a7c <HAL_GetTick>
 8009d06:	4602      	mov	r2, r0
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	1ad3      	subs	r3, r2, r3
 8009d0c:	2b02      	cmp	r3, #2
 8009d0e:	d901      	bls.n	8009d14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d10:	2303      	movs	r3, #3
 8009d12:	e086      	b.n	8009e22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d14:	4b45      	ldr	r3, [pc, #276]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1f0      	bne.n	8009d02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009d20:	4b42      	ldr	r3, [pc, #264]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d24:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	051b      	lsls	r3, r3, #20
 8009d2e:	493f      	ldr	r1, [pc, #252]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009d30:	4313      	orrs	r3, r2
 8009d32:	628b      	str	r3, [r1, #40]	@ 0x28
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	3b01      	subs	r3, #1
 8009d44:	025b      	lsls	r3, r3, #9
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	431a      	orrs	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	041b      	lsls	r3, r3, #16
 8009d52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009d56:	431a      	orrs	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	061b      	lsls	r3, r3, #24
 8009d60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009d64:	4931      	ldr	r1, [pc, #196]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009d66:	4313      	orrs	r3, r2
 8009d68:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009d6a:	4b30      	ldr	r3, [pc, #192]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	695b      	ldr	r3, [r3, #20]
 8009d76:	492d      	ldr	r1, [pc, #180]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d80:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	4928      	ldr	r1, [pc, #160]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009d8e:	4b27      	ldr	r3, [pc, #156]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d92:	4a26      	ldr	r2, [pc, #152]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009d94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009d9a:	4b24      	ldr	r3, [pc, #144]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009d9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d9e:	4b24      	ldr	r3, [pc, #144]	@ (8009e30 <RCCEx_PLL3_Config+0x160>)
 8009da0:	4013      	ands	r3, r2
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	69d2      	ldr	r2, [r2, #28]
 8009da6:	00d2      	lsls	r2, r2, #3
 8009da8:	4920      	ldr	r1, [pc, #128]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009daa:	4313      	orrs	r3, r2
 8009dac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009dae:	4b1f      	ldr	r3, [pc, #124]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009db2:	4a1e      	ldr	r2, [pc, #120]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009db8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d106      	bne.n	8009dce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc4:	4a19      	ldr	r2, [pc, #100]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009dc6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009dca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009dcc:	e00f      	b.n	8009dee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d106      	bne.n	8009de2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009dd4:	4b15      	ldr	r3, [pc, #84]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dd8:	4a14      	ldr	r2, [pc, #80]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009dda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009dde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009de0:	e005      	b.n	8009dee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009de2:	4b12      	ldr	r3, [pc, #72]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de6:	4a11      	ldr	r2, [pc, #68]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009de8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009dec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009dee:	4b0f      	ldr	r3, [pc, #60]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a0e      	ldr	r2, [pc, #56]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dfa:	f7f7 fe3f 	bl	8001a7c <HAL_GetTick>
 8009dfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e00:	e008      	b.n	8009e14 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009e02:	f7f7 fe3b 	bl	8001a7c <HAL_GetTick>
 8009e06:	4602      	mov	r2, r0
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d901      	bls.n	8009e14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e10:	2303      	movs	r3, #3
 8009e12:	e006      	b.n	8009e22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e14:	4b05      	ldr	r3, [pc, #20]	@ (8009e2c <RCCEx_PLL3_Config+0x15c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d0f0      	beq.n	8009e02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	58024400 	.word	0x58024400
 8009e30:	ffff0007 	.word	0xffff0007

08009e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d101      	bne.n	8009e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e049      	b.n	8009eda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d106      	bne.n	8009e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f7f7 fb42 	bl	80014e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2202      	movs	r2, #2
 8009e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	3304      	adds	r3, #4
 8009e70:	4619      	mov	r1, r3
 8009e72:	4610      	mov	r0, r2
 8009e74:	f000 fa9c 	bl	800a3b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b082      	sub	sp, #8
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d101      	bne.n	8009ef4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e049      	b.n	8009f88 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d106      	bne.n	8009f0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f841 	bl	8009f90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2202      	movs	r2, #2
 8009f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	3304      	adds	r3, #4
 8009f1e:	4619      	mov	r1, r3
 8009f20:	4610      	mov	r0, r2
 8009f22:	f000 fa45 	bl	800a3b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d109      	bne.n	8009fc8 <HAL_TIM_PWM_Start+0x24>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	bf14      	ite	ne
 8009fc0:	2301      	movne	r3, #1
 8009fc2:	2300      	moveq	r3, #0
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	e03c      	b.n	800a042 <HAL_TIM_PWM_Start+0x9e>
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	2b04      	cmp	r3, #4
 8009fcc:	d109      	bne.n	8009fe2 <HAL_TIM_PWM_Start+0x3e>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	bf14      	ite	ne
 8009fda:	2301      	movne	r3, #1
 8009fdc:	2300      	moveq	r3, #0
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	e02f      	b.n	800a042 <HAL_TIM_PWM_Start+0x9e>
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	2b08      	cmp	r3, #8
 8009fe6:	d109      	bne.n	8009ffc <HAL_TIM_PWM_Start+0x58>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	bf14      	ite	ne
 8009ff4:	2301      	movne	r3, #1
 8009ff6:	2300      	moveq	r3, #0
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	e022      	b.n	800a042 <HAL_TIM_PWM_Start+0x9e>
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	2b0c      	cmp	r3, #12
 800a000:	d109      	bne.n	800a016 <HAL_TIM_PWM_Start+0x72>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	bf14      	ite	ne
 800a00e:	2301      	movne	r3, #1
 800a010:	2300      	moveq	r3, #0
 800a012:	b2db      	uxtb	r3, r3
 800a014:	e015      	b.n	800a042 <HAL_TIM_PWM_Start+0x9e>
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	2b10      	cmp	r3, #16
 800a01a:	d109      	bne.n	800a030 <HAL_TIM_PWM_Start+0x8c>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a022:	b2db      	uxtb	r3, r3
 800a024:	2b01      	cmp	r3, #1
 800a026:	bf14      	ite	ne
 800a028:	2301      	movne	r3, #1
 800a02a:	2300      	moveq	r3, #0
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	e008      	b.n	800a042 <HAL_TIM_PWM_Start+0x9e>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b01      	cmp	r3, #1
 800a03a:	bf14      	ite	ne
 800a03c:	2301      	movne	r3, #1
 800a03e:	2300      	moveq	r3, #0
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d001      	beq.n	800a04a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e0a1      	b.n	800a18e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d104      	bne.n	800a05a <HAL_TIM_PWM_Start+0xb6>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2202      	movs	r2, #2
 800a054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a058:	e023      	b.n	800a0a2 <HAL_TIM_PWM_Start+0xfe>
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	2b04      	cmp	r3, #4
 800a05e:	d104      	bne.n	800a06a <HAL_TIM_PWM_Start+0xc6>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2202      	movs	r2, #2
 800a064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a068:	e01b      	b.n	800a0a2 <HAL_TIM_PWM_Start+0xfe>
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	2b08      	cmp	r3, #8
 800a06e:	d104      	bne.n	800a07a <HAL_TIM_PWM_Start+0xd6>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2202      	movs	r2, #2
 800a074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a078:	e013      	b.n	800a0a2 <HAL_TIM_PWM_Start+0xfe>
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	2b0c      	cmp	r3, #12
 800a07e:	d104      	bne.n	800a08a <HAL_TIM_PWM_Start+0xe6>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2202      	movs	r2, #2
 800a084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a088:	e00b      	b.n	800a0a2 <HAL_TIM_PWM_Start+0xfe>
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	2b10      	cmp	r3, #16
 800a08e:	d104      	bne.n	800a09a <HAL_TIM_PWM_Start+0xf6>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2202      	movs	r2, #2
 800a094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a098:	e003      	b.n	800a0a2 <HAL_TIM_PWM_Start+0xfe>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2202      	movs	r2, #2
 800a09e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	6839      	ldr	r1, [r7, #0]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 fac4 	bl	800a638 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a38      	ldr	r2, [pc, #224]	@ (800a198 <HAL_TIM_PWM_Start+0x1f4>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d013      	beq.n	800a0e2 <HAL_TIM_PWM_Start+0x13e>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a37      	ldr	r2, [pc, #220]	@ (800a19c <HAL_TIM_PWM_Start+0x1f8>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d00e      	beq.n	800a0e2 <HAL_TIM_PWM_Start+0x13e>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a35      	ldr	r2, [pc, #212]	@ (800a1a0 <HAL_TIM_PWM_Start+0x1fc>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d009      	beq.n	800a0e2 <HAL_TIM_PWM_Start+0x13e>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a34      	ldr	r2, [pc, #208]	@ (800a1a4 <HAL_TIM_PWM_Start+0x200>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d004      	beq.n	800a0e2 <HAL_TIM_PWM_Start+0x13e>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a32      	ldr	r2, [pc, #200]	@ (800a1a8 <HAL_TIM_PWM_Start+0x204>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d101      	bne.n	800a0e6 <HAL_TIM_PWM_Start+0x142>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e000      	b.n	800a0e8 <HAL_TIM_PWM_Start+0x144>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d007      	beq.n	800a0fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a0fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a25      	ldr	r2, [pc, #148]	@ (800a198 <HAL_TIM_PWM_Start+0x1f4>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d022      	beq.n	800a14c <HAL_TIM_PWM_Start+0x1a8>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a10e:	d01d      	beq.n	800a14c <HAL_TIM_PWM_Start+0x1a8>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a25      	ldr	r2, [pc, #148]	@ (800a1ac <HAL_TIM_PWM_Start+0x208>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d018      	beq.n	800a14c <HAL_TIM_PWM_Start+0x1a8>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a24      	ldr	r2, [pc, #144]	@ (800a1b0 <HAL_TIM_PWM_Start+0x20c>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d013      	beq.n	800a14c <HAL_TIM_PWM_Start+0x1a8>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a22      	ldr	r2, [pc, #136]	@ (800a1b4 <HAL_TIM_PWM_Start+0x210>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d00e      	beq.n	800a14c <HAL_TIM_PWM_Start+0x1a8>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a1a      	ldr	r2, [pc, #104]	@ (800a19c <HAL_TIM_PWM_Start+0x1f8>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d009      	beq.n	800a14c <HAL_TIM_PWM_Start+0x1a8>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a1e      	ldr	r2, [pc, #120]	@ (800a1b8 <HAL_TIM_PWM_Start+0x214>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d004      	beq.n	800a14c <HAL_TIM_PWM_Start+0x1a8>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a16      	ldr	r2, [pc, #88]	@ (800a1a0 <HAL_TIM_PWM_Start+0x1fc>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d115      	bne.n	800a178 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	689a      	ldr	r2, [r3, #8]
 800a152:	4b1a      	ldr	r3, [pc, #104]	@ (800a1bc <HAL_TIM_PWM_Start+0x218>)
 800a154:	4013      	ands	r3, r2
 800a156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2b06      	cmp	r3, #6
 800a15c:	d015      	beq.n	800a18a <HAL_TIM_PWM_Start+0x1e6>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a164:	d011      	beq.n	800a18a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f042 0201 	orr.w	r2, r2, #1
 800a174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a176:	e008      	b.n	800a18a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f042 0201 	orr.w	r2, r2, #1
 800a186:	601a      	str	r2, [r3, #0]
 800a188:	e000      	b.n	800a18c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a18a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	40010000 	.word	0x40010000
 800a19c:	40010400 	.word	0x40010400
 800a1a0:	40014000 	.word	0x40014000
 800a1a4:	40014400 	.word	0x40014400
 800a1a8:	40014800 	.word	0x40014800
 800a1ac:	40000400 	.word	0x40000400
 800a1b0:	40000800 	.word	0x40000800
 800a1b4:	40000c00 	.word	0x40000c00
 800a1b8:	40001800 	.word	0x40001800
 800a1bc:	00010007 	.word	0x00010007

0800a1c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d101      	bne.n	800a1dc <HAL_TIM_ConfigClockSource+0x1c>
 800a1d8:	2302      	movs	r3, #2
 800a1da:	e0dc      	b.n	800a396 <HAL_TIM_ConfigClockSource+0x1d6>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	4b6a      	ldr	r3, [pc, #424]	@ (800a3a0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a202:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a64      	ldr	r2, [pc, #400]	@ (800a3a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a212:	4293      	cmp	r3, r2
 800a214:	f000 80a9 	beq.w	800a36a <HAL_TIM_ConfigClockSource+0x1aa>
 800a218:	4a62      	ldr	r2, [pc, #392]	@ (800a3a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	f200 80ae 	bhi.w	800a37c <HAL_TIM_ConfigClockSource+0x1bc>
 800a220:	4a61      	ldr	r2, [pc, #388]	@ (800a3a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a222:	4293      	cmp	r3, r2
 800a224:	f000 80a1 	beq.w	800a36a <HAL_TIM_ConfigClockSource+0x1aa>
 800a228:	4a5f      	ldr	r2, [pc, #380]	@ (800a3a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	f200 80a6 	bhi.w	800a37c <HAL_TIM_ConfigClockSource+0x1bc>
 800a230:	4a5e      	ldr	r2, [pc, #376]	@ (800a3ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800a232:	4293      	cmp	r3, r2
 800a234:	f000 8099 	beq.w	800a36a <HAL_TIM_ConfigClockSource+0x1aa>
 800a238:	4a5c      	ldr	r2, [pc, #368]	@ (800a3ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	f200 809e 	bhi.w	800a37c <HAL_TIM_ConfigClockSource+0x1bc>
 800a240:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a244:	f000 8091 	beq.w	800a36a <HAL_TIM_ConfigClockSource+0x1aa>
 800a248:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a24c:	f200 8096 	bhi.w	800a37c <HAL_TIM_ConfigClockSource+0x1bc>
 800a250:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a254:	f000 8089 	beq.w	800a36a <HAL_TIM_ConfigClockSource+0x1aa>
 800a258:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a25c:	f200 808e 	bhi.w	800a37c <HAL_TIM_ConfigClockSource+0x1bc>
 800a260:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a264:	d03e      	beq.n	800a2e4 <HAL_TIM_ConfigClockSource+0x124>
 800a266:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a26a:	f200 8087 	bhi.w	800a37c <HAL_TIM_ConfigClockSource+0x1bc>
 800a26e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a272:	f000 8086 	beq.w	800a382 <HAL_TIM_ConfigClockSource+0x1c2>
 800a276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a27a:	d87f      	bhi.n	800a37c <HAL_TIM_ConfigClockSource+0x1bc>
 800a27c:	2b70      	cmp	r3, #112	@ 0x70
 800a27e:	d01a      	beq.n	800a2b6 <HAL_TIM_ConfigClockSource+0xf6>
 800a280:	2b70      	cmp	r3, #112	@ 0x70
 800a282:	d87b      	bhi.n	800a37c <HAL_TIM_ConfigClockSource+0x1bc>
 800a284:	2b60      	cmp	r3, #96	@ 0x60
 800a286:	d050      	beq.n	800a32a <HAL_TIM_ConfigClockSource+0x16a>
 800a288:	2b60      	cmp	r3, #96	@ 0x60
 800a28a:	d877      	bhi.n	800a37c <HAL_TIM_ConfigClockSource+0x1bc>
 800a28c:	2b50      	cmp	r3, #80	@ 0x50
 800a28e:	d03c      	beq.n	800a30a <HAL_TIM_ConfigClockSource+0x14a>
 800a290:	2b50      	cmp	r3, #80	@ 0x50
 800a292:	d873      	bhi.n	800a37c <HAL_TIM_ConfigClockSource+0x1bc>
 800a294:	2b40      	cmp	r3, #64	@ 0x40
 800a296:	d058      	beq.n	800a34a <HAL_TIM_ConfigClockSource+0x18a>
 800a298:	2b40      	cmp	r3, #64	@ 0x40
 800a29a:	d86f      	bhi.n	800a37c <HAL_TIM_ConfigClockSource+0x1bc>
 800a29c:	2b30      	cmp	r3, #48	@ 0x30
 800a29e:	d064      	beq.n	800a36a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2a0:	2b30      	cmp	r3, #48	@ 0x30
 800a2a2:	d86b      	bhi.n	800a37c <HAL_TIM_ConfigClockSource+0x1bc>
 800a2a4:	2b20      	cmp	r3, #32
 800a2a6:	d060      	beq.n	800a36a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2a8:	2b20      	cmp	r3, #32
 800a2aa:	d867      	bhi.n	800a37c <HAL_TIM_ConfigClockSource+0x1bc>
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d05c      	beq.n	800a36a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2b0:	2b10      	cmp	r3, #16
 800a2b2:	d05a      	beq.n	800a36a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2b4:	e062      	b.n	800a37c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2c6:	f000 f997 	bl	800a5f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a2d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	609a      	str	r2, [r3, #8]
      break;
 800a2e2:	e04f      	b.n	800a384 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2f4:	f000 f980 	bl	800a5f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	689a      	ldr	r2, [r3, #8]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a306:	609a      	str	r2, [r3, #8]
      break;
 800a308:	e03c      	b.n	800a384 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a316:	461a      	mov	r2, r3
 800a318:	f000 f8f0 	bl	800a4fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2150      	movs	r1, #80	@ 0x50
 800a322:	4618      	mov	r0, r3
 800a324:	f000 f94a 	bl	800a5bc <TIM_ITRx_SetConfig>
      break;
 800a328:	e02c      	b.n	800a384 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a336:	461a      	mov	r2, r3
 800a338:	f000 f90f 	bl	800a55a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2160      	movs	r1, #96	@ 0x60
 800a342:	4618      	mov	r0, r3
 800a344:	f000 f93a 	bl	800a5bc <TIM_ITRx_SetConfig>
      break;
 800a348:	e01c      	b.n	800a384 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a356:	461a      	mov	r2, r3
 800a358:	f000 f8d0 	bl	800a4fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2140      	movs	r1, #64	@ 0x40
 800a362:	4618      	mov	r0, r3
 800a364:	f000 f92a 	bl	800a5bc <TIM_ITRx_SetConfig>
      break;
 800a368:	e00c      	b.n	800a384 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4619      	mov	r1, r3
 800a374:	4610      	mov	r0, r2
 800a376:	f000 f921 	bl	800a5bc <TIM_ITRx_SetConfig>
      break;
 800a37a:	e003      	b.n	800a384 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	73fb      	strb	r3, [r7, #15]
      break;
 800a380:	e000      	b.n	800a384 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a382:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a394:	7bfb      	ldrb	r3, [r7, #15]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	ffceff88 	.word	0xffceff88
 800a3a4:	00100040 	.word	0x00100040
 800a3a8:	00100030 	.word	0x00100030
 800a3ac:	00100020 	.word	0x00100020

0800a3b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a46      	ldr	r2, [pc, #280]	@ (800a4dc <TIM_Base_SetConfig+0x12c>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d013      	beq.n	800a3f0 <TIM_Base_SetConfig+0x40>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3ce:	d00f      	beq.n	800a3f0 <TIM_Base_SetConfig+0x40>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a43      	ldr	r2, [pc, #268]	@ (800a4e0 <TIM_Base_SetConfig+0x130>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d00b      	beq.n	800a3f0 <TIM_Base_SetConfig+0x40>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a42      	ldr	r2, [pc, #264]	@ (800a4e4 <TIM_Base_SetConfig+0x134>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d007      	beq.n	800a3f0 <TIM_Base_SetConfig+0x40>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a41      	ldr	r2, [pc, #260]	@ (800a4e8 <TIM_Base_SetConfig+0x138>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d003      	beq.n	800a3f0 <TIM_Base_SetConfig+0x40>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a40      	ldr	r2, [pc, #256]	@ (800a4ec <TIM_Base_SetConfig+0x13c>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d108      	bne.n	800a402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	4313      	orrs	r3, r2
 800a400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4a35      	ldr	r2, [pc, #212]	@ (800a4dc <TIM_Base_SetConfig+0x12c>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d01f      	beq.n	800a44a <TIM_Base_SetConfig+0x9a>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a410:	d01b      	beq.n	800a44a <TIM_Base_SetConfig+0x9a>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a32      	ldr	r2, [pc, #200]	@ (800a4e0 <TIM_Base_SetConfig+0x130>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d017      	beq.n	800a44a <TIM_Base_SetConfig+0x9a>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a31      	ldr	r2, [pc, #196]	@ (800a4e4 <TIM_Base_SetConfig+0x134>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d013      	beq.n	800a44a <TIM_Base_SetConfig+0x9a>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a30      	ldr	r2, [pc, #192]	@ (800a4e8 <TIM_Base_SetConfig+0x138>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d00f      	beq.n	800a44a <TIM_Base_SetConfig+0x9a>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a2f      	ldr	r2, [pc, #188]	@ (800a4ec <TIM_Base_SetConfig+0x13c>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d00b      	beq.n	800a44a <TIM_Base_SetConfig+0x9a>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a2e      	ldr	r2, [pc, #184]	@ (800a4f0 <TIM_Base_SetConfig+0x140>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d007      	beq.n	800a44a <TIM_Base_SetConfig+0x9a>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a2d      	ldr	r2, [pc, #180]	@ (800a4f4 <TIM_Base_SetConfig+0x144>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d003      	beq.n	800a44a <TIM_Base_SetConfig+0x9a>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a2c      	ldr	r2, [pc, #176]	@ (800a4f8 <TIM_Base_SetConfig+0x148>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d108      	bne.n	800a45c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	4313      	orrs	r3, r2
 800a45a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	695b      	ldr	r3, [r3, #20]
 800a466:	4313      	orrs	r3, r2
 800a468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	689a      	ldr	r2, [r3, #8]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a16      	ldr	r2, [pc, #88]	@ (800a4dc <TIM_Base_SetConfig+0x12c>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d00f      	beq.n	800a4a8 <TIM_Base_SetConfig+0xf8>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a18      	ldr	r2, [pc, #96]	@ (800a4ec <TIM_Base_SetConfig+0x13c>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d00b      	beq.n	800a4a8 <TIM_Base_SetConfig+0xf8>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a17      	ldr	r2, [pc, #92]	@ (800a4f0 <TIM_Base_SetConfig+0x140>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d007      	beq.n	800a4a8 <TIM_Base_SetConfig+0xf8>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a16      	ldr	r2, [pc, #88]	@ (800a4f4 <TIM_Base_SetConfig+0x144>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d003      	beq.n	800a4a8 <TIM_Base_SetConfig+0xf8>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a15      	ldr	r2, [pc, #84]	@ (800a4f8 <TIM_Base_SetConfig+0x148>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d103      	bne.n	800a4b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	691a      	ldr	r2, [r3, #16]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d105      	bne.n	800a4ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	f023 0201 	bic.w	r2, r3, #1
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	611a      	str	r2, [r3, #16]
  }
}
 800a4ce:	bf00      	nop
 800a4d0:	3714      	adds	r7, #20
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	40010000 	.word	0x40010000
 800a4e0:	40000400 	.word	0x40000400
 800a4e4:	40000800 	.word	0x40000800
 800a4e8:	40000c00 	.word	0x40000c00
 800a4ec:	40010400 	.word	0x40010400
 800a4f0:	40014000 	.word	0x40014000
 800a4f4:	40014400 	.word	0x40014400
 800a4f8:	40014800 	.word	0x40014800

0800a4fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b087      	sub	sp, #28
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6a1b      	ldr	r3, [r3, #32]
 800a50c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6a1b      	ldr	r3, [r3, #32]
 800a512:	f023 0201 	bic.w	r2, r3, #1
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	699b      	ldr	r3, [r3, #24]
 800a51e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	011b      	lsls	r3, r3, #4
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	4313      	orrs	r3, r2
 800a530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f023 030a 	bic.w	r3, r3, #10
 800a538:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	4313      	orrs	r3, r2
 800a540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	693a      	ldr	r2, [r7, #16]
 800a546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	621a      	str	r2, [r3, #32]
}
 800a54e:	bf00      	nop
 800a550:	371c      	adds	r7, #28
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr

0800a55a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a55a:	b480      	push	{r7}
 800a55c:	b087      	sub	sp, #28
 800a55e:	af00      	add	r7, sp, #0
 800a560:	60f8      	str	r0, [r7, #12]
 800a562:	60b9      	str	r1, [r7, #8]
 800a564:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6a1b      	ldr	r3, [r3, #32]
 800a56a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6a1b      	ldr	r3, [r3, #32]
 800a570:	f023 0210 	bic.w	r2, r3, #16
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	699b      	ldr	r3, [r3, #24]
 800a57c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a584:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	031b      	lsls	r3, r3, #12
 800a58a:	693a      	ldr	r2, [r7, #16]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a596:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	011b      	lsls	r3, r3, #4
 800a59c:	697a      	ldr	r2, [r7, #20]
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	693a      	ldr	r2, [r7, #16]
 800a5a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	621a      	str	r2, [r3, #32]
}
 800a5ae:	bf00      	nop
 800a5b0:	371c      	adds	r7, #28
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
	...

0800a5bc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	4b09      	ldr	r3, [pc, #36]	@ (800a5f4 <TIM_ITRx_SetConfig+0x38>)
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	f043 0307 	orr.w	r3, r3, #7
 800a5de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	68fa      	ldr	r2, [r7, #12]
 800a5e4:	609a      	str	r2, [r3, #8]
}
 800a5e6:	bf00      	nop
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	ffcfff8f 	.word	0xffcfff8f

0800a5f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b087      	sub	sp, #28
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
 800a604:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a612:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	021a      	lsls	r2, r3, #8
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	431a      	orrs	r2, r3
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	4313      	orrs	r3, r2
 800a620:	697a      	ldr	r2, [r7, #20]
 800a622:	4313      	orrs	r3, r2
 800a624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	697a      	ldr	r2, [r7, #20]
 800a62a:	609a      	str	r2, [r3, #8]
}
 800a62c:	bf00      	nop
 800a62e:	371c      	adds	r7, #28
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a638:	b480      	push	{r7}
 800a63a:	b087      	sub	sp, #28
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	f003 031f 	and.w	r3, r3, #31
 800a64a:	2201      	movs	r2, #1
 800a64c:	fa02 f303 	lsl.w	r3, r2, r3
 800a650:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6a1a      	ldr	r2, [r3, #32]
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	43db      	mvns	r3, r3
 800a65a:	401a      	ands	r2, r3
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6a1a      	ldr	r2, [r3, #32]
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	f003 031f 	and.w	r3, r3, #31
 800a66a:	6879      	ldr	r1, [r7, #4]
 800a66c:	fa01 f303 	lsl.w	r3, r1, r3
 800a670:	431a      	orrs	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	621a      	str	r2, [r3, #32]
}
 800a676:	bf00      	nop
 800a678:	371c      	adds	r7, #28
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
	...

0800a684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a694:	2b01      	cmp	r3, #1
 800a696:	d101      	bne.n	800a69c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a698:	2302      	movs	r3, #2
 800a69a:	e06d      	b.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2202      	movs	r2, #2
 800a6a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a30      	ldr	r2, [pc, #192]	@ (800a784 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d004      	beq.n	800a6d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a2f      	ldr	r2, [pc, #188]	@ (800a788 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d108      	bne.n	800a6e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a6d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a20      	ldr	r2, [pc, #128]	@ (800a784 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d022      	beq.n	800a74c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a70e:	d01d      	beq.n	800a74c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a1d      	ldr	r2, [pc, #116]	@ (800a78c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d018      	beq.n	800a74c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a1c      	ldr	r2, [pc, #112]	@ (800a790 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d013      	beq.n	800a74c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a1a      	ldr	r2, [pc, #104]	@ (800a794 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d00e      	beq.n	800a74c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a15      	ldr	r2, [pc, #84]	@ (800a788 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d009      	beq.n	800a74c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a16      	ldr	r2, [pc, #88]	@ (800a798 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d004      	beq.n	800a74c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a15      	ldr	r2, [pc, #84]	@ (800a79c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d10c      	bne.n	800a766 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a752:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2201      	movs	r2, #1
 800a76a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr
 800a784:	40010000 	.word	0x40010000
 800a788:	40010400 	.word	0x40010400
 800a78c:	40000400 	.word	0x40000400
 800a790:	40000800 	.word	0x40000800
 800a794:	40000c00 	.word	0x40000c00
 800a798:	40001800 	.word	0x40001800
 800a79c:	40014000 	.word	0x40014000

0800a7a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e042      	b.n	800a838 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d106      	bne.n	800a7ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f7f6 feaf 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2224      	movs	r2, #36	@ 0x24
 800a7ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f022 0201 	bic.w	r2, r2, #1
 800a7e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d002      	beq.n	800a7f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f001 fa4a 	bl	800bc84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 fcdf 	bl	800b1b4 <UART_SetConfig>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d101      	bne.n	800a800 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e01b      	b.n	800a838 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	685a      	ldr	r2, [r3, #4]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a80e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	689a      	ldr	r2, [r3, #8]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a81e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f042 0201 	orr.w	r2, r2, #1
 800a82e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f001 fac9 	bl	800bdc8 <UART_CheckIdleState>
 800a836:	4603      	mov	r3, r0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a840:	b480      	push	{r7}
 800a842:	b091      	sub	sp, #68	@ 0x44
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	4613      	mov	r3, r2
 800a84c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a854:	2b20      	cmp	r3, #32
 800a856:	d178      	bne.n	800a94a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d002      	beq.n	800a864 <HAL_UART_Transmit_IT+0x24>
 800a85e:	88fb      	ldrh	r3, [r7, #6]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d101      	bne.n	800a868 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	e071      	b.n	800a94c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	88fa      	ldrh	r2, [r7, #6]
 800a872:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	88fa      	ldrh	r2, [r7, #6]
 800a87a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2200      	movs	r2, #0
 800a882:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2221      	movs	r2, #33	@ 0x21
 800a890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a89c:	d12a      	bne.n	800a8f4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8a6:	d107      	bne.n	800a8b8 <HAL_UART_Transmit_IT+0x78>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d103      	bne.n	800a8b8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	4a29      	ldr	r2, [pc, #164]	@ (800a958 <HAL_UART_Transmit_IT+0x118>)
 800a8b4:	679a      	str	r2, [r3, #120]	@ 0x78
 800a8b6:	e002      	b.n	800a8be <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	4a28      	ldr	r2, [pc, #160]	@ (800a95c <HAL_UART_Transmit_IT+0x11c>)
 800a8bc:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3308      	adds	r3, #8
 800a8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c8:	e853 3f00 	ldrex	r3, [r3]
 800a8cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a8d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3308      	adds	r3, #8
 800a8dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a8de:	637a      	str	r2, [r7, #52]	@ 0x34
 800a8e0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8e6:	e841 2300 	strex	r3, r2, [r1]
 800a8ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1e5      	bne.n	800a8be <HAL_UART_Transmit_IT+0x7e>
 800a8f2:	e028      	b.n	800a946 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8fc:	d107      	bne.n	800a90e <HAL_UART_Transmit_IT+0xce>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d103      	bne.n	800a90e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	4a15      	ldr	r2, [pc, #84]	@ (800a960 <HAL_UART_Transmit_IT+0x120>)
 800a90a:	679a      	str	r2, [r3, #120]	@ 0x78
 800a90c:	e002      	b.n	800a914 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	4a14      	ldr	r2, [pc, #80]	@ (800a964 <HAL_UART_Transmit_IT+0x124>)
 800a912:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	e853 3f00 	ldrex	r3, [r3]
 800a920:	613b      	str	r3, [r7, #16]
   return(result);
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a928:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	461a      	mov	r2, r3
 800a930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a932:	623b      	str	r3, [r7, #32]
 800a934:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a936:	69f9      	ldr	r1, [r7, #28]
 800a938:	6a3a      	ldr	r2, [r7, #32]
 800a93a:	e841 2300 	strex	r3, r2, [r1]
 800a93e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1e6      	bne.n	800a914 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800a946:	2300      	movs	r3, #0
 800a948:	e000      	b.n	800a94c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800a94a:	2302      	movs	r3, #2
  }
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3744      	adds	r7, #68	@ 0x44
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr
 800a958:	0800c58f 	.word	0x0800c58f
 800a95c:	0800c4af 	.word	0x0800c4af
 800a960:	0800c3ed 	.word	0x0800c3ed
 800a964:	0800c335 	.word	0x0800c335

0800a968 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b08a      	sub	sp, #40	@ 0x28
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	4613      	mov	r3, r2
 800a974:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a97c:	2b20      	cmp	r3, #32
 800a97e:	d137      	bne.n	800a9f0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <HAL_UART_Receive_IT+0x24>
 800a986:	88fb      	ldrh	r3, [r7, #6]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d101      	bne.n	800a990 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	e030      	b.n	800a9f2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a18      	ldr	r2, [pc, #96]	@ (800a9fc <HAL_UART_Receive_IT+0x94>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d01f      	beq.n	800a9e0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d018      	beq.n	800a9e0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	e853 3f00 	ldrex	r3, [r3]
 800a9ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a9c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9cc:	623b      	str	r3, [r7, #32]
 800a9ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d0:	69f9      	ldr	r1, [r7, #28]
 800a9d2:	6a3a      	ldr	r2, [r7, #32]
 800a9d4:	e841 2300 	strex	r3, r2, [r1]
 800a9d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1e6      	bne.n	800a9ae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a9e0:	88fb      	ldrh	r3, [r7, #6]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	68b9      	ldr	r1, [r7, #8]
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f001 fb06 	bl	800bff8 <UART_Start_Receive_IT>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	e000      	b.n	800a9f2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a9f0:	2302      	movs	r3, #2
  }
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3728      	adds	r7, #40	@ 0x28
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	58000c00 	.word	0x58000c00

0800aa00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b0ba      	sub	sp, #232	@ 0xe8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	69db      	ldr	r3, [r3, #28]
 800aa0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aa2a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aa2e:	4013      	ands	r3, r2
 800aa30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aa34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d11b      	bne.n	800aa74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa40:	f003 0320 	and.w	r3, r3, #32
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d015      	beq.n	800aa74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa4c:	f003 0320 	and.w	r3, r3, #32
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d105      	bne.n	800aa60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d009      	beq.n	800aa74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f000 8377 	beq.w	800b158 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	4798      	blx	r3
      }
      return;
 800aa72:	e371      	b.n	800b158 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 8123 	beq.w	800acc4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aa7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aa82:	4b8d      	ldr	r3, [pc, #564]	@ (800acb8 <HAL_UART_IRQHandler+0x2b8>)
 800aa84:	4013      	ands	r3, r2
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d106      	bne.n	800aa98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aa8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aa8e:	4b8b      	ldr	r3, [pc, #556]	@ (800acbc <HAL_UART_IRQHandler+0x2bc>)
 800aa90:	4013      	ands	r3, r2
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	f000 8116 	beq.w	800acc4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa9c:	f003 0301 	and.w	r3, r3, #1
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d011      	beq.n	800aac8 <HAL_UART_IRQHandler+0xc8>
 800aaa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aaa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00b      	beq.n	800aac8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2201      	movs	r2, #1
 800aab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aabe:	f043 0201 	orr.w	r2, r3, #1
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aacc:	f003 0302 	and.w	r3, r3, #2
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d011      	beq.n	800aaf8 <HAL_UART_IRQHandler+0xf8>
 800aad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aad8:	f003 0301 	and.w	r3, r3, #1
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00b      	beq.n	800aaf8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2202      	movs	r2, #2
 800aae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaee:	f043 0204 	orr.w	r2, r3, #4
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aaf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aafc:	f003 0304 	and.w	r3, r3, #4
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d011      	beq.n	800ab28 <HAL_UART_IRQHandler+0x128>
 800ab04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab08:	f003 0301 	and.w	r3, r3, #1
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00b      	beq.n	800ab28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2204      	movs	r2, #4
 800ab16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab1e:	f043 0202 	orr.w	r2, r3, #2
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab2c:	f003 0308 	and.w	r3, r3, #8
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d017      	beq.n	800ab64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab38:	f003 0320 	and.w	r3, r3, #32
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d105      	bne.n	800ab4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ab40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ab44:	4b5c      	ldr	r3, [pc, #368]	@ (800acb8 <HAL_UART_IRQHandler+0x2b8>)
 800ab46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00b      	beq.n	800ab64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2208      	movs	r2, #8
 800ab52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab5a:	f043 0208 	orr.w	r2, r3, #8
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d012      	beq.n	800ab96 <HAL_UART_IRQHandler+0x196>
 800ab70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00c      	beq.n	800ab96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab8c:	f043 0220 	orr.w	r2, r3, #32
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f000 82dd 	beq.w	800b15c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aba6:	f003 0320 	and.w	r3, r3, #32
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d013      	beq.n	800abd6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800abae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abb2:	f003 0320 	and.w	r3, r3, #32
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d105      	bne.n	800abc6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800abba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d007      	beq.n	800abd6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d003      	beq.n	800abd6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abdc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abea:	2b40      	cmp	r3, #64	@ 0x40
 800abec:	d005      	beq.n	800abfa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800abee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800abf2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d054      	beq.n	800aca4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f001 fb1e 	bl	800c23c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac0a:	2b40      	cmp	r3, #64	@ 0x40
 800ac0c:	d146      	bne.n	800ac9c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	3308      	adds	r3, #8
 800ac14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ac1c:	e853 3f00 	ldrex	r3, [r3]
 800ac20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ac24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	3308      	adds	r3, #8
 800ac36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ac3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ac3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ac46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ac4a:	e841 2300 	strex	r3, r2, [r1]
 800ac4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ac52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1d9      	bne.n	800ac0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d017      	beq.n	800ac94 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac6a:	4a15      	ldr	r2, [pc, #84]	@ (800acc0 <HAL_UART_IRQHandler+0x2c0>)
 800ac6c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7f8 fd7d 	bl	8003774 <HAL_DMA_Abort_IT>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d019      	beq.n	800acb4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ac8e:	4610      	mov	r0, r2
 800ac90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac92:	e00f      	b.n	800acb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 fa77 	bl	800b188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac9a:	e00b      	b.n	800acb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 fa73 	bl	800b188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aca2:	e007      	b.n	800acb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fa6f 	bl	800b188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800acb2:	e253      	b.n	800b15c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acb4:	bf00      	nop
    return;
 800acb6:	e251      	b.n	800b15c <HAL_UART_IRQHandler+0x75c>
 800acb8:	10000001 	.word	0x10000001
 800acbc:	04000120 	.word	0x04000120
 800acc0:	0800c309 	.word	0x0800c309

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acc8:	2b01      	cmp	r3, #1
 800acca:	f040 81e7 	bne.w	800b09c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800acce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acd2:	f003 0310 	and.w	r3, r3, #16
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 81e0 	beq.w	800b09c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800acdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ace0:	f003 0310 	and.w	r3, r3, #16
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 81d9 	beq.w	800b09c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2210      	movs	r2, #16
 800acf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acfc:	2b40      	cmp	r3, #64	@ 0x40
 800acfe:	f040 8151 	bne.w	800afa4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a96      	ldr	r2, [pc, #600]	@ (800af64 <HAL_UART_IRQHandler+0x564>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d068      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a93      	ldr	r2, [pc, #588]	@ (800af68 <HAL_UART_IRQHandler+0x568>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d061      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a91      	ldr	r2, [pc, #580]	@ (800af6c <HAL_UART_IRQHandler+0x56c>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d05a      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a8e      	ldr	r2, [pc, #568]	@ (800af70 <HAL_UART_IRQHandler+0x570>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d053      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a8c      	ldr	r2, [pc, #560]	@ (800af74 <HAL_UART_IRQHandler+0x574>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d04c      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a89      	ldr	r2, [pc, #548]	@ (800af78 <HAL_UART_IRQHandler+0x578>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d045      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a87      	ldr	r2, [pc, #540]	@ (800af7c <HAL_UART_IRQHandler+0x57c>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d03e      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a84      	ldr	r2, [pc, #528]	@ (800af80 <HAL_UART_IRQHandler+0x580>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d037      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a82      	ldr	r2, [pc, #520]	@ (800af84 <HAL_UART_IRQHandler+0x584>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d030      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a7f      	ldr	r2, [pc, #508]	@ (800af88 <HAL_UART_IRQHandler+0x588>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d029      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a7d      	ldr	r2, [pc, #500]	@ (800af8c <HAL_UART_IRQHandler+0x58c>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d022      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a7a      	ldr	r2, [pc, #488]	@ (800af90 <HAL_UART_IRQHandler+0x590>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d01b      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a78      	ldr	r2, [pc, #480]	@ (800af94 <HAL_UART_IRQHandler+0x594>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d014      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a75      	ldr	r2, [pc, #468]	@ (800af98 <HAL_UART_IRQHandler+0x598>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d00d      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a73      	ldr	r2, [pc, #460]	@ (800af9c <HAL_UART_IRQHandler+0x59c>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d006      	beq.n	800ade2 <HAL_UART_IRQHandler+0x3e2>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a70      	ldr	r2, [pc, #448]	@ (800afa0 <HAL_UART_IRQHandler+0x5a0>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d106      	bne.n	800adf0 <HAL_UART_IRQHandler+0x3f0>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	b29b      	uxth	r3, r3
 800adee:	e005      	b.n	800adfc <HAL_UART_IRQHandler+0x3fc>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ae00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 81ab 	beq.w	800b160 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ae14:	429a      	cmp	r2, r3
 800ae16:	f080 81a3 	bcs.w	800b160 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ae20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae2a:	69db      	ldr	r3, [r3, #28]
 800ae2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae30:	f000 8087 	beq.w	800af42 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ae40:	e853 3f00 	ldrex	r3, [r3]
 800ae44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ae48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ae4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	461a      	mov	r2, r3
 800ae5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ae5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ae62:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ae6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ae6e:	e841 2300 	strex	r3, r2, [r1]
 800ae72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ae76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1da      	bne.n	800ae34 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	3308      	adds	r3, #8
 800ae84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae88:	e853 3f00 	ldrex	r3, [r3]
 800ae8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ae8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae90:	f023 0301 	bic.w	r3, r3, #1
 800ae94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3308      	adds	r3, #8
 800ae9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aea2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aea6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aeaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aeae:	e841 2300 	strex	r3, r2, [r1]
 800aeb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aeb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d1e1      	bne.n	800ae7e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	3308      	adds	r3, #8
 800aec0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aec4:	e853 3f00 	ldrex	r3, [r3]
 800aec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aeca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aecc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aed0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	3308      	adds	r3, #8
 800aeda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800aede:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aee0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aee4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aee6:	e841 2300 	strex	r3, r2, [r1]
 800aeea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aeec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1e3      	bne.n	800aeba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2220      	movs	r2, #32
 800aef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af08:	e853 3f00 	ldrex	r3, [r3]
 800af0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af10:	f023 0310 	bic.w	r3, r3, #16
 800af14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	461a      	mov	r2, r3
 800af1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af22:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af24:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af2a:	e841 2300 	strex	r3, r2, [r1]
 800af2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1e4      	bne.n	800af00 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7f8 f8fb 	bl	8003138 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2202      	movs	r2, #2
 800af46:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af54:	b29b      	uxth	r3, r3
 800af56:	1ad3      	subs	r3, r2, r3
 800af58:	b29b      	uxth	r3, r3
 800af5a:	4619      	mov	r1, r3
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f91d 	bl	800b19c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af62:	e0fd      	b.n	800b160 <HAL_UART_IRQHandler+0x760>
 800af64:	40020010 	.word	0x40020010
 800af68:	40020028 	.word	0x40020028
 800af6c:	40020040 	.word	0x40020040
 800af70:	40020058 	.word	0x40020058
 800af74:	40020070 	.word	0x40020070
 800af78:	40020088 	.word	0x40020088
 800af7c:	400200a0 	.word	0x400200a0
 800af80:	400200b8 	.word	0x400200b8
 800af84:	40020410 	.word	0x40020410
 800af88:	40020428 	.word	0x40020428
 800af8c:	40020440 	.word	0x40020440
 800af90:	40020458 	.word	0x40020458
 800af94:	40020470 	.word	0x40020470
 800af98:	40020488 	.word	0x40020488
 800af9c:	400204a0 	.word	0x400204a0
 800afa0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f000 80cf 	beq.w	800b164 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800afc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f000 80ca 	beq.w	800b164 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd8:	e853 3f00 	ldrex	r3, [r3]
 800afdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800afde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afe0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800afe4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	461a      	mov	r2, r3
 800afee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aff2:	647b      	str	r3, [r7, #68]	@ 0x44
 800aff4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aff8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800affa:	e841 2300 	strex	r3, r2, [r1]
 800affe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1e4      	bne.n	800afd0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	3308      	adds	r3, #8
 800b00c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b010:	e853 3f00 	ldrex	r3, [r3]
 800b014:	623b      	str	r3, [r7, #32]
   return(result);
 800b016:	6a3a      	ldr	r2, [r7, #32]
 800b018:	4b55      	ldr	r3, [pc, #340]	@ (800b170 <HAL_UART_IRQHandler+0x770>)
 800b01a:	4013      	ands	r3, r2
 800b01c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3308      	adds	r3, #8
 800b026:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b02a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b02c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b032:	e841 2300 	strex	r3, r2, [r1]
 800b036:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1e3      	bne.n	800b006 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2220      	movs	r2, #32
 800b042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	e853 3f00 	ldrex	r3, [r3]
 800b05e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f023 0310 	bic.w	r3, r3, #16
 800b066:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	461a      	mov	r2, r3
 800b070:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b074:	61fb      	str	r3, [r7, #28]
 800b076:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b078:	69b9      	ldr	r1, [r7, #24]
 800b07a:	69fa      	ldr	r2, [r7, #28]
 800b07c:	e841 2300 	strex	r3, r2, [r1]
 800b080:	617b      	str	r3, [r7, #20]
   return(result);
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d1e4      	bne.n	800b052 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2202      	movs	r2, #2
 800b08c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b08e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b092:	4619      	mov	r1, r3
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 f881 	bl	800b19c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b09a:	e063      	b.n	800b164 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b09c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00e      	beq.n	800b0c6 <HAL_UART_IRQHandler+0x6c6>
 800b0a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d008      	beq.n	800b0c6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b0bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f002 f822 	bl	800d108 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b0c4:	e051      	b.n	800b16a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d014      	beq.n	800b0fc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b0d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d105      	bne.n	800b0ea <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b0de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d008      	beq.n	800b0fc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d03a      	beq.n	800b168 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	4798      	blx	r3
    }
    return;
 800b0fa:	e035      	b.n	800b168 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b0fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b104:	2b00      	cmp	r3, #0
 800b106:	d009      	beq.n	800b11c <HAL_UART_IRQHandler+0x71c>
 800b108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b10c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b110:	2b00      	cmp	r3, #0
 800b112:	d003      	beq.n	800b11c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f001 faaf 	bl	800c678 <UART_EndTransmit_IT>
    return;
 800b11a:	e026      	b.n	800b16a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b11c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b120:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d009      	beq.n	800b13c <HAL_UART_IRQHandler+0x73c>
 800b128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b12c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d003      	beq.n	800b13c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f001 fffb 	bl	800d130 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b13a:	e016      	b.n	800b16a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b140:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b144:	2b00      	cmp	r3, #0
 800b146:	d010      	beq.n	800b16a <HAL_UART_IRQHandler+0x76a>
 800b148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	da0c      	bge.n	800b16a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f001 ffe3 	bl	800d11c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b156:	e008      	b.n	800b16a <HAL_UART_IRQHandler+0x76a>
      return;
 800b158:	bf00      	nop
 800b15a:	e006      	b.n	800b16a <HAL_UART_IRQHandler+0x76a>
    return;
 800b15c:	bf00      	nop
 800b15e:	e004      	b.n	800b16a <HAL_UART_IRQHandler+0x76a>
      return;
 800b160:	bf00      	nop
 800b162:	e002      	b.n	800b16a <HAL_UART_IRQHandler+0x76a>
      return;
 800b164:	bf00      	nop
 800b166:	e000      	b.n	800b16a <HAL_UART_IRQHandler+0x76a>
    return;
 800b168:	bf00      	nop
  }
}
 800b16a:	37e8      	adds	r7, #232	@ 0xe8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	effffffe 	.word	0xeffffffe

0800b174 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b1a8:	bf00      	nop
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1b8:	b092      	sub	sp, #72	@ 0x48
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	689a      	ldr	r2, [r3, #8]
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	431a      	orrs	r2, r3
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	431a      	orrs	r2, r3
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	69db      	ldr	r3, [r3, #28]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	4bbe      	ldr	r3, [pc, #760]	@ (800b4dc <UART_SetConfig+0x328>)
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	697a      	ldr	r2, [r7, #20]
 800b1e8:	6812      	ldr	r2, [r2, #0]
 800b1ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b1ec:	430b      	orrs	r3, r1
 800b1ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	68da      	ldr	r2, [r3, #12]
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	430a      	orrs	r2, r1
 800b204:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	699b      	ldr	r3, [r3, #24]
 800b20a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4ab3      	ldr	r2, [pc, #716]	@ (800b4e0 <UART_SetConfig+0x32c>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d004      	beq.n	800b220 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	6a1b      	ldr	r3, [r3, #32]
 800b21a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b21c:	4313      	orrs	r3, r2
 800b21e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	689a      	ldr	r2, [r3, #8]
 800b226:	4baf      	ldr	r3, [pc, #700]	@ (800b4e4 <UART_SetConfig+0x330>)
 800b228:	4013      	ands	r3, r2
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	6812      	ldr	r2, [r2, #0]
 800b22e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b230:	430b      	orrs	r3, r1
 800b232:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b23a:	f023 010f 	bic.w	r1, r3, #15
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	430a      	orrs	r2, r1
 800b248:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4aa6      	ldr	r2, [pc, #664]	@ (800b4e8 <UART_SetConfig+0x334>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d177      	bne.n	800b344 <UART_SetConfig+0x190>
 800b254:	4ba5      	ldr	r3, [pc, #660]	@ (800b4ec <UART_SetConfig+0x338>)
 800b256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b258:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b25c:	2b28      	cmp	r3, #40	@ 0x28
 800b25e:	d86d      	bhi.n	800b33c <UART_SetConfig+0x188>
 800b260:	a201      	add	r2, pc, #4	@ (adr r2, 800b268 <UART_SetConfig+0xb4>)
 800b262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b266:	bf00      	nop
 800b268:	0800b30d 	.word	0x0800b30d
 800b26c:	0800b33d 	.word	0x0800b33d
 800b270:	0800b33d 	.word	0x0800b33d
 800b274:	0800b33d 	.word	0x0800b33d
 800b278:	0800b33d 	.word	0x0800b33d
 800b27c:	0800b33d 	.word	0x0800b33d
 800b280:	0800b33d 	.word	0x0800b33d
 800b284:	0800b33d 	.word	0x0800b33d
 800b288:	0800b315 	.word	0x0800b315
 800b28c:	0800b33d 	.word	0x0800b33d
 800b290:	0800b33d 	.word	0x0800b33d
 800b294:	0800b33d 	.word	0x0800b33d
 800b298:	0800b33d 	.word	0x0800b33d
 800b29c:	0800b33d 	.word	0x0800b33d
 800b2a0:	0800b33d 	.word	0x0800b33d
 800b2a4:	0800b33d 	.word	0x0800b33d
 800b2a8:	0800b31d 	.word	0x0800b31d
 800b2ac:	0800b33d 	.word	0x0800b33d
 800b2b0:	0800b33d 	.word	0x0800b33d
 800b2b4:	0800b33d 	.word	0x0800b33d
 800b2b8:	0800b33d 	.word	0x0800b33d
 800b2bc:	0800b33d 	.word	0x0800b33d
 800b2c0:	0800b33d 	.word	0x0800b33d
 800b2c4:	0800b33d 	.word	0x0800b33d
 800b2c8:	0800b325 	.word	0x0800b325
 800b2cc:	0800b33d 	.word	0x0800b33d
 800b2d0:	0800b33d 	.word	0x0800b33d
 800b2d4:	0800b33d 	.word	0x0800b33d
 800b2d8:	0800b33d 	.word	0x0800b33d
 800b2dc:	0800b33d 	.word	0x0800b33d
 800b2e0:	0800b33d 	.word	0x0800b33d
 800b2e4:	0800b33d 	.word	0x0800b33d
 800b2e8:	0800b32d 	.word	0x0800b32d
 800b2ec:	0800b33d 	.word	0x0800b33d
 800b2f0:	0800b33d 	.word	0x0800b33d
 800b2f4:	0800b33d 	.word	0x0800b33d
 800b2f8:	0800b33d 	.word	0x0800b33d
 800b2fc:	0800b33d 	.word	0x0800b33d
 800b300:	0800b33d 	.word	0x0800b33d
 800b304:	0800b33d 	.word	0x0800b33d
 800b308:	0800b335 	.word	0x0800b335
 800b30c:	2301      	movs	r3, #1
 800b30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b312:	e222      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b314:	2304      	movs	r3, #4
 800b316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b31a:	e21e      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b31c:	2308      	movs	r3, #8
 800b31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b322:	e21a      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b324:	2310      	movs	r3, #16
 800b326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b32a:	e216      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b32c:	2320      	movs	r3, #32
 800b32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b332:	e212      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b334:	2340      	movs	r3, #64	@ 0x40
 800b336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b33a:	e20e      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b33c:	2380      	movs	r3, #128	@ 0x80
 800b33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b342:	e20a      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a69      	ldr	r2, [pc, #420]	@ (800b4f0 <UART_SetConfig+0x33c>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d130      	bne.n	800b3b0 <UART_SetConfig+0x1fc>
 800b34e:	4b67      	ldr	r3, [pc, #412]	@ (800b4ec <UART_SetConfig+0x338>)
 800b350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b352:	f003 0307 	and.w	r3, r3, #7
 800b356:	2b05      	cmp	r3, #5
 800b358:	d826      	bhi.n	800b3a8 <UART_SetConfig+0x1f4>
 800b35a:	a201      	add	r2, pc, #4	@ (adr r2, 800b360 <UART_SetConfig+0x1ac>)
 800b35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b360:	0800b379 	.word	0x0800b379
 800b364:	0800b381 	.word	0x0800b381
 800b368:	0800b389 	.word	0x0800b389
 800b36c:	0800b391 	.word	0x0800b391
 800b370:	0800b399 	.word	0x0800b399
 800b374:	0800b3a1 	.word	0x0800b3a1
 800b378:	2300      	movs	r3, #0
 800b37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b37e:	e1ec      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b380:	2304      	movs	r3, #4
 800b382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b386:	e1e8      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b388:	2308      	movs	r3, #8
 800b38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b38e:	e1e4      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b390:	2310      	movs	r3, #16
 800b392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b396:	e1e0      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b398:	2320      	movs	r3, #32
 800b39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b39e:	e1dc      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b3a0:	2340      	movs	r3, #64	@ 0x40
 800b3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3a6:	e1d8      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b3a8:	2380      	movs	r3, #128	@ 0x80
 800b3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ae:	e1d4      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a4f      	ldr	r2, [pc, #316]	@ (800b4f4 <UART_SetConfig+0x340>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d130      	bne.n	800b41c <UART_SetConfig+0x268>
 800b3ba:	4b4c      	ldr	r3, [pc, #304]	@ (800b4ec <UART_SetConfig+0x338>)
 800b3bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3be:	f003 0307 	and.w	r3, r3, #7
 800b3c2:	2b05      	cmp	r3, #5
 800b3c4:	d826      	bhi.n	800b414 <UART_SetConfig+0x260>
 800b3c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3cc <UART_SetConfig+0x218>)
 800b3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3cc:	0800b3e5 	.word	0x0800b3e5
 800b3d0:	0800b3ed 	.word	0x0800b3ed
 800b3d4:	0800b3f5 	.word	0x0800b3f5
 800b3d8:	0800b3fd 	.word	0x0800b3fd
 800b3dc:	0800b405 	.word	0x0800b405
 800b3e0:	0800b40d 	.word	0x0800b40d
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ea:	e1b6      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b3ec:	2304      	movs	r3, #4
 800b3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3f2:	e1b2      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b3f4:	2308      	movs	r3, #8
 800b3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3fa:	e1ae      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b3fc:	2310      	movs	r3, #16
 800b3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b402:	e1aa      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b404:	2320      	movs	r3, #32
 800b406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b40a:	e1a6      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b40c:	2340      	movs	r3, #64	@ 0x40
 800b40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b412:	e1a2      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b414:	2380      	movs	r3, #128	@ 0x80
 800b416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b41a:	e19e      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a35      	ldr	r2, [pc, #212]	@ (800b4f8 <UART_SetConfig+0x344>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d130      	bne.n	800b488 <UART_SetConfig+0x2d4>
 800b426:	4b31      	ldr	r3, [pc, #196]	@ (800b4ec <UART_SetConfig+0x338>)
 800b428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b42a:	f003 0307 	and.w	r3, r3, #7
 800b42e:	2b05      	cmp	r3, #5
 800b430:	d826      	bhi.n	800b480 <UART_SetConfig+0x2cc>
 800b432:	a201      	add	r2, pc, #4	@ (adr r2, 800b438 <UART_SetConfig+0x284>)
 800b434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b438:	0800b451 	.word	0x0800b451
 800b43c:	0800b459 	.word	0x0800b459
 800b440:	0800b461 	.word	0x0800b461
 800b444:	0800b469 	.word	0x0800b469
 800b448:	0800b471 	.word	0x0800b471
 800b44c:	0800b479 	.word	0x0800b479
 800b450:	2300      	movs	r3, #0
 800b452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b456:	e180      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b458:	2304      	movs	r3, #4
 800b45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b45e:	e17c      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b460:	2308      	movs	r3, #8
 800b462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b466:	e178      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b468:	2310      	movs	r3, #16
 800b46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b46e:	e174      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b470:	2320      	movs	r3, #32
 800b472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b476:	e170      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b478:	2340      	movs	r3, #64	@ 0x40
 800b47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b47e:	e16c      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b480:	2380      	movs	r3, #128	@ 0x80
 800b482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b486:	e168      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a1b      	ldr	r2, [pc, #108]	@ (800b4fc <UART_SetConfig+0x348>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d142      	bne.n	800b518 <UART_SetConfig+0x364>
 800b492:	4b16      	ldr	r3, [pc, #88]	@ (800b4ec <UART_SetConfig+0x338>)
 800b494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b496:	f003 0307 	and.w	r3, r3, #7
 800b49a:	2b05      	cmp	r3, #5
 800b49c:	d838      	bhi.n	800b510 <UART_SetConfig+0x35c>
 800b49e:	a201      	add	r2, pc, #4	@ (adr r2, 800b4a4 <UART_SetConfig+0x2f0>)
 800b4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a4:	0800b4bd 	.word	0x0800b4bd
 800b4a8:	0800b4c5 	.word	0x0800b4c5
 800b4ac:	0800b4cd 	.word	0x0800b4cd
 800b4b0:	0800b4d5 	.word	0x0800b4d5
 800b4b4:	0800b501 	.word	0x0800b501
 800b4b8:	0800b509 	.word	0x0800b509
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4c2:	e14a      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b4c4:	2304      	movs	r3, #4
 800b4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ca:	e146      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b4cc:	2308      	movs	r3, #8
 800b4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4d2:	e142      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b4d4:	2310      	movs	r3, #16
 800b4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4da:	e13e      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b4dc:	cfff69f3 	.word	0xcfff69f3
 800b4e0:	58000c00 	.word	0x58000c00
 800b4e4:	11fff4ff 	.word	0x11fff4ff
 800b4e8:	40011000 	.word	0x40011000
 800b4ec:	58024400 	.word	0x58024400
 800b4f0:	40004400 	.word	0x40004400
 800b4f4:	40004800 	.word	0x40004800
 800b4f8:	40004c00 	.word	0x40004c00
 800b4fc:	40005000 	.word	0x40005000
 800b500:	2320      	movs	r3, #32
 800b502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b506:	e128      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b508:	2340      	movs	r3, #64	@ 0x40
 800b50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b50e:	e124      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b510:	2380      	movs	r3, #128	@ 0x80
 800b512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b516:	e120      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4acb      	ldr	r2, [pc, #812]	@ (800b84c <UART_SetConfig+0x698>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d176      	bne.n	800b610 <UART_SetConfig+0x45c>
 800b522:	4bcb      	ldr	r3, [pc, #812]	@ (800b850 <UART_SetConfig+0x69c>)
 800b524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b526:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b52a:	2b28      	cmp	r3, #40	@ 0x28
 800b52c:	d86c      	bhi.n	800b608 <UART_SetConfig+0x454>
 800b52e:	a201      	add	r2, pc, #4	@ (adr r2, 800b534 <UART_SetConfig+0x380>)
 800b530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b534:	0800b5d9 	.word	0x0800b5d9
 800b538:	0800b609 	.word	0x0800b609
 800b53c:	0800b609 	.word	0x0800b609
 800b540:	0800b609 	.word	0x0800b609
 800b544:	0800b609 	.word	0x0800b609
 800b548:	0800b609 	.word	0x0800b609
 800b54c:	0800b609 	.word	0x0800b609
 800b550:	0800b609 	.word	0x0800b609
 800b554:	0800b5e1 	.word	0x0800b5e1
 800b558:	0800b609 	.word	0x0800b609
 800b55c:	0800b609 	.word	0x0800b609
 800b560:	0800b609 	.word	0x0800b609
 800b564:	0800b609 	.word	0x0800b609
 800b568:	0800b609 	.word	0x0800b609
 800b56c:	0800b609 	.word	0x0800b609
 800b570:	0800b609 	.word	0x0800b609
 800b574:	0800b5e9 	.word	0x0800b5e9
 800b578:	0800b609 	.word	0x0800b609
 800b57c:	0800b609 	.word	0x0800b609
 800b580:	0800b609 	.word	0x0800b609
 800b584:	0800b609 	.word	0x0800b609
 800b588:	0800b609 	.word	0x0800b609
 800b58c:	0800b609 	.word	0x0800b609
 800b590:	0800b609 	.word	0x0800b609
 800b594:	0800b5f1 	.word	0x0800b5f1
 800b598:	0800b609 	.word	0x0800b609
 800b59c:	0800b609 	.word	0x0800b609
 800b5a0:	0800b609 	.word	0x0800b609
 800b5a4:	0800b609 	.word	0x0800b609
 800b5a8:	0800b609 	.word	0x0800b609
 800b5ac:	0800b609 	.word	0x0800b609
 800b5b0:	0800b609 	.word	0x0800b609
 800b5b4:	0800b5f9 	.word	0x0800b5f9
 800b5b8:	0800b609 	.word	0x0800b609
 800b5bc:	0800b609 	.word	0x0800b609
 800b5c0:	0800b609 	.word	0x0800b609
 800b5c4:	0800b609 	.word	0x0800b609
 800b5c8:	0800b609 	.word	0x0800b609
 800b5cc:	0800b609 	.word	0x0800b609
 800b5d0:	0800b609 	.word	0x0800b609
 800b5d4:	0800b601 	.word	0x0800b601
 800b5d8:	2301      	movs	r3, #1
 800b5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5de:	e0bc      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b5e0:	2304      	movs	r3, #4
 800b5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5e6:	e0b8      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b5e8:	2308      	movs	r3, #8
 800b5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ee:	e0b4      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b5f0:	2310      	movs	r3, #16
 800b5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5f6:	e0b0      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b5f8:	2320      	movs	r3, #32
 800b5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5fe:	e0ac      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b600:	2340      	movs	r3, #64	@ 0x40
 800b602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b606:	e0a8      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b608:	2380      	movs	r3, #128	@ 0x80
 800b60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b60e:	e0a4      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a8f      	ldr	r2, [pc, #572]	@ (800b854 <UART_SetConfig+0x6a0>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d130      	bne.n	800b67c <UART_SetConfig+0x4c8>
 800b61a:	4b8d      	ldr	r3, [pc, #564]	@ (800b850 <UART_SetConfig+0x69c>)
 800b61c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b61e:	f003 0307 	and.w	r3, r3, #7
 800b622:	2b05      	cmp	r3, #5
 800b624:	d826      	bhi.n	800b674 <UART_SetConfig+0x4c0>
 800b626:	a201      	add	r2, pc, #4	@ (adr r2, 800b62c <UART_SetConfig+0x478>)
 800b628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b62c:	0800b645 	.word	0x0800b645
 800b630:	0800b64d 	.word	0x0800b64d
 800b634:	0800b655 	.word	0x0800b655
 800b638:	0800b65d 	.word	0x0800b65d
 800b63c:	0800b665 	.word	0x0800b665
 800b640:	0800b66d 	.word	0x0800b66d
 800b644:	2300      	movs	r3, #0
 800b646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b64a:	e086      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b64c:	2304      	movs	r3, #4
 800b64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b652:	e082      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b654:	2308      	movs	r3, #8
 800b656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b65a:	e07e      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b65c:	2310      	movs	r3, #16
 800b65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b662:	e07a      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b664:	2320      	movs	r3, #32
 800b666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b66a:	e076      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b66c:	2340      	movs	r3, #64	@ 0x40
 800b66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b672:	e072      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b674:	2380      	movs	r3, #128	@ 0x80
 800b676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b67a:	e06e      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a75      	ldr	r2, [pc, #468]	@ (800b858 <UART_SetConfig+0x6a4>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d130      	bne.n	800b6e8 <UART_SetConfig+0x534>
 800b686:	4b72      	ldr	r3, [pc, #456]	@ (800b850 <UART_SetConfig+0x69c>)
 800b688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b68a:	f003 0307 	and.w	r3, r3, #7
 800b68e:	2b05      	cmp	r3, #5
 800b690:	d826      	bhi.n	800b6e0 <UART_SetConfig+0x52c>
 800b692:	a201      	add	r2, pc, #4	@ (adr r2, 800b698 <UART_SetConfig+0x4e4>)
 800b694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b698:	0800b6b1 	.word	0x0800b6b1
 800b69c:	0800b6b9 	.word	0x0800b6b9
 800b6a0:	0800b6c1 	.word	0x0800b6c1
 800b6a4:	0800b6c9 	.word	0x0800b6c9
 800b6a8:	0800b6d1 	.word	0x0800b6d1
 800b6ac:	0800b6d9 	.word	0x0800b6d9
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6b6:	e050      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b6b8:	2304      	movs	r3, #4
 800b6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6be:	e04c      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b6c0:	2308      	movs	r3, #8
 800b6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6c6:	e048      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b6c8:	2310      	movs	r3, #16
 800b6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ce:	e044      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b6d0:	2320      	movs	r3, #32
 800b6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6d6:	e040      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b6d8:	2340      	movs	r3, #64	@ 0x40
 800b6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6de:	e03c      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b6e0:	2380      	movs	r3, #128	@ 0x80
 800b6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6e6:	e038      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a5b      	ldr	r2, [pc, #364]	@ (800b85c <UART_SetConfig+0x6a8>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d130      	bne.n	800b754 <UART_SetConfig+0x5a0>
 800b6f2:	4b57      	ldr	r3, [pc, #348]	@ (800b850 <UART_SetConfig+0x69c>)
 800b6f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6f6:	f003 0307 	and.w	r3, r3, #7
 800b6fa:	2b05      	cmp	r3, #5
 800b6fc:	d826      	bhi.n	800b74c <UART_SetConfig+0x598>
 800b6fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b704 <UART_SetConfig+0x550>)
 800b700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b704:	0800b71d 	.word	0x0800b71d
 800b708:	0800b725 	.word	0x0800b725
 800b70c:	0800b72d 	.word	0x0800b72d
 800b710:	0800b735 	.word	0x0800b735
 800b714:	0800b73d 	.word	0x0800b73d
 800b718:	0800b745 	.word	0x0800b745
 800b71c:	2302      	movs	r3, #2
 800b71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b722:	e01a      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b724:	2304      	movs	r3, #4
 800b726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b72a:	e016      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b72c:	2308      	movs	r3, #8
 800b72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b732:	e012      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b734:	2310      	movs	r3, #16
 800b736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b73a:	e00e      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b73c:	2320      	movs	r3, #32
 800b73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b742:	e00a      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b744:	2340      	movs	r3, #64	@ 0x40
 800b746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b74a:	e006      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b74c:	2380      	movs	r3, #128	@ 0x80
 800b74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b752:	e002      	b.n	800b75a <UART_SetConfig+0x5a6>
 800b754:	2380      	movs	r3, #128	@ 0x80
 800b756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a3f      	ldr	r2, [pc, #252]	@ (800b85c <UART_SetConfig+0x6a8>)
 800b760:	4293      	cmp	r3, r2
 800b762:	f040 80f8 	bne.w	800b956 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b766:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b76a:	2b20      	cmp	r3, #32
 800b76c:	dc46      	bgt.n	800b7fc <UART_SetConfig+0x648>
 800b76e:	2b02      	cmp	r3, #2
 800b770:	f2c0 8082 	blt.w	800b878 <UART_SetConfig+0x6c4>
 800b774:	3b02      	subs	r3, #2
 800b776:	2b1e      	cmp	r3, #30
 800b778:	d87e      	bhi.n	800b878 <UART_SetConfig+0x6c4>
 800b77a:	a201      	add	r2, pc, #4	@ (adr r2, 800b780 <UART_SetConfig+0x5cc>)
 800b77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b780:	0800b803 	.word	0x0800b803
 800b784:	0800b879 	.word	0x0800b879
 800b788:	0800b80b 	.word	0x0800b80b
 800b78c:	0800b879 	.word	0x0800b879
 800b790:	0800b879 	.word	0x0800b879
 800b794:	0800b879 	.word	0x0800b879
 800b798:	0800b81b 	.word	0x0800b81b
 800b79c:	0800b879 	.word	0x0800b879
 800b7a0:	0800b879 	.word	0x0800b879
 800b7a4:	0800b879 	.word	0x0800b879
 800b7a8:	0800b879 	.word	0x0800b879
 800b7ac:	0800b879 	.word	0x0800b879
 800b7b0:	0800b879 	.word	0x0800b879
 800b7b4:	0800b879 	.word	0x0800b879
 800b7b8:	0800b82b 	.word	0x0800b82b
 800b7bc:	0800b879 	.word	0x0800b879
 800b7c0:	0800b879 	.word	0x0800b879
 800b7c4:	0800b879 	.word	0x0800b879
 800b7c8:	0800b879 	.word	0x0800b879
 800b7cc:	0800b879 	.word	0x0800b879
 800b7d0:	0800b879 	.word	0x0800b879
 800b7d4:	0800b879 	.word	0x0800b879
 800b7d8:	0800b879 	.word	0x0800b879
 800b7dc:	0800b879 	.word	0x0800b879
 800b7e0:	0800b879 	.word	0x0800b879
 800b7e4:	0800b879 	.word	0x0800b879
 800b7e8:	0800b879 	.word	0x0800b879
 800b7ec:	0800b879 	.word	0x0800b879
 800b7f0:	0800b879 	.word	0x0800b879
 800b7f4:	0800b879 	.word	0x0800b879
 800b7f8:	0800b86b 	.word	0x0800b86b
 800b7fc:	2b40      	cmp	r3, #64	@ 0x40
 800b7fe:	d037      	beq.n	800b870 <UART_SetConfig+0x6bc>
 800b800:	e03a      	b.n	800b878 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b802:	f7fd fda3 	bl	800934c <HAL_RCCEx_GetD3PCLK1Freq>
 800b806:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b808:	e03c      	b.n	800b884 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b80a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fd fdb2 	bl	8009378 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b818:	e034      	b.n	800b884 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b81a:	f107 0318 	add.w	r3, r7, #24
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fd fefe 	bl	8009620 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b828:	e02c      	b.n	800b884 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b82a:	4b09      	ldr	r3, [pc, #36]	@ (800b850 <UART_SetConfig+0x69c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f003 0320 	and.w	r3, r3, #32
 800b832:	2b00      	cmp	r3, #0
 800b834:	d016      	beq.n	800b864 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b836:	4b06      	ldr	r3, [pc, #24]	@ (800b850 <UART_SetConfig+0x69c>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	08db      	lsrs	r3, r3, #3
 800b83c:	f003 0303 	and.w	r3, r3, #3
 800b840:	4a07      	ldr	r2, [pc, #28]	@ (800b860 <UART_SetConfig+0x6ac>)
 800b842:	fa22 f303 	lsr.w	r3, r2, r3
 800b846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b848:	e01c      	b.n	800b884 <UART_SetConfig+0x6d0>
 800b84a:	bf00      	nop
 800b84c:	40011400 	.word	0x40011400
 800b850:	58024400 	.word	0x58024400
 800b854:	40007800 	.word	0x40007800
 800b858:	40007c00 	.word	0x40007c00
 800b85c:	58000c00 	.word	0x58000c00
 800b860:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b864:	4b9d      	ldr	r3, [pc, #628]	@ (800badc <UART_SetConfig+0x928>)
 800b866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b868:	e00c      	b.n	800b884 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b86a:	4b9d      	ldr	r3, [pc, #628]	@ (800bae0 <UART_SetConfig+0x92c>)
 800b86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b86e:	e009      	b.n	800b884 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b870:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b876:	e005      	b.n	800b884 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b878:	2300      	movs	r3, #0
 800b87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b882:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b886:	2b00      	cmp	r3, #0
 800b888:	f000 81de 	beq.w	800bc48 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b890:	4a94      	ldr	r2, [pc, #592]	@ (800bae4 <UART_SetConfig+0x930>)
 800b892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b896:	461a      	mov	r2, r3
 800b898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b89a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b89e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	685a      	ldr	r2, [r3, #4]
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	005b      	lsls	r3, r3, #1
 800b8a8:	4413      	add	r3, r2
 800b8aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d305      	bcc.n	800b8bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d903      	bls.n	800b8c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b8c2:	e1c1      	b.n	800bc48 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	60bb      	str	r3, [r7, #8]
 800b8ca:	60fa      	str	r2, [r7, #12]
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8d0:	4a84      	ldr	r2, [pc, #528]	@ (800bae4 <UART_SetConfig+0x930>)
 800b8d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	2200      	movs	r2, #0
 800b8da:	603b      	str	r3, [r7, #0]
 800b8dc:	607a      	str	r2, [r7, #4]
 800b8de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b8e6:	f7f4 fd53 	bl	8000390 <__aeabi_uldivmod>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	f04f 0200 	mov.w	r2, #0
 800b8f6:	f04f 0300 	mov.w	r3, #0
 800b8fa:	020b      	lsls	r3, r1, #8
 800b8fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b900:	0202      	lsls	r2, r0, #8
 800b902:	6979      	ldr	r1, [r7, #20]
 800b904:	6849      	ldr	r1, [r1, #4]
 800b906:	0849      	lsrs	r1, r1, #1
 800b908:	2000      	movs	r0, #0
 800b90a:	460c      	mov	r4, r1
 800b90c:	4605      	mov	r5, r0
 800b90e:	eb12 0804 	adds.w	r8, r2, r4
 800b912:	eb43 0905 	adc.w	r9, r3, r5
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	469a      	mov	sl, r3
 800b91e:	4693      	mov	fp, r2
 800b920:	4652      	mov	r2, sl
 800b922:	465b      	mov	r3, fp
 800b924:	4640      	mov	r0, r8
 800b926:	4649      	mov	r1, r9
 800b928:	f7f4 fd32 	bl	8000390 <__aeabi_uldivmod>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	4613      	mov	r3, r2
 800b932:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b936:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b93a:	d308      	bcc.n	800b94e <UART_SetConfig+0x79a>
 800b93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b93e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b942:	d204      	bcs.n	800b94e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b94a:	60da      	str	r2, [r3, #12]
 800b94c:	e17c      	b.n	800bc48 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b954:	e178      	b.n	800bc48 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	69db      	ldr	r3, [r3, #28]
 800b95a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b95e:	f040 80c5 	bne.w	800baec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b962:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b966:	2b20      	cmp	r3, #32
 800b968:	dc48      	bgt.n	800b9fc <UART_SetConfig+0x848>
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	db7b      	blt.n	800ba66 <UART_SetConfig+0x8b2>
 800b96e:	2b20      	cmp	r3, #32
 800b970:	d879      	bhi.n	800ba66 <UART_SetConfig+0x8b2>
 800b972:	a201      	add	r2, pc, #4	@ (adr r2, 800b978 <UART_SetConfig+0x7c4>)
 800b974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b978:	0800ba03 	.word	0x0800ba03
 800b97c:	0800ba0b 	.word	0x0800ba0b
 800b980:	0800ba67 	.word	0x0800ba67
 800b984:	0800ba67 	.word	0x0800ba67
 800b988:	0800ba13 	.word	0x0800ba13
 800b98c:	0800ba67 	.word	0x0800ba67
 800b990:	0800ba67 	.word	0x0800ba67
 800b994:	0800ba67 	.word	0x0800ba67
 800b998:	0800ba23 	.word	0x0800ba23
 800b99c:	0800ba67 	.word	0x0800ba67
 800b9a0:	0800ba67 	.word	0x0800ba67
 800b9a4:	0800ba67 	.word	0x0800ba67
 800b9a8:	0800ba67 	.word	0x0800ba67
 800b9ac:	0800ba67 	.word	0x0800ba67
 800b9b0:	0800ba67 	.word	0x0800ba67
 800b9b4:	0800ba67 	.word	0x0800ba67
 800b9b8:	0800ba33 	.word	0x0800ba33
 800b9bc:	0800ba67 	.word	0x0800ba67
 800b9c0:	0800ba67 	.word	0x0800ba67
 800b9c4:	0800ba67 	.word	0x0800ba67
 800b9c8:	0800ba67 	.word	0x0800ba67
 800b9cc:	0800ba67 	.word	0x0800ba67
 800b9d0:	0800ba67 	.word	0x0800ba67
 800b9d4:	0800ba67 	.word	0x0800ba67
 800b9d8:	0800ba67 	.word	0x0800ba67
 800b9dc:	0800ba67 	.word	0x0800ba67
 800b9e0:	0800ba67 	.word	0x0800ba67
 800b9e4:	0800ba67 	.word	0x0800ba67
 800b9e8:	0800ba67 	.word	0x0800ba67
 800b9ec:	0800ba67 	.word	0x0800ba67
 800b9f0:	0800ba67 	.word	0x0800ba67
 800b9f4:	0800ba67 	.word	0x0800ba67
 800b9f8:	0800ba59 	.word	0x0800ba59
 800b9fc:	2b40      	cmp	r3, #64	@ 0x40
 800b9fe:	d02e      	beq.n	800ba5e <UART_SetConfig+0x8aa>
 800ba00:	e031      	b.n	800ba66 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba02:	f7fb fced 	bl	80073e0 <HAL_RCC_GetPCLK1Freq>
 800ba06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba08:	e033      	b.n	800ba72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba0a:	f7fb fcff 	bl	800740c <HAL_RCC_GetPCLK2Freq>
 800ba0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba10:	e02f      	b.n	800ba72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7fd fcae 	bl	8009378 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba20:	e027      	b.n	800ba72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba22:	f107 0318 	add.w	r3, r7, #24
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7fd fdfa 	bl	8009620 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba30:	e01f      	b.n	800ba72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba32:	4b2d      	ldr	r3, [pc, #180]	@ (800bae8 <UART_SetConfig+0x934>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f003 0320 	and.w	r3, r3, #32
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d009      	beq.n	800ba52 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba3e:	4b2a      	ldr	r3, [pc, #168]	@ (800bae8 <UART_SetConfig+0x934>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	08db      	lsrs	r3, r3, #3
 800ba44:	f003 0303 	and.w	r3, r3, #3
 800ba48:	4a24      	ldr	r2, [pc, #144]	@ (800badc <UART_SetConfig+0x928>)
 800ba4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba50:	e00f      	b.n	800ba72 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ba52:	4b22      	ldr	r3, [pc, #136]	@ (800badc <UART_SetConfig+0x928>)
 800ba54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba56:	e00c      	b.n	800ba72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba58:	4b21      	ldr	r3, [pc, #132]	@ (800bae0 <UART_SetConfig+0x92c>)
 800ba5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba5c:	e009      	b.n	800ba72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba64:	e005      	b.n	800ba72 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ba66:	2300      	movs	r3, #0
 800ba68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ba70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ba72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f000 80e7 	beq.w	800bc48 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba7e:	4a19      	ldr	r2, [pc, #100]	@ (800bae4 <UART_SetConfig+0x930>)
 800ba80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba84:	461a      	mov	r2, r3
 800ba86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba88:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba8c:	005a      	lsls	r2, r3, #1
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	085b      	lsrs	r3, r3, #1
 800ba94:	441a      	add	r2, r3
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800baa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa2:	2b0f      	cmp	r3, #15
 800baa4:	d916      	bls.n	800bad4 <UART_SetConfig+0x920>
 800baa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800baac:	d212      	bcs.n	800bad4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800baae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	f023 030f 	bic.w	r3, r3, #15
 800bab6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baba:	085b      	lsrs	r3, r3, #1
 800babc:	b29b      	uxth	r3, r3
 800babe:	f003 0307 	and.w	r3, r3, #7
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bac6:	4313      	orrs	r3, r2
 800bac8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bad0:	60da      	str	r2, [r3, #12]
 800bad2:	e0b9      	b.n	800bc48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bada:	e0b5      	b.n	800bc48 <UART_SetConfig+0xa94>
 800badc:	03d09000 	.word	0x03d09000
 800bae0:	003d0900 	.word	0x003d0900
 800bae4:	0800e378 	.word	0x0800e378
 800bae8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800baec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800baf0:	2b20      	cmp	r3, #32
 800baf2:	dc49      	bgt.n	800bb88 <UART_SetConfig+0x9d4>
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	db7c      	blt.n	800bbf2 <UART_SetConfig+0xa3e>
 800baf8:	2b20      	cmp	r3, #32
 800bafa:	d87a      	bhi.n	800bbf2 <UART_SetConfig+0xa3e>
 800bafc:	a201      	add	r2, pc, #4	@ (adr r2, 800bb04 <UART_SetConfig+0x950>)
 800bafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb02:	bf00      	nop
 800bb04:	0800bb8f 	.word	0x0800bb8f
 800bb08:	0800bb97 	.word	0x0800bb97
 800bb0c:	0800bbf3 	.word	0x0800bbf3
 800bb10:	0800bbf3 	.word	0x0800bbf3
 800bb14:	0800bb9f 	.word	0x0800bb9f
 800bb18:	0800bbf3 	.word	0x0800bbf3
 800bb1c:	0800bbf3 	.word	0x0800bbf3
 800bb20:	0800bbf3 	.word	0x0800bbf3
 800bb24:	0800bbaf 	.word	0x0800bbaf
 800bb28:	0800bbf3 	.word	0x0800bbf3
 800bb2c:	0800bbf3 	.word	0x0800bbf3
 800bb30:	0800bbf3 	.word	0x0800bbf3
 800bb34:	0800bbf3 	.word	0x0800bbf3
 800bb38:	0800bbf3 	.word	0x0800bbf3
 800bb3c:	0800bbf3 	.word	0x0800bbf3
 800bb40:	0800bbf3 	.word	0x0800bbf3
 800bb44:	0800bbbf 	.word	0x0800bbbf
 800bb48:	0800bbf3 	.word	0x0800bbf3
 800bb4c:	0800bbf3 	.word	0x0800bbf3
 800bb50:	0800bbf3 	.word	0x0800bbf3
 800bb54:	0800bbf3 	.word	0x0800bbf3
 800bb58:	0800bbf3 	.word	0x0800bbf3
 800bb5c:	0800bbf3 	.word	0x0800bbf3
 800bb60:	0800bbf3 	.word	0x0800bbf3
 800bb64:	0800bbf3 	.word	0x0800bbf3
 800bb68:	0800bbf3 	.word	0x0800bbf3
 800bb6c:	0800bbf3 	.word	0x0800bbf3
 800bb70:	0800bbf3 	.word	0x0800bbf3
 800bb74:	0800bbf3 	.word	0x0800bbf3
 800bb78:	0800bbf3 	.word	0x0800bbf3
 800bb7c:	0800bbf3 	.word	0x0800bbf3
 800bb80:	0800bbf3 	.word	0x0800bbf3
 800bb84:	0800bbe5 	.word	0x0800bbe5
 800bb88:	2b40      	cmp	r3, #64	@ 0x40
 800bb8a:	d02e      	beq.n	800bbea <UART_SetConfig+0xa36>
 800bb8c:	e031      	b.n	800bbf2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb8e:	f7fb fc27 	bl	80073e0 <HAL_RCC_GetPCLK1Freq>
 800bb92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bb94:	e033      	b.n	800bbfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb96:	f7fb fc39 	bl	800740c <HAL_RCC_GetPCLK2Freq>
 800bb9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bb9c:	e02f      	b.n	800bbfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fd fbe8 	bl	8009378 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbac:	e027      	b.n	800bbfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbae:	f107 0318 	add.w	r3, r7, #24
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fd fd34 	bl	8009620 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbbc:	e01f      	b.n	800bbfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbbe:	4b2d      	ldr	r3, [pc, #180]	@ (800bc74 <UART_SetConfig+0xac0>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f003 0320 	and.w	r3, r3, #32
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d009      	beq.n	800bbde <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bbca:	4b2a      	ldr	r3, [pc, #168]	@ (800bc74 <UART_SetConfig+0xac0>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	08db      	lsrs	r3, r3, #3
 800bbd0:	f003 0303 	and.w	r3, r3, #3
 800bbd4:	4a28      	ldr	r2, [pc, #160]	@ (800bc78 <UART_SetConfig+0xac4>)
 800bbd6:	fa22 f303 	lsr.w	r3, r2, r3
 800bbda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bbdc:	e00f      	b.n	800bbfe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bbde:	4b26      	ldr	r3, [pc, #152]	@ (800bc78 <UART_SetConfig+0xac4>)
 800bbe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbe2:	e00c      	b.n	800bbfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bbe4:	4b25      	ldr	r3, [pc, #148]	@ (800bc7c <UART_SetConfig+0xac8>)
 800bbe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbe8:	e009      	b.n	800bbfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bbee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbf0:	e005      	b.n	800bbfe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bbfc:	bf00      	nop
    }

    if (pclk != 0U)
 800bbfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d021      	beq.n	800bc48 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc08:	4a1d      	ldr	r2, [pc, #116]	@ (800bc80 <UART_SetConfig+0xacc>)
 800bc0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc0e:	461a      	mov	r2, r3
 800bc10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc12:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	085b      	lsrs	r3, r3, #1
 800bc1c:	441a      	add	r2, r3
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc26:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc2a:	2b0f      	cmp	r3, #15
 800bc2c:	d909      	bls.n	800bc42 <UART_SetConfig+0xa8e>
 800bc2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc34:	d205      	bcs.n	800bc42 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc38:	b29a      	uxth	r2, r3
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	60da      	str	r2, [r3, #12]
 800bc40:	e002      	b.n	800bc48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	2201      	movs	r2, #1
 800bc54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	2200      	movs	r2, #0
 800bc62:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bc64:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3748      	adds	r7, #72	@ 0x48
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc72:	bf00      	nop
 800bc74:	58024400 	.word	0x58024400
 800bc78:	03d09000 	.word	0x03d09000
 800bc7c:	003d0900 	.word	0x003d0900
 800bc80:	0800e378 	.word	0x0800e378

0800bc84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc90:	f003 0308 	and.w	r3, r3, #8
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00a      	beq.n	800bcae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	430a      	orrs	r2, r1
 800bcac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcb2:	f003 0301 	and.w	r3, r3, #1
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00a      	beq.n	800bcd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	430a      	orrs	r2, r1
 800bcce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd4:	f003 0302 	and.w	r3, r3, #2
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00a      	beq.n	800bcf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	430a      	orrs	r2, r1
 800bcf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcf6:	f003 0304 	and.w	r3, r3, #4
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00a      	beq.n	800bd14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	430a      	orrs	r2, r1
 800bd12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd18:	f003 0310 	and.w	r3, r3, #16
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00a      	beq.n	800bd36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	430a      	orrs	r2, r1
 800bd34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd3a:	f003 0320 	and.w	r3, r3, #32
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d00a      	beq.n	800bd58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	430a      	orrs	r2, r1
 800bd56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d01a      	beq.n	800bd9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	430a      	orrs	r2, r1
 800bd78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd82:	d10a      	bne.n	800bd9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	430a      	orrs	r2, r1
 800bd98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00a      	beq.n	800bdbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	605a      	str	r2, [r3, #4]
  }
}
 800bdbc:	bf00      	nop
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b098      	sub	sp, #96	@ 0x60
 800bdcc:	af02      	add	r7, sp, #8
 800bdce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bdd8:	f7f5 fe50 	bl	8001a7c <HAL_GetTick>
 800bddc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f003 0308 	and.w	r3, r3, #8
 800bde8:	2b08      	cmp	r3, #8
 800bdea:	d12f      	bne.n	800be4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 f88e 	bl	800bf1c <UART_WaitOnFlagUntilTimeout>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d022      	beq.n	800be4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be0e:	e853 3f00 	ldrex	r3, [r3]
 800be12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be1a:	653b      	str	r3, [r7, #80]	@ 0x50
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	461a      	mov	r2, r3
 800be22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be24:	647b      	str	r3, [r7, #68]	@ 0x44
 800be26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be2c:	e841 2300 	strex	r3, r2, [r1]
 800be30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1e6      	bne.n	800be06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2220      	movs	r2, #32
 800be3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be48:	2303      	movs	r3, #3
 800be4a:	e063      	b.n	800bf14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f003 0304 	and.w	r3, r3, #4
 800be56:	2b04      	cmp	r3, #4
 800be58:	d149      	bne.n	800beee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be5a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be62:	2200      	movs	r2, #0
 800be64:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 f857 	bl	800bf1c <UART_WaitOnFlagUntilTimeout>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d03c      	beq.n	800beee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be7c:	e853 3f00 	ldrex	r3, [r3]
 800be80:	623b      	str	r3, [r7, #32]
   return(result);
 800be82:	6a3b      	ldr	r3, [r7, #32]
 800be84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	461a      	mov	r2, r3
 800be90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be92:	633b      	str	r3, [r7, #48]	@ 0x30
 800be94:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be9a:	e841 2300 	strex	r3, r2, [r1]
 800be9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d1e6      	bne.n	800be74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	3308      	adds	r3, #8
 800beac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	e853 3f00 	ldrex	r3, [r3]
 800beb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f023 0301 	bic.w	r3, r3, #1
 800bebc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	3308      	adds	r3, #8
 800bec4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bec6:	61fa      	str	r2, [r7, #28]
 800bec8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beca:	69b9      	ldr	r1, [r7, #24]
 800becc:	69fa      	ldr	r2, [r7, #28]
 800bece:	e841 2300 	strex	r3, r2, [r1]
 800bed2:	617b      	str	r3, [r7, #20]
   return(result);
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d1e5      	bne.n	800bea6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2220      	movs	r2, #32
 800bede:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800beea:	2303      	movs	r3, #3
 800beec:	e012      	b.n	800bf14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2220      	movs	r2, #32
 800bef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2220      	movs	r2, #32
 800befa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf12:	2300      	movs	r3, #0
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3758      	adds	r7, #88	@ 0x58
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	603b      	str	r3, [r7, #0]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf2c:	e04f      	b.n	800bfce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf34:	d04b      	beq.n	800bfce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf36:	f7f5 fda1 	bl	8001a7c <HAL_GetTick>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	69ba      	ldr	r2, [r7, #24]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d302      	bcc.n	800bf4c <UART_WaitOnFlagUntilTimeout+0x30>
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d101      	bne.n	800bf50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	e04e      	b.n	800bfee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f003 0304 	and.w	r3, r3, #4
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d037      	beq.n	800bfce <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	2b80      	cmp	r3, #128	@ 0x80
 800bf62:	d034      	beq.n	800bfce <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	2b40      	cmp	r3, #64	@ 0x40
 800bf68:	d031      	beq.n	800bfce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	69db      	ldr	r3, [r3, #28]
 800bf70:	f003 0308 	and.w	r3, r3, #8
 800bf74:	2b08      	cmp	r3, #8
 800bf76:	d110      	bne.n	800bf9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2208      	movs	r2, #8
 800bf7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f000 f95b 	bl	800c23c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2208      	movs	r2, #8
 800bf8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e029      	b.n	800bfee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	69db      	ldr	r3, [r3, #28]
 800bfa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bfa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bfa8:	d111      	bne.n	800bfce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bfb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f000 f941 	bl	800c23c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2220      	movs	r2, #32
 800bfbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bfca:	2303      	movs	r3, #3
 800bfcc:	e00f      	b.n	800bfee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	69da      	ldr	r2, [r3, #28]
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	4013      	ands	r3, r2
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	bf0c      	ite	eq
 800bfde:	2301      	moveq	r3, #1
 800bfe0:	2300      	movne	r3, #0
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	79fb      	ldrb	r3, [r7, #7]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d0a0      	beq.n	800bf2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
	...

0800bff8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b0a3      	sub	sp, #140	@ 0x8c
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	4613      	mov	r3, r2
 800c004:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	88fa      	ldrh	r2, [r7, #6]
 800c010:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	88fa      	ldrh	r2, [r7, #6]
 800c018:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2200      	movs	r2, #0
 800c020:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c02a:	d10e      	bne.n	800c04a <UART_Start_Receive_IT+0x52>
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d105      	bne.n	800c040 <UART_Start_Receive_IT+0x48>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c03a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c03e:	e02d      	b.n	800c09c <UART_Start_Receive_IT+0xa4>
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	22ff      	movs	r2, #255	@ 0xff
 800c044:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c048:	e028      	b.n	800c09c <UART_Start_Receive_IT+0xa4>
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d10d      	bne.n	800c06e <UART_Start_Receive_IT+0x76>
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	691b      	ldr	r3, [r3, #16]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d104      	bne.n	800c064 <UART_Start_Receive_IT+0x6c>
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	22ff      	movs	r2, #255	@ 0xff
 800c05e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c062:	e01b      	b.n	800c09c <UART_Start_Receive_IT+0xa4>
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	227f      	movs	r2, #127	@ 0x7f
 800c068:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c06c:	e016      	b.n	800c09c <UART_Start_Receive_IT+0xa4>
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c076:	d10d      	bne.n	800c094 <UART_Start_Receive_IT+0x9c>
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d104      	bne.n	800c08a <UART_Start_Receive_IT+0x92>
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	227f      	movs	r2, #127	@ 0x7f
 800c084:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c088:	e008      	b.n	800c09c <UART_Start_Receive_IT+0xa4>
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	223f      	movs	r2, #63	@ 0x3f
 800c08e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c092:	e003      	b.n	800c09c <UART_Start_Receive_IT+0xa4>
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2222      	movs	r2, #34	@ 0x22
 800c0a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	3308      	adds	r3, #8
 800c0b2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0b6:	e853 3f00 	ldrex	r3, [r3]
 800c0ba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c0bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0be:	f043 0301 	orr.w	r3, r3, #1
 800c0c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	3308      	adds	r3, #8
 800c0cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c0d0:	673a      	str	r2, [r7, #112]	@ 0x70
 800c0d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c0d6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c0d8:	e841 2300 	strex	r3, r2, [r1]
 800c0dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800c0de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d1e3      	bne.n	800c0ac <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0ec:	d14f      	bne.n	800c18e <UART_Start_Receive_IT+0x196>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c0f4:	88fa      	ldrh	r2, [r7, #6]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d349      	bcc.n	800c18e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c102:	d107      	bne.n	800c114 <UART_Start_Receive_IT+0x11c>
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	691b      	ldr	r3, [r3, #16]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d103      	bne.n	800c114 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	4a47      	ldr	r2, [pc, #284]	@ (800c22c <UART_Start_Receive_IT+0x234>)
 800c110:	675a      	str	r2, [r3, #116]	@ 0x74
 800c112:	e002      	b.n	800c11a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	4a46      	ldr	r2, [pc, #280]	@ (800c230 <UART_Start_Receive_IT+0x238>)
 800c118:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d01a      	beq.n	800c158 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c12a:	e853 3f00 	ldrex	r3, [r3]
 800c12e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c136:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	461a      	mov	r2, r3
 800c140:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c144:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c146:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c148:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c14a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c14c:	e841 2300 	strex	r3, r2, [r1]
 800c150:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800c152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c154:	2b00      	cmp	r3, #0
 800c156:	d1e4      	bne.n	800c122 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	3308      	adds	r3, #8
 800c15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c162:	e853 3f00 	ldrex	r3, [r3]
 800c166:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c16a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c16e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	3308      	adds	r3, #8
 800c176:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c178:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c17a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c17c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c17e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c180:	e841 2300 	strex	r3, r2, [r1]
 800c184:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d1e5      	bne.n	800c158 <UART_Start_Receive_IT+0x160>
 800c18c:	e046      	b.n	800c21c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c196:	d107      	bne.n	800c1a8 <UART_Start_Receive_IT+0x1b0>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	691b      	ldr	r3, [r3, #16]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d103      	bne.n	800c1a8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	4a24      	ldr	r2, [pc, #144]	@ (800c234 <UART_Start_Receive_IT+0x23c>)
 800c1a4:	675a      	str	r2, [r3, #116]	@ 0x74
 800c1a6:	e002      	b.n	800c1ae <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	4a23      	ldr	r2, [pc, #140]	@ (800c238 <UART_Start_Receive_IT+0x240>)
 800c1ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	691b      	ldr	r3, [r3, #16]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d019      	beq.n	800c1ea <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1be:	e853 3f00 	ldrex	r3, [r3]
 800c1c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c1ca:	677b      	str	r3, [r7, #116]	@ 0x74
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1d6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c1da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c1dc:	e841 2300 	strex	r3, r2, [r1]
 800c1e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1e6      	bne.n	800c1b6 <UART_Start_Receive_IT+0x1be>
 800c1e8:	e018      	b.n	800c21c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	e853 3f00 	ldrex	r3, [r3]
 800c1f6:	613b      	str	r3, [r7, #16]
   return(result);
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	f043 0320 	orr.w	r3, r3, #32
 800c1fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	461a      	mov	r2, r3
 800c206:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c208:	623b      	str	r3, [r7, #32]
 800c20a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20c:	69f9      	ldr	r1, [r7, #28]
 800c20e:	6a3a      	ldr	r2, [r7, #32]
 800c210:	e841 2300 	strex	r3, r2, [r1]
 800c214:	61bb      	str	r3, [r7, #24]
   return(result);
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d1e6      	bne.n	800c1ea <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	378c      	adds	r7, #140	@ 0x8c
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr
 800c22a:	bf00      	nop
 800c22c:	0800cda1 	.word	0x0800cda1
 800c230:	0800ca41 	.word	0x0800ca41
 800c234:	0800c889 	.word	0x0800c889
 800c238:	0800c6d1 	.word	0x0800c6d1

0800c23c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b095      	sub	sp, #84	@ 0x54
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c24a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c24c:	e853 3f00 	ldrex	r3, [r3]
 800c250:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c254:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c258:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	461a      	mov	r2, r3
 800c260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c262:	643b      	str	r3, [r7, #64]	@ 0x40
 800c264:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c266:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c268:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c26a:	e841 2300 	strex	r3, r2, [r1]
 800c26e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c272:	2b00      	cmp	r3, #0
 800c274:	d1e6      	bne.n	800c244 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	3308      	adds	r3, #8
 800c27c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c27e:	6a3b      	ldr	r3, [r7, #32]
 800c280:	e853 3f00 	ldrex	r3, [r3]
 800c284:	61fb      	str	r3, [r7, #28]
   return(result);
 800c286:	69fa      	ldr	r2, [r7, #28]
 800c288:	4b1e      	ldr	r3, [pc, #120]	@ (800c304 <UART_EndRxTransfer+0xc8>)
 800c28a:	4013      	ands	r3, r2
 800c28c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	3308      	adds	r3, #8
 800c294:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c296:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c298:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c29a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c29c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c29e:	e841 2300 	strex	r3, r2, [r1]
 800c2a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d1e5      	bne.n	800c276 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d118      	bne.n	800c2e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	e853 3f00 	ldrex	r3, [r3]
 800c2be:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	f023 0310 	bic.w	r3, r3, #16
 800c2c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2d0:	61bb      	str	r3, [r7, #24]
 800c2d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d4:	6979      	ldr	r1, [r7, #20]
 800c2d6:	69ba      	ldr	r2, [r7, #24]
 800c2d8:	e841 2300 	strex	r3, r2, [r1]
 800c2dc:	613b      	str	r3, [r7, #16]
   return(result);
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d1e6      	bne.n	800c2b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2220      	movs	r2, #32
 800c2e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c2f8:	bf00      	nop
 800c2fa:	3754      	adds	r7, #84	@ 0x54
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr
 800c304:	effffffe 	.word	0xeffffffe

0800c308 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c314:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2200      	movs	r2, #0
 800c31a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2200      	movs	r2, #0
 800c322:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f7fe ff2e 	bl	800b188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c32c:	bf00      	nop
 800c32e:	3710      	adds	r7, #16
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c334:	b480      	push	{r7}
 800c336:	b08f      	sub	sp, #60	@ 0x3c
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c342:	2b21      	cmp	r3, #33	@ 0x21
 800c344:	d14c      	bne.n	800c3e0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d132      	bne.n	800c3b8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c358:	6a3b      	ldr	r3, [r7, #32]
 800c35a:	e853 3f00 	ldrex	r3, [r3]
 800c35e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c360:	69fb      	ldr	r3, [r7, #28]
 800c362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c366:	637b      	str	r3, [r7, #52]	@ 0x34
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	461a      	mov	r2, r3
 800c36e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c370:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c372:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c374:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c378:	e841 2300 	strex	r3, r2, [r1]
 800c37c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c380:	2b00      	cmp	r3, #0
 800c382:	d1e6      	bne.n	800c352 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	e853 3f00 	ldrex	r3, [r3]
 800c390:	60bb      	str	r3, [r7, #8]
   return(result);
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c398:	633b      	str	r3, [r7, #48]	@ 0x30
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	461a      	mov	r2, r3
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a2:	61bb      	str	r3, [r7, #24]
 800c3a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a6:	6979      	ldr	r1, [r7, #20]
 800c3a8:	69ba      	ldr	r2, [r7, #24]
 800c3aa:	e841 2300 	strex	r3, r2, [r1]
 800c3ae:	613b      	str	r3, [r7, #16]
   return(result);
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d1e6      	bne.n	800c384 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c3b6:	e013      	b.n	800c3e0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3bc:	781a      	ldrb	r2, [r3, #0]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3c8:	1c5a      	adds	r2, r3, #1
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800c3e0:	bf00      	nop
 800c3e2:	373c      	adds	r7, #60	@ 0x3c
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b091      	sub	sp, #68	@ 0x44
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3fa:	2b21      	cmp	r3, #33	@ 0x21
 800c3fc:	d151      	bne.n	800c4a2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c404:	b29b      	uxth	r3, r3
 800c406:	2b00      	cmp	r3, #0
 800c408:	d132      	bne.n	800c470 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c412:	e853 3f00 	ldrex	r3, [r3]
 800c416:	623b      	str	r3, [r7, #32]
   return(result);
 800c418:	6a3b      	ldr	r3, [r7, #32]
 800c41a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c41e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	461a      	mov	r2, r3
 800c426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c428:	633b      	str	r3, [r7, #48]	@ 0x30
 800c42a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c42e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c430:	e841 2300 	strex	r3, r2, [r1]
 800c434:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d1e6      	bne.n	800c40a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	e853 3f00 	ldrex	r3, [r3]
 800c448:	60fb      	str	r3, [r7, #12]
   return(result);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c450:	637b      	str	r3, [r7, #52]	@ 0x34
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	461a      	mov	r2, r3
 800c458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c45a:	61fb      	str	r3, [r7, #28]
 800c45c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c45e:	69b9      	ldr	r1, [r7, #24]
 800c460:	69fa      	ldr	r2, [r7, #28]
 800c462:	e841 2300 	strex	r3, r2, [r1]
 800c466:	617b      	str	r3, [r7, #20]
   return(result);
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d1e6      	bne.n	800c43c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c46e:	e018      	b.n	800c4a2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c474:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c478:	881b      	ldrh	r3, [r3, #0]
 800c47a:	461a      	mov	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c484:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c48a:	1c9a      	adds	r2, r3, #2
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c496:	b29b      	uxth	r3, r3
 800c498:	3b01      	subs	r3, #1
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800c4a2:	bf00      	nop
 800c4a4:	3744      	adds	r7, #68	@ 0x44
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr

0800c4ae <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c4ae:	b480      	push	{r7}
 800c4b0:	b091      	sub	sp, #68	@ 0x44
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4bc:	2b21      	cmp	r3, #33	@ 0x21
 800c4be:	d160      	bne.n	800c582 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c4c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c4c8:	e057      	b.n	800c57a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d133      	bne.n	800c53e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	3308      	adds	r3, #8
 800c4dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e0:	e853 3f00 	ldrex	r3, [r3]
 800c4e4:	623b      	str	r3, [r7, #32]
   return(result);
 800c4e6:	6a3b      	ldr	r3, [r7, #32]
 800c4e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c4ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	3308      	adds	r3, #8
 800c4f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4f6:	633a      	str	r2, [r7, #48]	@ 0x30
 800c4f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c4fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4fe:	e841 2300 	strex	r3, r2, [r1]
 800c502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c506:	2b00      	cmp	r3, #0
 800c508:	d1e5      	bne.n	800c4d6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	e853 3f00 	ldrex	r3, [r3]
 800c516:	60fb      	str	r3, [r7, #12]
   return(result);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c51e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	461a      	mov	r2, r3
 800c526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c528:	61fb      	str	r3, [r7, #28]
 800c52a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c52c:	69b9      	ldr	r1, [r7, #24]
 800c52e:	69fa      	ldr	r2, [r7, #28]
 800c530:	e841 2300 	strex	r3, r2, [r1]
 800c534:	617b      	str	r3, [r7, #20]
   return(result);
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1e6      	bne.n	800c50a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800c53c:	e021      	b.n	800c582 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	69db      	ldr	r3, [r3, #28]
 800c544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d013      	beq.n	800c574 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c550:	781a      	ldrb	r2, [r3, #0]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c55c:	1c5a      	adds	r2, r3, #1
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c568:	b29b      	uxth	r3, r3
 800c56a:	3b01      	subs	r3, #1
 800c56c:	b29a      	uxth	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c574:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c576:	3b01      	subs	r3, #1
 800c578:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c57a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d1a4      	bne.n	800c4ca <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800c580:	e7ff      	b.n	800c582 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800c582:	bf00      	nop
 800c584:	3744      	adds	r7, #68	@ 0x44
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c58e:	b480      	push	{r7}
 800c590:	b091      	sub	sp, #68	@ 0x44
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c59c:	2b21      	cmp	r3, #33	@ 0x21
 800c59e:	d165      	bne.n	800c66c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c5a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c5a8:	e05c      	b.n	800c664 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d133      	bne.n	800c61e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	3308      	adds	r3, #8
 800c5bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5be:	6a3b      	ldr	r3, [r7, #32]
 800c5c0:	e853 3f00 	ldrex	r3, [r3]
 800c5c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c5cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	3308      	adds	r3, #8
 800c5d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c5d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c5dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5de:	e841 2300 	strex	r3, r2, [r1]
 800c5e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d1e5      	bne.n	800c5b6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	e853 3f00 	ldrex	r3, [r3]
 800c5f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	461a      	mov	r2, r3
 800c606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c608:	61bb      	str	r3, [r7, #24]
 800c60a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60c:	6979      	ldr	r1, [r7, #20]
 800c60e:	69ba      	ldr	r2, [r7, #24]
 800c610:	e841 2300 	strex	r3, r2, [r1]
 800c614:	613b      	str	r3, [r7, #16]
   return(result);
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d1e6      	bne.n	800c5ea <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800c61c:	e026      	b.n	800c66c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	69db      	ldr	r3, [r3, #28]
 800c624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d018      	beq.n	800c65e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c630:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c634:	881b      	ldrh	r3, [r3, #0]
 800c636:	461a      	mov	r2, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c640:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c646:	1c9a      	adds	r2, r3, #2
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c652:	b29b      	uxth	r3, r3
 800c654:	3b01      	subs	r3, #1
 800c656:	b29a      	uxth	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c65e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c660:	3b01      	subs	r3, #1
 800c662:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c664:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c666:	2b00      	cmp	r3, #0
 800c668:	d19f      	bne.n	800c5aa <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800c66a:	e7ff      	b.n	800c66c <UART_TxISR_16BIT_FIFOEN+0xde>
 800c66c:	bf00      	nop
 800c66e:	3744      	adds	r7, #68	@ 0x44
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b088      	sub	sp, #32
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	e853 3f00 	ldrex	r3, [r3]
 800c68c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c694:	61fb      	str	r3, [r7, #28]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	461a      	mov	r2, r3
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	61bb      	str	r3, [r7, #24]
 800c6a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a2:	6979      	ldr	r1, [r7, #20]
 800c6a4:	69ba      	ldr	r2, [r7, #24]
 800c6a6:	e841 2300 	strex	r3, r2, [r1]
 800c6aa:	613b      	str	r3, [r7, #16]
   return(result);
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d1e6      	bne.n	800c680 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2220      	movs	r2, #32
 800c6b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f7fe fd57 	bl	800b174 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6c6:	bf00      	nop
 800c6c8:	3720      	adds	r7, #32
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
	...

0800c6d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b09c      	sub	sp, #112	@ 0x70
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c6de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6e8:	2b22      	cmp	r3, #34	@ 0x22
 800c6ea:	f040 80be 	bne.w	800c86a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c6f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c6fc:	b2d9      	uxtb	r1, r3
 800c6fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c702:	b2da      	uxtb	r2, r3
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c708:	400a      	ands	r2, r1
 800c70a:	b2d2      	uxtb	r2, r2
 800c70c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c712:	1c5a      	adds	r2, r3, #1
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c71e:	b29b      	uxth	r3, r3
 800c720:	3b01      	subs	r3, #1
 800c722:	b29a      	uxth	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c730:	b29b      	uxth	r3, r3
 800c732:	2b00      	cmp	r3, #0
 800c734:	f040 80a1 	bne.w	800c87a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c740:	e853 3f00 	ldrex	r3, [r3]
 800c744:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c748:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c74c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	461a      	mov	r2, r3
 800c754:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c756:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c758:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c75c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c75e:	e841 2300 	strex	r3, r2, [r1]
 800c762:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1e6      	bne.n	800c738 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	3308      	adds	r3, #8
 800c770:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c774:	e853 3f00 	ldrex	r3, [r3]
 800c778:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c77a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c77c:	f023 0301 	bic.w	r3, r3, #1
 800c780:	667b      	str	r3, [r7, #100]	@ 0x64
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	3308      	adds	r3, #8
 800c788:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c78a:	647a      	str	r2, [r7, #68]	@ 0x44
 800c78c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c790:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c792:	e841 2300 	strex	r3, r2, [r1]
 800c796:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d1e5      	bne.n	800c76a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2220      	movs	r2, #32
 800c7a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a33      	ldr	r2, [pc, #204]	@ (800c884 <UART_RxISR_8BIT+0x1b4>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d01f      	beq.n	800c7fc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d018      	beq.n	800c7fc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d2:	e853 3f00 	ldrex	r3, [r3]
 800c7d6:	623b      	str	r3, [r7, #32]
   return(result);
 800c7d8:	6a3b      	ldr	r3, [r7, #32]
 800c7da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c7de:	663b      	str	r3, [r7, #96]	@ 0x60
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c7e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c7ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7f0:	e841 2300 	strex	r3, r2, [r1]
 800c7f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d1e6      	bne.n	800c7ca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c800:	2b01      	cmp	r3, #1
 800c802:	d12e      	bne.n	800c862 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	e853 3f00 	ldrex	r3, [r3]
 800c816:	60fb      	str	r3, [r7, #12]
   return(result);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f023 0310 	bic.w	r3, r3, #16
 800c81e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	461a      	mov	r2, r3
 800c826:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c828:	61fb      	str	r3, [r7, #28]
 800c82a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82c:	69b9      	ldr	r1, [r7, #24]
 800c82e:	69fa      	ldr	r2, [r7, #28]
 800c830:	e841 2300 	strex	r3, r2, [r1]
 800c834:	617b      	str	r3, [r7, #20]
   return(result);
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d1e6      	bne.n	800c80a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	69db      	ldr	r3, [r3, #28]
 800c842:	f003 0310 	and.w	r3, r3, #16
 800c846:	2b10      	cmp	r3, #16
 800c848:	d103      	bne.n	800c852 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2210      	movs	r2, #16
 800c850:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c858:	4619      	mov	r1, r3
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7fe fc9e 	bl	800b19c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c860:	e00b      	b.n	800c87a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f7f4 fbde 	bl	8001024 <HAL_UART_RxCpltCallback>
}
 800c868:	e007      	b.n	800c87a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	699a      	ldr	r2, [r3, #24]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f042 0208 	orr.w	r2, r2, #8
 800c878:	619a      	str	r2, [r3, #24]
}
 800c87a:	bf00      	nop
 800c87c:	3770      	adds	r7, #112	@ 0x70
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	58000c00 	.word	0x58000c00

0800c888 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b09c      	sub	sp, #112	@ 0x70
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c896:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c8a0:	2b22      	cmp	r3, #34	@ 0x22
 800c8a2:	f040 80be 	bne.w	800ca22 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c8b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c8ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c8be:	4013      	ands	r3, r2
 800c8c0:	b29a      	uxth	r2, r3
 800c8c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c8c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8ca:	1c9a      	adds	r2, r3, #2
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	f040 80a1 	bne.w	800ca32 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8f8:	e853 3f00 	ldrex	r3, [r3]
 800c8fc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c8fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c904:	667b      	str	r3, [r7, #100]	@ 0x64
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	461a      	mov	r2, r3
 800c90c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c90e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c910:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c912:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c914:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c916:	e841 2300 	strex	r3, r2, [r1]
 800c91a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c91c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1e6      	bne.n	800c8f0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	3308      	adds	r3, #8
 800c928:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c92a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c92c:	e853 3f00 	ldrex	r3, [r3]
 800c930:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c934:	f023 0301 	bic.w	r3, r3, #1
 800c938:	663b      	str	r3, [r7, #96]	@ 0x60
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	3308      	adds	r3, #8
 800c940:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c942:	643a      	str	r2, [r7, #64]	@ 0x40
 800c944:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c946:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c948:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c94a:	e841 2300 	strex	r3, r2, [r1]
 800c94e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1e5      	bne.n	800c922 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2220      	movs	r2, #32
 800c95a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2200      	movs	r2, #0
 800c962:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a33      	ldr	r2, [pc, #204]	@ (800ca3c <UART_RxISR_16BIT+0x1b4>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d01f      	beq.n	800c9b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d018      	beq.n	800c9b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c988:	6a3b      	ldr	r3, [r7, #32]
 800c98a:	e853 3f00 	ldrex	r3, [r3]
 800c98e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c990:	69fb      	ldr	r3, [r7, #28]
 800c992:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c996:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	461a      	mov	r2, r3
 800c99e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c9a2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9a8:	e841 2300 	strex	r3, r2, [r1]
 800c9ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1e6      	bne.n	800c982 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d12e      	bne.n	800ca1a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	e853 3f00 	ldrex	r3, [r3]
 800c9ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	f023 0310 	bic.w	r3, r3, #16
 800c9d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	461a      	mov	r2, r3
 800c9de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9e0:	61bb      	str	r3, [r7, #24]
 800c9e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e4:	6979      	ldr	r1, [r7, #20]
 800c9e6:	69ba      	ldr	r2, [r7, #24]
 800c9e8:	e841 2300 	strex	r3, r2, [r1]
 800c9ec:	613b      	str	r3, [r7, #16]
   return(result);
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d1e6      	bne.n	800c9c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	69db      	ldr	r3, [r3, #28]
 800c9fa:	f003 0310 	and.w	r3, r3, #16
 800c9fe:	2b10      	cmp	r3, #16
 800ca00:	d103      	bne.n	800ca0a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2210      	movs	r2, #16
 800ca08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ca10:	4619      	mov	r1, r3
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f7fe fbc2 	bl	800b19c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca18:	e00b      	b.n	800ca32 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7f4 fb02 	bl	8001024 <HAL_UART_RxCpltCallback>
}
 800ca20:	e007      	b.n	800ca32 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	699a      	ldr	r2, [r3, #24]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f042 0208 	orr.w	r2, r2, #8
 800ca30:	619a      	str	r2, [r3, #24]
}
 800ca32:	bf00      	nop
 800ca34:	3770      	adds	r7, #112	@ 0x70
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	58000c00 	.word	0x58000c00

0800ca40 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b0ac      	sub	sp, #176	@ 0xb0
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ca4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	69db      	ldr	r3, [r3, #28]
 800ca58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ca76:	2b22      	cmp	r3, #34	@ 0x22
 800ca78:	f040 8180 	bne.w	800cd7c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ca82:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ca86:	e123      	b.n	800ccd0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca8e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ca92:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ca96:	b2d9      	uxtb	r1, r3
 800ca98:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ca9c:	b2da      	uxtb	r2, r3
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800caa2:	400a      	ands	r2, r1
 800caa4:	b2d2      	uxtb	r2, r2
 800caa6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800caac:	1c5a      	adds	r2, r3, #1
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cab8:	b29b      	uxth	r3, r3
 800caba:	3b01      	subs	r3, #1
 800cabc:	b29a      	uxth	r2, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	69db      	ldr	r3, [r3, #28]
 800caca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cad2:	f003 0307 	and.w	r3, r3, #7
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d053      	beq.n	800cb82 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cade:	f003 0301 	and.w	r3, r3, #1
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d011      	beq.n	800cb0a <UART_RxISR_8BIT_FIFOEN+0xca>
 800cae6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800caea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00b      	beq.n	800cb0a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2201      	movs	r2, #1
 800caf8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb00:	f043 0201 	orr.w	r2, r3, #1
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb0e:	f003 0302 	and.w	r3, r3, #2
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d011      	beq.n	800cb3a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800cb16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cb1a:	f003 0301 	and.w	r3, r3, #1
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00b      	beq.n	800cb3a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2202      	movs	r2, #2
 800cb28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb30:	f043 0204 	orr.w	r2, r3, #4
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb3e:	f003 0304 	and.w	r3, r3, #4
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d011      	beq.n	800cb6a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800cb46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cb4a:	f003 0301 	and.w	r3, r3, #1
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d00b      	beq.n	800cb6a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2204      	movs	r2, #4
 800cb58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb60:	f043 0202 	orr.w	r2, r3, #2
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d006      	beq.n	800cb82 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7fe fb07 	bl	800b188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	f040 80a0 	bne.w	800ccd0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb98:	e853 3f00 	ldrex	r3, [r3]
 800cb9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800cb9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	461a      	mov	r2, r3
 800cbae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cbb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cbb4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800cbb8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cbba:	e841 2300 	strex	r3, r2, [r1]
 800cbbe:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800cbc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d1e4      	bne.n	800cb90 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	3308      	adds	r3, #8
 800cbcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbd0:	e853 3f00 	ldrex	r3, [r3]
 800cbd4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800cbd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cbd8:	4b6e      	ldr	r3, [pc, #440]	@ (800cd94 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800cbda:	4013      	ands	r3, r2
 800cbdc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	3308      	adds	r3, #8
 800cbe6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cbea:	66ba      	str	r2, [r7, #104]	@ 0x68
 800cbec:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbee:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800cbf0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cbf2:	e841 2300 	strex	r3, r2, [r1]
 800cbf6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cbf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1e3      	bne.n	800cbc6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2220      	movs	r2, #32
 800cc02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a60      	ldr	r2, [pc, #384]	@ (800cd98 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d021      	beq.n	800cc60 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d01a      	beq.n	800cc60 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc32:	e853 3f00 	ldrex	r3, [r3]
 800cc36:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cc38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cc3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	461a      	mov	r2, r3
 800cc48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cc4c:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc4e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc50:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cc52:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cc54:	e841 2300 	strex	r3, r2, [r1]
 800cc58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cc5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d1e4      	bne.n	800cc2a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d130      	bne.n	800ccca <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc76:	e853 3f00 	ldrex	r3, [r3]
 800cc7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cc7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc7e:	f023 0310 	bic.w	r3, r3, #16
 800cc82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cc90:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc98:	e841 2300 	strex	r3, r2, [r1]
 800cc9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d1e4      	bne.n	800cc6e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	69db      	ldr	r3, [r3, #28]
 800ccaa:	f003 0310 	and.w	r3, r3, #16
 800ccae:	2b10      	cmp	r3, #16
 800ccb0:	d103      	bne.n	800ccba <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2210      	movs	r2, #16
 800ccb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7fe fa6a 	bl	800b19c <HAL_UARTEx_RxEventCallback>
 800ccc8:	e002      	b.n	800ccd0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f7f4 f9aa 	bl	8001024 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ccd0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d006      	beq.n	800cce6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800ccd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccdc:	f003 0320 	and.w	r3, r3, #32
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f47f aed1 	bne.w	800ca88 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ccec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ccf0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d049      	beq.n	800cd8c <UART_RxISR_8BIT_FIFOEN+0x34c>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ccfe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d242      	bcs.n	800cd8c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	3308      	adds	r3, #8
 800cd0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd0e:	6a3b      	ldr	r3, [r7, #32]
 800cd10:	e853 3f00 	ldrex	r3, [r3]
 800cd14:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cd1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	3308      	adds	r3, #8
 800cd26:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cd2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cd2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cd30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd32:	e841 2300 	strex	r3, r2, [r1]
 800cd36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d1e3      	bne.n	800cd06 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	4a16      	ldr	r2, [pc, #88]	@ (800cd9c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800cd42:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	e853 3f00 	ldrex	r3, [r3]
 800cd50:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	f043 0320 	orr.w	r3, r3, #32
 800cd58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	461a      	mov	r2, r3
 800cd62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cd66:	61bb      	str	r3, [r7, #24]
 800cd68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd6a:	6979      	ldr	r1, [r7, #20]
 800cd6c:	69ba      	ldr	r2, [r7, #24]
 800cd6e:	e841 2300 	strex	r3, r2, [r1]
 800cd72:	613b      	str	r3, [r7, #16]
   return(result);
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1e4      	bne.n	800cd44 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd7a:	e007      	b.n	800cd8c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	699a      	ldr	r2, [r3, #24]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f042 0208 	orr.w	r2, r2, #8
 800cd8a:	619a      	str	r2, [r3, #24]
}
 800cd8c:	bf00      	nop
 800cd8e:	37b0      	adds	r7, #176	@ 0xb0
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	effffffe 	.word	0xeffffffe
 800cd98:	58000c00 	.word	0x58000c00
 800cd9c:	0800c6d1 	.word	0x0800c6d1

0800cda0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b0ae      	sub	sp, #184	@ 0xb8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cdae:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	69db      	ldr	r3, [r3, #28]
 800cdb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdd6:	2b22      	cmp	r3, #34	@ 0x22
 800cdd8:	f040 8184 	bne.w	800d0e4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cde2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cde6:	e127      	b.n	800d038 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdee:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800cdfa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800cdfe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ce02:	4013      	ands	r3, r2
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ce0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce10:	1c9a      	adds	r2, r3, #2
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	b29a      	uxth	r2, r3
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	69db      	ldr	r3, [r3, #28]
 800ce2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ce32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce36:	f003 0307 	and.w	r3, r3, #7
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d053      	beq.n	800cee6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce42:	f003 0301 	and.w	r3, r3, #1
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d011      	beq.n	800ce6e <UART_RxISR_16BIT_FIFOEN+0xce>
 800ce4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00b      	beq.n	800ce6e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce64:	f043 0201 	orr.w	r2, r3, #1
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce72:	f003 0302 	and.w	r3, r3, #2
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d011      	beq.n	800ce9e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ce7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce7e:	f003 0301 	and.w	r3, r3, #1
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00b      	beq.n	800ce9e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2202      	movs	r2, #2
 800ce8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce94:	f043 0204 	orr.w	r2, r3, #4
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cea2:	f003 0304 	and.w	r3, r3, #4
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d011      	beq.n	800cece <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ceaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ceae:	f003 0301 	and.w	r3, r3, #1
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00b      	beq.n	800cece <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2204      	movs	r2, #4
 800cebc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cec4:	f043 0202 	orr.w	r2, r3, #2
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d006      	beq.n	800cee6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f7fe f955 	bl	800b188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2200      	movs	r2, #0
 800cee2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	f040 80a2 	bne.w	800d038 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cefc:	e853 3f00 	ldrex	r3, [r3]
 800cf00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cf02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	461a      	mov	r2, r3
 800cf12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cf1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cf1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cf22:	e841 2300 	strex	r3, r2, [r1]
 800cf26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cf28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d1e2      	bne.n	800cef4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	3308      	adds	r3, #8
 800cf34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf38:	e853 3f00 	ldrex	r3, [r3]
 800cf3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cf3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cf40:	4b6e      	ldr	r3, [pc, #440]	@ (800d0fc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800cf42:	4013      	ands	r3, r2
 800cf44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	3308      	adds	r3, #8
 800cf4e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800cf52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cf54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf56:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cf58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cf5a:	e841 2300 	strex	r3, r2, [r1]
 800cf5e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cf60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1e3      	bne.n	800cf2e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2220      	movs	r2, #32
 800cf6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2200      	movs	r2, #0
 800cf78:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	4a60      	ldr	r2, [pc, #384]	@ (800d100 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d021      	beq.n	800cfc8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	685b      	ldr	r3, [r3, #4]
 800cf8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d01a      	beq.n	800cfc8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf9a:	e853 3f00 	ldrex	r3, [r3]
 800cf9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cfa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfa2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cfa6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cfb4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cfb6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cfba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cfbc:	e841 2300 	strex	r3, r2, [r1]
 800cfc0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cfc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d1e4      	bne.n	800cf92 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d130      	bne.n	800d032 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfde:	e853 3f00 	ldrex	r3, [r3]
 800cfe2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cfe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfe6:	f023 0310 	bic.w	r3, r3, #16
 800cfea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	461a      	mov	r2, r3
 800cff4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cff8:	647b      	str	r3, [r7, #68]	@ 0x44
 800cffa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cffc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cffe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d000:	e841 2300 	strex	r3, r2, [r1]
 800d004:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d1e4      	bne.n	800cfd6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	69db      	ldr	r3, [r3, #28]
 800d012:	f003 0310 	and.w	r3, r3, #16
 800d016:	2b10      	cmp	r3, #16
 800d018:	d103      	bne.n	800d022 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2210      	movs	r2, #16
 800d020:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d028:	4619      	mov	r1, r3
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7fe f8b6 	bl	800b19c <HAL_UARTEx_RxEventCallback>
 800d030:	e002      	b.n	800d038 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f7f3 fff6 	bl	8001024 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d038:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d006      	beq.n	800d04e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800d040:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d044:	f003 0320 	and.w	r3, r3, #32
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f47f aecd 	bne.w	800cde8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d054:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d058:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d049      	beq.n	800d0f4 <UART_RxISR_16BIT_FIFOEN+0x354>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d066:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d242      	bcs.n	800d0f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	3308      	adds	r3, #8
 800d074:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d078:	e853 3f00 	ldrex	r3, [r3]
 800d07c:	623b      	str	r3, [r7, #32]
   return(result);
 800d07e:	6a3b      	ldr	r3, [r7, #32]
 800d080:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d084:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	3308      	adds	r3, #8
 800d08e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d092:	633a      	str	r2, [r7, #48]	@ 0x30
 800d094:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d096:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d09a:	e841 2300 	strex	r3, r2, [r1]
 800d09e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d1e3      	bne.n	800d06e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	4a16      	ldr	r2, [pc, #88]	@ (800d104 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d0aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	e853 3f00 	ldrex	r3, [r3]
 800d0b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f043 0320 	orr.w	r3, r3, #32
 800d0c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d0ce:	61fb      	str	r3, [r7, #28]
 800d0d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0d2:	69b9      	ldr	r1, [r7, #24]
 800d0d4:	69fa      	ldr	r2, [r7, #28]
 800d0d6:	e841 2300 	strex	r3, r2, [r1]
 800d0da:	617b      	str	r3, [r7, #20]
   return(result);
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1e4      	bne.n	800d0ac <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d0e2:	e007      	b.n	800d0f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	699a      	ldr	r2, [r3, #24]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f042 0208 	orr.w	r2, r2, #8
 800d0f2:	619a      	str	r2, [r3, #24]
}
 800d0f4:	bf00      	nop
 800d0f6:	37b8      	adds	r7, #184	@ 0xb8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	effffffe 	.word	0xeffffffe
 800d100:	58000c00 	.word	0x58000c00
 800d104:	0800c889 	.word	0x0800c889

0800d108 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d108:	b480      	push	{r7}
 800d10a:	b083      	sub	sp, #12
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d110:	bf00      	nop
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d124:	bf00      	nop
 800d126:	370c      	adds	r7, #12
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr

0800d130 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d130:	b480      	push	{r7}
 800d132:	b083      	sub	sp, #12
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d138:	bf00      	nop
 800d13a:	370c      	adds	r7, #12
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d152:	2b01      	cmp	r3, #1
 800d154:	d101      	bne.n	800d15a <HAL_UARTEx_DisableFifoMode+0x16>
 800d156:	2302      	movs	r3, #2
 800d158:	e027      	b.n	800d1aa <HAL_UARTEx_DisableFifoMode+0x66>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2201      	movs	r2, #1
 800d15e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2224      	movs	r2, #36	@ 0x24
 800d166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f022 0201 	bic.w	r2, r2, #1
 800d180:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d188:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2200      	movs	r2, #0
 800d18e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	68fa      	ldr	r2, [r7, #12]
 800d196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2220      	movs	r2, #32
 800d19c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3714      	adds	r7, #20
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr

0800d1b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b084      	sub	sp, #16
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
 800d1be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d101      	bne.n	800d1ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d1ca:	2302      	movs	r3, #2
 800d1cc:	e02d      	b.n	800d22a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2224      	movs	r2, #36	@ 0x24
 800d1da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f022 0201 	bic.w	r2, r2, #1
 800d1f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	683a      	ldr	r2, [r7, #0]
 800d206:	430a      	orrs	r2, r1
 800d208:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f850 	bl	800d2b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2220      	movs	r2, #32
 800d21c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2200      	movs	r2, #0
 800d224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b084      	sub	sp, #16
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
 800d23a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d242:	2b01      	cmp	r3, #1
 800d244:	d101      	bne.n	800d24a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d246:	2302      	movs	r3, #2
 800d248:	e02d      	b.n	800d2a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2201      	movs	r2, #1
 800d24e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2224      	movs	r2, #36	@ 0x24
 800d256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f022 0201 	bic.w	r2, r2, #1
 800d270:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	683a      	ldr	r2, [r7, #0]
 800d282:	430a      	orrs	r2, r1
 800d284:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 f812 	bl	800d2b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	68fa      	ldr	r2, [r7, #12]
 800d292:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2220      	movs	r2, #32
 800d298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
	...

0800d2b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b085      	sub	sp, #20
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d108      	bne.n	800d2d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d2d0:	e031      	b.n	800d336 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d2d2:	2310      	movs	r3, #16
 800d2d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d2d6:	2310      	movs	r3, #16
 800d2d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	0e5b      	lsrs	r3, r3, #25
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	f003 0307 	and.w	r3, r3, #7
 800d2e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	689b      	ldr	r3, [r3, #8]
 800d2f0:	0f5b      	lsrs	r3, r3, #29
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	f003 0307 	and.w	r3, r3, #7
 800d2f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2fa:	7bbb      	ldrb	r3, [r7, #14]
 800d2fc:	7b3a      	ldrb	r2, [r7, #12]
 800d2fe:	4911      	ldr	r1, [pc, #68]	@ (800d344 <UARTEx_SetNbDataToProcess+0x94>)
 800d300:	5c8a      	ldrb	r2, [r1, r2]
 800d302:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d306:	7b3a      	ldrb	r2, [r7, #12]
 800d308:	490f      	ldr	r1, [pc, #60]	@ (800d348 <UARTEx_SetNbDataToProcess+0x98>)
 800d30a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d30c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d310:	b29a      	uxth	r2, r3
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d318:	7bfb      	ldrb	r3, [r7, #15]
 800d31a:	7b7a      	ldrb	r2, [r7, #13]
 800d31c:	4909      	ldr	r1, [pc, #36]	@ (800d344 <UARTEx_SetNbDataToProcess+0x94>)
 800d31e:	5c8a      	ldrb	r2, [r1, r2]
 800d320:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d324:	7b7a      	ldrb	r2, [r7, #13]
 800d326:	4908      	ldr	r1, [pc, #32]	@ (800d348 <UARTEx_SetNbDataToProcess+0x98>)
 800d328:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d32a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d32e:	b29a      	uxth	r2, r3
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d336:	bf00      	nop
 800d338:	3714      	adds	r7, #20
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop
 800d344:	0800e390 	.word	0x0800e390
 800d348:	0800e398 	.word	0x0800e398

0800d34c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d34c:	b084      	sub	sp, #16
 800d34e:	b580      	push	{r7, lr}
 800d350:	b084      	sub	sp, #16
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
 800d356:	f107 001c 	add.w	r0, r7, #28
 800d35a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d35e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d362:	2b01      	cmp	r3, #1
 800d364:	d121      	bne.n	800d3aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d36a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	68da      	ldr	r2, [r3, #12]
 800d376:	4b2c      	ldr	r3, [pc, #176]	@ (800d428 <USB_CoreInit+0xdc>)
 800d378:	4013      	ands	r3, r2
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d38a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d105      	bne.n	800d39e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 faaa 	bl	800d8f8 <USB_CoreReset>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	73fb      	strb	r3, [r7, #15]
 800d3a8:	e01b      	b.n	800d3e2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 fa9e 	bl	800d8f8 <USB_CoreReset>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d3c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d106      	bne.n	800d3d6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	639a      	str	r2, [r3, #56]	@ 0x38
 800d3d4:	e005      	b.n	800d3e2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d3e2:	7fbb      	ldrb	r3, [r7, #30]
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d116      	bne.n	800d416 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3ec:	b29a      	uxth	r2, r3
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d3f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d42c <USB_CoreInit+0xe0>)
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	689b      	ldr	r3, [r3, #8]
 800d402:	f043 0206 	orr.w	r2, r3, #6
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	689b      	ldr	r3, [r3, #8]
 800d40e:	f043 0220 	orr.w	r2, r3, #32
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d416:	7bfb      	ldrb	r3, [r7, #15]
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d422:	b004      	add	sp, #16
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop
 800d428:	ffbdffbf 	.word	0xffbdffbf
 800d42c:	03ee0000 	.word	0x03ee0000

0800d430 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d430:	b480      	push	{r7}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	f023 0201 	bic.w	r2, r3, #1
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d444:	2300      	movs	r3, #0
}
 800d446:	4618      	mov	r0, r3
 800d448:	370c      	adds	r7, #12
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr

0800d452 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b084      	sub	sp, #16
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
 800d45a:	460b      	mov	r3, r1
 800d45c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d45e:	2300      	movs	r3, #0
 800d460:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	68db      	ldr	r3, [r3, #12]
 800d466:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d46e:	78fb      	ldrb	r3, [r7, #3]
 800d470:	2b01      	cmp	r3, #1
 800d472:	d115      	bne.n	800d4a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d480:	200a      	movs	r0, #10
 800d482:	f7f4 fb07 	bl	8001a94 <HAL_Delay>
      ms += 10U;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	330a      	adds	r3, #10
 800d48a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 fa25 	bl	800d8dc <USB_GetMode>
 800d492:	4603      	mov	r3, r0
 800d494:	2b01      	cmp	r3, #1
 800d496:	d01e      	beq.n	800d4d6 <USB_SetCurrentMode+0x84>
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2bc7      	cmp	r3, #199	@ 0xc7
 800d49c:	d9f0      	bls.n	800d480 <USB_SetCurrentMode+0x2e>
 800d49e:	e01a      	b.n	800d4d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d4a0:	78fb      	ldrb	r3, [r7, #3]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d115      	bne.n	800d4d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d4b2:	200a      	movs	r0, #10
 800d4b4:	f7f4 faee 	bl	8001a94 <HAL_Delay>
      ms += 10U;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	330a      	adds	r3, #10
 800d4bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f000 fa0c 	bl	800d8dc <USB_GetMode>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d005      	beq.n	800d4d6 <USB_SetCurrentMode+0x84>
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2bc7      	cmp	r3, #199	@ 0xc7
 800d4ce:	d9f0      	bls.n	800d4b2 <USB_SetCurrentMode+0x60>
 800d4d0:	e001      	b.n	800d4d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	e005      	b.n	800d4e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2bc8      	cmp	r3, #200	@ 0xc8
 800d4da:	d101      	bne.n	800d4e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	e000      	b.n	800d4e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d4e0:	2300      	movs	r3, #0
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3710      	adds	r7, #16
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
	...

0800d4ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d4ec:	b084      	sub	sp, #16
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b086      	sub	sp, #24
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
 800d4f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d4fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d4fe:	2300      	movs	r3, #0
 800d500:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d506:	2300      	movs	r3, #0
 800d508:	613b      	str	r3, [r7, #16]
 800d50a:	e009      	b.n	800d520 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	3340      	adds	r3, #64	@ 0x40
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	4413      	add	r3, r2
 800d516:	2200      	movs	r2, #0
 800d518:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	3301      	adds	r3, #1
 800d51e:	613b      	str	r3, [r7, #16]
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	2b0e      	cmp	r3, #14
 800d524:	d9f2      	bls.n	800d50c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d526:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d11c      	bne.n	800d568 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	68fa      	ldr	r2, [r7, #12]
 800d538:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d53c:	f043 0302 	orr.w	r3, r3, #2
 800d540:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d546:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	601a      	str	r2, [r3, #0]
 800d566:	e005      	b.n	800d574 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d56c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d57a:	461a      	mov	r2, r3
 800d57c:	2300      	movs	r3, #0
 800d57e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d580:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d584:	2b01      	cmp	r3, #1
 800d586:	d10d      	bne.n	800d5a4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d588:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d104      	bne.n	800d59a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d590:	2100      	movs	r1, #0
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f000 f968 	bl	800d868 <USB_SetDevSpeed>
 800d598:	e008      	b.n	800d5ac <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d59a:	2101      	movs	r1, #1
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f000 f963 	bl	800d868 <USB_SetDevSpeed>
 800d5a2:	e003      	b.n	800d5ac <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d5a4:	2103      	movs	r1, #3
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 f95e 	bl	800d868 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d5ac:	2110      	movs	r1, #16
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 f8fa 	bl	800d7a8 <USB_FlushTxFifo>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d001      	beq.n	800d5be <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f000 f924 	bl	800d80c <USB_FlushRxFifo>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d001      	beq.n	800d5ce <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	613b      	str	r3, [r7, #16]
 800d5f6:	e043      	b.n	800d680 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	015a      	lsls	r2, r3, #5
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	4413      	add	r3, r2
 800d600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d60a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d60e:	d118      	bne.n	800d642 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d10a      	bne.n	800d62c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	015a      	lsls	r2, r3, #5
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	4413      	add	r3, r2
 800d61e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d622:	461a      	mov	r2, r3
 800d624:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d628:	6013      	str	r3, [r2, #0]
 800d62a:	e013      	b.n	800d654 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	015a      	lsls	r2, r3, #5
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	4413      	add	r3, r2
 800d634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d638:	461a      	mov	r2, r3
 800d63a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d63e:	6013      	str	r3, [r2, #0]
 800d640:	e008      	b.n	800d654 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	015a      	lsls	r2, r3, #5
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	4413      	add	r3, r2
 800d64a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d64e:	461a      	mov	r2, r3
 800d650:	2300      	movs	r3, #0
 800d652:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	015a      	lsls	r2, r3, #5
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	4413      	add	r3, r2
 800d65c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d660:	461a      	mov	r2, r3
 800d662:	2300      	movs	r3, #0
 800d664:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	015a      	lsls	r2, r3, #5
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	4413      	add	r3, r2
 800d66e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d672:	461a      	mov	r2, r3
 800d674:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d678:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	3301      	adds	r3, #1
 800d67e:	613b      	str	r3, [r7, #16]
 800d680:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d684:	461a      	mov	r2, r3
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	4293      	cmp	r3, r2
 800d68a:	d3b5      	bcc.n	800d5f8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d68c:	2300      	movs	r3, #0
 800d68e:	613b      	str	r3, [r7, #16]
 800d690:	e043      	b.n	800d71a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	015a      	lsls	r2, r3, #5
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	4413      	add	r3, r2
 800d69a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d6a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d6a8:	d118      	bne.n	800d6dc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d10a      	bne.n	800d6c6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	015a      	lsls	r2, r3, #5
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	4413      	add	r3, r2
 800d6b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6bc:	461a      	mov	r2, r3
 800d6be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d6c2:	6013      	str	r3, [r2, #0]
 800d6c4:	e013      	b.n	800d6ee <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	015a      	lsls	r2, r3, #5
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d6d8:	6013      	str	r3, [r2, #0]
 800d6da:	e008      	b.n	800d6ee <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	015a      	lsls	r2, r3, #5
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	4413      	add	r3, r2
 800d6e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	015a      	lsls	r2, r3, #5
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	015a      	lsls	r2, r3, #5
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	4413      	add	r3, r2
 800d708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d70c:	461a      	mov	r2, r3
 800d70e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d712:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	3301      	adds	r3, #1
 800d718:	613b      	str	r3, [r7, #16]
 800d71a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d71e:	461a      	mov	r2, r3
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	4293      	cmp	r3, r2
 800d724:	d3b5      	bcc.n	800d692 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d72c:	691b      	ldr	r3, [r3, #16]
 800d72e:	68fa      	ldr	r2, [r7, #12]
 800d730:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d738:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2200      	movs	r2, #0
 800d73e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d746:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d748:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d105      	bne.n	800d75c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	699b      	ldr	r3, [r3, #24]
 800d754:	f043 0210 	orr.w	r2, r3, #16
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	699a      	ldr	r2, [r3, #24]
 800d760:	4b0f      	ldr	r3, [pc, #60]	@ (800d7a0 <USB_DevInit+0x2b4>)
 800d762:	4313      	orrs	r3, r2
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d768:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d005      	beq.n	800d77c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	699b      	ldr	r3, [r3, #24]
 800d774:	f043 0208 	orr.w	r2, r3, #8
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d77c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d780:	2b01      	cmp	r3, #1
 800d782:	d105      	bne.n	800d790 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	699a      	ldr	r2, [r3, #24]
 800d788:	4b06      	ldr	r3, [pc, #24]	@ (800d7a4 <USB_DevInit+0x2b8>)
 800d78a:	4313      	orrs	r3, r2
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d790:	7dfb      	ldrb	r3, [r7, #23]
}
 800d792:	4618      	mov	r0, r3
 800d794:	3718      	adds	r7, #24
 800d796:	46bd      	mov	sp, r7
 800d798:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d79c:	b004      	add	sp, #16
 800d79e:	4770      	bx	lr
 800d7a0:	803c3800 	.word	0x803c3800
 800d7a4:	40000004 	.word	0x40000004

0800d7a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b085      	sub	sp, #20
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d7c2:	d901      	bls.n	800d7c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d7c4:	2303      	movs	r3, #3
 800d7c6:	e01b      	b.n	800d800 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	691b      	ldr	r3, [r3, #16]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	daf2      	bge.n	800d7b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	019b      	lsls	r3, r3, #6
 800d7d8:	f043 0220 	orr.w	r2, r3, #32
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d7ec:	d901      	bls.n	800d7f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d7ee:	2303      	movs	r3, #3
 800d7f0:	e006      	b.n	800d800 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	691b      	ldr	r3, [r3, #16]
 800d7f6:	f003 0320 	and.w	r3, r3, #32
 800d7fa:	2b20      	cmp	r3, #32
 800d7fc:	d0f0      	beq.n	800d7e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d7fe:	2300      	movs	r3, #0
}
 800d800:	4618      	mov	r0, r3
 800d802:	3714      	adds	r7, #20
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr

0800d80c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b085      	sub	sp, #20
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d814:	2300      	movs	r3, #0
 800d816:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	3301      	adds	r3, #1
 800d81c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d824:	d901      	bls.n	800d82a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d826:	2303      	movs	r3, #3
 800d828:	e018      	b.n	800d85c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	691b      	ldr	r3, [r3, #16]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	daf2      	bge.n	800d818 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d832:	2300      	movs	r3, #0
 800d834:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2210      	movs	r2, #16
 800d83a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	3301      	adds	r3, #1
 800d840:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d848:	d901      	bls.n	800d84e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d84a:	2303      	movs	r3, #3
 800d84c:	e006      	b.n	800d85c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	691b      	ldr	r3, [r3, #16]
 800d852:	f003 0310 	and.w	r3, r3, #16
 800d856:	2b10      	cmp	r3, #16
 800d858:	d0f0      	beq.n	800d83c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d85a:	2300      	movs	r3, #0
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3714      	adds	r7, #20
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr

0800d868 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d868:	b480      	push	{r7}
 800d86a:	b085      	sub	sp, #20
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	460b      	mov	r3, r1
 800d872:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	78fb      	ldrb	r3, [r7, #3]
 800d882:	68f9      	ldr	r1, [r7, #12]
 800d884:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d888:	4313      	orrs	r3, r2
 800d88a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d88c:	2300      	movs	r3, #0
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3714      	adds	r7, #20
 800d892:	46bd      	mov	sp, r7
 800d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d898:	4770      	bx	lr

0800d89a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d89a:	b480      	push	{r7}
 800d89c:	b085      	sub	sp, #20
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	68fa      	ldr	r2, [r7, #12]
 800d8b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d8b4:	f023 0303 	bic.w	r3, r3, #3
 800d8b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	68fa      	ldr	r2, [r7, #12]
 800d8c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d8c8:	f043 0302 	orr.w	r3, r3, #2
 800d8cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d8ce:	2300      	movs	r3, #0
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3714      	adds	r7, #20
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr

0800d8dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	695b      	ldr	r3, [r3, #20]
 800d8e8:	f003 0301 	and.w	r3, r3, #1
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	370c      	adds	r7, #12
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr

0800d8f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b085      	sub	sp, #20
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d900:	2300      	movs	r3, #0
 800d902:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	3301      	adds	r3, #1
 800d908:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d910:	d901      	bls.n	800d916 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d912:	2303      	movs	r3, #3
 800d914:	e01b      	b.n	800d94e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	691b      	ldr	r3, [r3, #16]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	daf2      	bge.n	800d904 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d91e:	2300      	movs	r3, #0
 800d920:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	691b      	ldr	r3, [r3, #16]
 800d926:	f043 0201 	orr.w	r2, r3, #1
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	3301      	adds	r3, #1
 800d932:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d93a:	d901      	bls.n	800d940 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d93c:	2303      	movs	r3, #3
 800d93e:	e006      	b.n	800d94e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	691b      	ldr	r3, [r3, #16]
 800d944:	f003 0301 	and.w	r3, r3, #1
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d0f0      	beq.n	800d92e <USB_CoreReset+0x36>

  return HAL_OK;
 800d94c:	2300      	movs	r3, #0
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3714      	adds	r7, #20
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr
	...

0800d95c <sniprintf>:
 800d95c:	b40c      	push	{r2, r3}
 800d95e:	b530      	push	{r4, r5, lr}
 800d960:	4b17      	ldr	r3, [pc, #92]	@ (800d9c0 <sniprintf+0x64>)
 800d962:	1e0c      	subs	r4, r1, #0
 800d964:	681d      	ldr	r5, [r3, #0]
 800d966:	b09d      	sub	sp, #116	@ 0x74
 800d968:	da08      	bge.n	800d97c <sniprintf+0x20>
 800d96a:	238b      	movs	r3, #139	@ 0x8b
 800d96c:	602b      	str	r3, [r5, #0]
 800d96e:	f04f 30ff 	mov.w	r0, #4294967295
 800d972:	b01d      	add	sp, #116	@ 0x74
 800d974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d978:	b002      	add	sp, #8
 800d97a:	4770      	bx	lr
 800d97c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d980:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d984:	bf14      	ite	ne
 800d986:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d98a:	4623      	moveq	r3, r4
 800d98c:	9304      	str	r3, [sp, #16]
 800d98e:	9307      	str	r3, [sp, #28]
 800d990:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d994:	9002      	str	r0, [sp, #8]
 800d996:	9006      	str	r0, [sp, #24]
 800d998:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d99c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d99e:	ab21      	add	r3, sp, #132	@ 0x84
 800d9a0:	a902      	add	r1, sp, #8
 800d9a2:	4628      	mov	r0, r5
 800d9a4:	9301      	str	r3, [sp, #4]
 800d9a6:	f000 f9a7 	bl	800dcf8 <_svfiprintf_r>
 800d9aa:	1c43      	adds	r3, r0, #1
 800d9ac:	bfbc      	itt	lt
 800d9ae:	238b      	movlt	r3, #139	@ 0x8b
 800d9b0:	602b      	strlt	r3, [r5, #0]
 800d9b2:	2c00      	cmp	r4, #0
 800d9b4:	d0dd      	beq.n	800d972 <sniprintf+0x16>
 800d9b6:	9b02      	ldr	r3, [sp, #8]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	701a      	strb	r2, [r3, #0]
 800d9bc:	e7d9      	b.n	800d972 <sniprintf+0x16>
 800d9be:	bf00      	nop
 800d9c0:	24000014 	.word	0x24000014

0800d9c4 <memset>:
 800d9c4:	4402      	add	r2, r0
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d100      	bne.n	800d9ce <memset+0xa>
 800d9cc:	4770      	bx	lr
 800d9ce:	f803 1b01 	strb.w	r1, [r3], #1
 800d9d2:	e7f9      	b.n	800d9c8 <memset+0x4>

0800d9d4 <strncmp>:
 800d9d4:	b510      	push	{r4, lr}
 800d9d6:	b16a      	cbz	r2, 800d9f4 <strncmp+0x20>
 800d9d8:	3901      	subs	r1, #1
 800d9da:	1884      	adds	r4, r0, r2
 800d9dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d103      	bne.n	800d9f0 <strncmp+0x1c>
 800d9e8:	42a0      	cmp	r0, r4
 800d9ea:	d001      	beq.n	800d9f0 <strncmp+0x1c>
 800d9ec:	2a00      	cmp	r2, #0
 800d9ee:	d1f5      	bne.n	800d9dc <strncmp+0x8>
 800d9f0:	1ad0      	subs	r0, r2, r3
 800d9f2:	bd10      	pop	{r4, pc}
 800d9f4:	4610      	mov	r0, r2
 800d9f6:	e7fc      	b.n	800d9f2 <strncmp+0x1e>

0800d9f8 <__errno>:
 800d9f8:	4b01      	ldr	r3, [pc, #4]	@ (800da00 <__errno+0x8>)
 800d9fa:	6818      	ldr	r0, [r3, #0]
 800d9fc:	4770      	bx	lr
 800d9fe:	bf00      	nop
 800da00:	24000014 	.word	0x24000014

0800da04 <__libc_init_array>:
 800da04:	b570      	push	{r4, r5, r6, lr}
 800da06:	4d0d      	ldr	r5, [pc, #52]	@ (800da3c <__libc_init_array+0x38>)
 800da08:	4c0d      	ldr	r4, [pc, #52]	@ (800da40 <__libc_init_array+0x3c>)
 800da0a:	1b64      	subs	r4, r4, r5
 800da0c:	10a4      	asrs	r4, r4, #2
 800da0e:	2600      	movs	r6, #0
 800da10:	42a6      	cmp	r6, r4
 800da12:	d109      	bne.n	800da28 <__libc_init_array+0x24>
 800da14:	4d0b      	ldr	r5, [pc, #44]	@ (800da44 <__libc_init_array+0x40>)
 800da16:	4c0c      	ldr	r4, [pc, #48]	@ (800da48 <__libc_init_array+0x44>)
 800da18:	f000 fc66 	bl	800e2e8 <_init>
 800da1c:	1b64      	subs	r4, r4, r5
 800da1e:	10a4      	asrs	r4, r4, #2
 800da20:	2600      	movs	r6, #0
 800da22:	42a6      	cmp	r6, r4
 800da24:	d105      	bne.n	800da32 <__libc_init_array+0x2e>
 800da26:	bd70      	pop	{r4, r5, r6, pc}
 800da28:	f855 3b04 	ldr.w	r3, [r5], #4
 800da2c:	4798      	blx	r3
 800da2e:	3601      	adds	r6, #1
 800da30:	e7ee      	b.n	800da10 <__libc_init_array+0xc>
 800da32:	f855 3b04 	ldr.w	r3, [r5], #4
 800da36:	4798      	blx	r3
 800da38:	3601      	adds	r6, #1
 800da3a:	e7f2      	b.n	800da22 <__libc_init_array+0x1e>
 800da3c:	0800e3dc 	.word	0x0800e3dc
 800da40:	0800e3dc 	.word	0x0800e3dc
 800da44:	0800e3dc 	.word	0x0800e3dc
 800da48:	0800e3e0 	.word	0x0800e3e0

0800da4c <__retarget_lock_acquire_recursive>:
 800da4c:	4770      	bx	lr

0800da4e <__retarget_lock_release_recursive>:
 800da4e:	4770      	bx	lr

0800da50 <_free_r>:
 800da50:	b538      	push	{r3, r4, r5, lr}
 800da52:	4605      	mov	r5, r0
 800da54:	2900      	cmp	r1, #0
 800da56:	d041      	beq.n	800dadc <_free_r+0x8c>
 800da58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da5c:	1f0c      	subs	r4, r1, #4
 800da5e:	2b00      	cmp	r3, #0
 800da60:	bfb8      	it	lt
 800da62:	18e4      	addlt	r4, r4, r3
 800da64:	f000 f8e0 	bl	800dc28 <__malloc_lock>
 800da68:	4a1d      	ldr	r2, [pc, #116]	@ (800dae0 <_free_r+0x90>)
 800da6a:	6813      	ldr	r3, [r2, #0]
 800da6c:	b933      	cbnz	r3, 800da7c <_free_r+0x2c>
 800da6e:	6063      	str	r3, [r4, #4]
 800da70:	6014      	str	r4, [r2, #0]
 800da72:	4628      	mov	r0, r5
 800da74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da78:	f000 b8dc 	b.w	800dc34 <__malloc_unlock>
 800da7c:	42a3      	cmp	r3, r4
 800da7e:	d908      	bls.n	800da92 <_free_r+0x42>
 800da80:	6820      	ldr	r0, [r4, #0]
 800da82:	1821      	adds	r1, r4, r0
 800da84:	428b      	cmp	r3, r1
 800da86:	bf01      	itttt	eq
 800da88:	6819      	ldreq	r1, [r3, #0]
 800da8a:	685b      	ldreq	r3, [r3, #4]
 800da8c:	1809      	addeq	r1, r1, r0
 800da8e:	6021      	streq	r1, [r4, #0]
 800da90:	e7ed      	b.n	800da6e <_free_r+0x1e>
 800da92:	461a      	mov	r2, r3
 800da94:	685b      	ldr	r3, [r3, #4]
 800da96:	b10b      	cbz	r3, 800da9c <_free_r+0x4c>
 800da98:	42a3      	cmp	r3, r4
 800da9a:	d9fa      	bls.n	800da92 <_free_r+0x42>
 800da9c:	6811      	ldr	r1, [r2, #0]
 800da9e:	1850      	adds	r0, r2, r1
 800daa0:	42a0      	cmp	r0, r4
 800daa2:	d10b      	bne.n	800dabc <_free_r+0x6c>
 800daa4:	6820      	ldr	r0, [r4, #0]
 800daa6:	4401      	add	r1, r0
 800daa8:	1850      	adds	r0, r2, r1
 800daaa:	4283      	cmp	r3, r0
 800daac:	6011      	str	r1, [r2, #0]
 800daae:	d1e0      	bne.n	800da72 <_free_r+0x22>
 800dab0:	6818      	ldr	r0, [r3, #0]
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	6053      	str	r3, [r2, #4]
 800dab6:	4408      	add	r0, r1
 800dab8:	6010      	str	r0, [r2, #0]
 800daba:	e7da      	b.n	800da72 <_free_r+0x22>
 800dabc:	d902      	bls.n	800dac4 <_free_r+0x74>
 800dabe:	230c      	movs	r3, #12
 800dac0:	602b      	str	r3, [r5, #0]
 800dac2:	e7d6      	b.n	800da72 <_free_r+0x22>
 800dac4:	6820      	ldr	r0, [r4, #0]
 800dac6:	1821      	adds	r1, r4, r0
 800dac8:	428b      	cmp	r3, r1
 800daca:	bf04      	itt	eq
 800dacc:	6819      	ldreq	r1, [r3, #0]
 800dace:	685b      	ldreq	r3, [r3, #4]
 800dad0:	6063      	str	r3, [r4, #4]
 800dad2:	bf04      	itt	eq
 800dad4:	1809      	addeq	r1, r1, r0
 800dad6:	6021      	streq	r1, [r4, #0]
 800dad8:	6054      	str	r4, [r2, #4]
 800dada:	e7ca      	b.n	800da72 <_free_r+0x22>
 800dadc:	bd38      	pop	{r3, r4, r5, pc}
 800dade:	bf00      	nop
 800dae0:	24000a18 	.word	0x24000a18

0800dae4 <sbrk_aligned>:
 800dae4:	b570      	push	{r4, r5, r6, lr}
 800dae6:	4e0f      	ldr	r6, [pc, #60]	@ (800db24 <sbrk_aligned+0x40>)
 800dae8:	460c      	mov	r4, r1
 800daea:	6831      	ldr	r1, [r6, #0]
 800daec:	4605      	mov	r5, r0
 800daee:	b911      	cbnz	r1, 800daf6 <sbrk_aligned+0x12>
 800daf0:	f000 fba6 	bl	800e240 <_sbrk_r>
 800daf4:	6030      	str	r0, [r6, #0]
 800daf6:	4621      	mov	r1, r4
 800daf8:	4628      	mov	r0, r5
 800dafa:	f000 fba1 	bl	800e240 <_sbrk_r>
 800dafe:	1c43      	adds	r3, r0, #1
 800db00:	d103      	bne.n	800db0a <sbrk_aligned+0x26>
 800db02:	f04f 34ff 	mov.w	r4, #4294967295
 800db06:	4620      	mov	r0, r4
 800db08:	bd70      	pop	{r4, r5, r6, pc}
 800db0a:	1cc4      	adds	r4, r0, #3
 800db0c:	f024 0403 	bic.w	r4, r4, #3
 800db10:	42a0      	cmp	r0, r4
 800db12:	d0f8      	beq.n	800db06 <sbrk_aligned+0x22>
 800db14:	1a21      	subs	r1, r4, r0
 800db16:	4628      	mov	r0, r5
 800db18:	f000 fb92 	bl	800e240 <_sbrk_r>
 800db1c:	3001      	adds	r0, #1
 800db1e:	d1f2      	bne.n	800db06 <sbrk_aligned+0x22>
 800db20:	e7ef      	b.n	800db02 <sbrk_aligned+0x1e>
 800db22:	bf00      	nop
 800db24:	24000a14 	.word	0x24000a14

0800db28 <_malloc_r>:
 800db28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db2c:	1ccd      	adds	r5, r1, #3
 800db2e:	f025 0503 	bic.w	r5, r5, #3
 800db32:	3508      	adds	r5, #8
 800db34:	2d0c      	cmp	r5, #12
 800db36:	bf38      	it	cc
 800db38:	250c      	movcc	r5, #12
 800db3a:	2d00      	cmp	r5, #0
 800db3c:	4606      	mov	r6, r0
 800db3e:	db01      	blt.n	800db44 <_malloc_r+0x1c>
 800db40:	42a9      	cmp	r1, r5
 800db42:	d904      	bls.n	800db4e <_malloc_r+0x26>
 800db44:	230c      	movs	r3, #12
 800db46:	6033      	str	r3, [r6, #0]
 800db48:	2000      	movs	r0, #0
 800db4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dc24 <_malloc_r+0xfc>
 800db52:	f000 f869 	bl	800dc28 <__malloc_lock>
 800db56:	f8d8 3000 	ldr.w	r3, [r8]
 800db5a:	461c      	mov	r4, r3
 800db5c:	bb44      	cbnz	r4, 800dbb0 <_malloc_r+0x88>
 800db5e:	4629      	mov	r1, r5
 800db60:	4630      	mov	r0, r6
 800db62:	f7ff ffbf 	bl	800dae4 <sbrk_aligned>
 800db66:	1c43      	adds	r3, r0, #1
 800db68:	4604      	mov	r4, r0
 800db6a:	d158      	bne.n	800dc1e <_malloc_r+0xf6>
 800db6c:	f8d8 4000 	ldr.w	r4, [r8]
 800db70:	4627      	mov	r7, r4
 800db72:	2f00      	cmp	r7, #0
 800db74:	d143      	bne.n	800dbfe <_malloc_r+0xd6>
 800db76:	2c00      	cmp	r4, #0
 800db78:	d04b      	beq.n	800dc12 <_malloc_r+0xea>
 800db7a:	6823      	ldr	r3, [r4, #0]
 800db7c:	4639      	mov	r1, r7
 800db7e:	4630      	mov	r0, r6
 800db80:	eb04 0903 	add.w	r9, r4, r3
 800db84:	f000 fb5c 	bl	800e240 <_sbrk_r>
 800db88:	4581      	cmp	r9, r0
 800db8a:	d142      	bne.n	800dc12 <_malloc_r+0xea>
 800db8c:	6821      	ldr	r1, [r4, #0]
 800db8e:	1a6d      	subs	r5, r5, r1
 800db90:	4629      	mov	r1, r5
 800db92:	4630      	mov	r0, r6
 800db94:	f7ff ffa6 	bl	800dae4 <sbrk_aligned>
 800db98:	3001      	adds	r0, #1
 800db9a:	d03a      	beq.n	800dc12 <_malloc_r+0xea>
 800db9c:	6823      	ldr	r3, [r4, #0]
 800db9e:	442b      	add	r3, r5
 800dba0:	6023      	str	r3, [r4, #0]
 800dba2:	f8d8 3000 	ldr.w	r3, [r8]
 800dba6:	685a      	ldr	r2, [r3, #4]
 800dba8:	bb62      	cbnz	r2, 800dc04 <_malloc_r+0xdc>
 800dbaa:	f8c8 7000 	str.w	r7, [r8]
 800dbae:	e00f      	b.n	800dbd0 <_malloc_r+0xa8>
 800dbb0:	6822      	ldr	r2, [r4, #0]
 800dbb2:	1b52      	subs	r2, r2, r5
 800dbb4:	d420      	bmi.n	800dbf8 <_malloc_r+0xd0>
 800dbb6:	2a0b      	cmp	r2, #11
 800dbb8:	d917      	bls.n	800dbea <_malloc_r+0xc2>
 800dbba:	1961      	adds	r1, r4, r5
 800dbbc:	42a3      	cmp	r3, r4
 800dbbe:	6025      	str	r5, [r4, #0]
 800dbc0:	bf18      	it	ne
 800dbc2:	6059      	strne	r1, [r3, #4]
 800dbc4:	6863      	ldr	r3, [r4, #4]
 800dbc6:	bf08      	it	eq
 800dbc8:	f8c8 1000 	streq.w	r1, [r8]
 800dbcc:	5162      	str	r2, [r4, r5]
 800dbce:	604b      	str	r3, [r1, #4]
 800dbd0:	4630      	mov	r0, r6
 800dbd2:	f000 f82f 	bl	800dc34 <__malloc_unlock>
 800dbd6:	f104 000b 	add.w	r0, r4, #11
 800dbda:	1d23      	adds	r3, r4, #4
 800dbdc:	f020 0007 	bic.w	r0, r0, #7
 800dbe0:	1ac2      	subs	r2, r0, r3
 800dbe2:	bf1c      	itt	ne
 800dbe4:	1a1b      	subne	r3, r3, r0
 800dbe6:	50a3      	strne	r3, [r4, r2]
 800dbe8:	e7af      	b.n	800db4a <_malloc_r+0x22>
 800dbea:	6862      	ldr	r2, [r4, #4]
 800dbec:	42a3      	cmp	r3, r4
 800dbee:	bf0c      	ite	eq
 800dbf0:	f8c8 2000 	streq.w	r2, [r8]
 800dbf4:	605a      	strne	r2, [r3, #4]
 800dbf6:	e7eb      	b.n	800dbd0 <_malloc_r+0xa8>
 800dbf8:	4623      	mov	r3, r4
 800dbfa:	6864      	ldr	r4, [r4, #4]
 800dbfc:	e7ae      	b.n	800db5c <_malloc_r+0x34>
 800dbfe:	463c      	mov	r4, r7
 800dc00:	687f      	ldr	r7, [r7, #4]
 800dc02:	e7b6      	b.n	800db72 <_malloc_r+0x4a>
 800dc04:	461a      	mov	r2, r3
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	42a3      	cmp	r3, r4
 800dc0a:	d1fb      	bne.n	800dc04 <_malloc_r+0xdc>
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	6053      	str	r3, [r2, #4]
 800dc10:	e7de      	b.n	800dbd0 <_malloc_r+0xa8>
 800dc12:	230c      	movs	r3, #12
 800dc14:	6033      	str	r3, [r6, #0]
 800dc16:	4630      	mov	r0, r6
 800dc18:	f000 f80c 	bl	800dc34 <__malloc_unlock>
 800dc1c:	e794      	b.n	800db48 <_malloc_r+0x20>
 800dc1e:	6005      	str	r5, [r0, #0]
 800dc20:	e7d6      	b.n	800dbd0 <_malloc_r+0xa8>
 800dc22:	bf00      	nop
 800dc24:	24000a18 	.word	0x24000a18

0800dc28 <__malloc_lock>:
 800dc28:	4801      	ldr	r0, [pc, #4]	@ (800dc30 <__malloc_lock+0x8>)
 800dc2a:	f7ff bf0f 	b.w	800da4c <__retarget_lock_acquire_recursive>
 800dc2e:	bf00      	nop
 800dc30:	24000a10 	.word	0x24000a10

0800dc34 <__malloc_unlock>:
 800dc34:	4801      	ldr	r0, [pc, #4]	@ (800dc3c <__malloc_unlock+0x8>)
 800dc36:	f7ff bf0a 	b.w	800da4e <__retarget_lock_release_recursive>
 800dc3a:	bf00      	nop
 800dc3c:	24000a10 	.word	0x24000a10

0800dc40 <__ssputs_r>:
 800dc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc44:	688e      	ldr	r6, [r1, #8]
 800dc46:	461f      	mov	r7, r3
 800dc48:	42be      	cmp	r6, r7
 800dc4a:	680b      	ldr	r3, [r1, #0]
 800dc4c:	4682      	mov	sl, r0
 800dc4e:	460c      	mov	r4, r1
 800dc50:	4690      	mov	r8, r2
 800dc52:	d82d      	bhi.n	800dcb0 <__ssputs_r+0x70>
 800dc54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dc5c:	d026      	beq.n	800dcac <__ssputs_r+0x6c>
 800dc5e:	6965      	ldr	r5, [r4, #20]
 800dc60:	6909      	ldr	r1, [r1, #16]
 800dc62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc66:	eba3 0901 	sub.w	r9, r3, r1
 800dc6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc6e:	1c7b      	adds	r3, r7, #1
 800dc70:	444b      	add	r3, r9
 800dc72:	106d      	asrs	r5, r5, #1
 800dc74:	429d      	cmp	r5, r3
 800dc76:	bf38      	it	cc
 800dc78:	461d      	movcc	r5, r3
 800dc7a:	0553      	lsls	r3, r2, #21
 800dc7c:	d527      	bpl.n	800dcce <__ssputs_r+0x8e>
 800dc7e:	4629      	mov	r1, r5
 800dc80:	f7ff ff52 	bl	800db28 <_malloc_r>
 800dc84:	4606      	mov	r6, r0
 800dc86:	b360      	cbz	r0, 800dce2 <__ssputs_r+0xa2>
 800dc88:	6921      	ldr	r1, [r4, #16]
 800dc8a:	464a      	mov	r2, r9
 800dc8c:	f000 fae8 	bl	800e260 <memcpy>
 800dc90:	89a3      	ldrh	r3, [r4, #12]
 800dc92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dc96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc9a:	81a3      	strh	r3, [r4, #12]
 800dc9c:	6126      	str	r6, [r4, #16]
 800dc9e:	6165      	str	r5, [r4, #20]
 800dca0:	444e      	add	r6, r9
 800dca2:	eba5 0509 	sub.w	r5, r5, r9
 800dca6:	6026      	str	r6, [r4, #0]
 800dca8:	60a5      	str	r5, [r4, #8]
 800dcaa:	463e      	mov	r6, r7
 800dcac:	42be      	cmp	r6, r7
 800dcae:	d900      	bls.n	800dcb2 <__ssputs_r+0x72>
 800dcb0:	463e      	mov	r6, r7
 800dcb2:	6820      	ldr	r0, [r4, #0]
 800dcb4:	4632      	mov	r2, r6
 800dcb6:	4641      	mov	r1, r8
 800dcb8:	f000 faa8 	bl	800e20c <memmove>
 800dcbc:	68a3      	ldr	r3, [r4, #8]
 800dcbe:	1b9b      	subs	r3, r3, r6
 800dcc0:	60a3      	str	r3, [r4, #8]
 800dcc2:	6823      	ldr	r3, [r4, #0]
 800dcc4:	4433      	add	r3, r6
 800dcc6:	6023      	str	r3, [r4, #0]
 800dcc8:	2000      	movs	r0, #0
 800dcca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcce:	462a      	mov	r2, r5
 800dcd0:	f000 fad4 	bl	800e27c <_realloc_r>
 800dcd4:	4606      	mov	r6, r0
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	d1e0      	bne.n	800dc9c <__ssputs_r+0x5c>
 800dcda:	6921      	ldr	r1, [r4, #16]
 800dcdc:	4650      	mov	r0, sl
 800dcde:	f7ff feb7 	bl	800da50 <_free_r>
 800dce2:	230c      	movs	r3, #12
 800dce4:	f8ca 3000 	str.w	r3, [sl]
 800dce8:	89a3      	ldrh	r3, [r4, #12]
 800dcea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcee:	81a3      	strh	r3, [r4, #12]
 800dcf0:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf4:	e7e9      	b.n	800dcca <__ssputs_r+0x8a>
	...

0800dcf8 <_svfiprintf_r>:
 800dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfc:	4698      	mov	r8, r3
 800dcfe:	898b      	ldrh	r3, [r1, #12]
 800dd00:	061b      	lsls	r3, r3, #24
 800dd02:	b09d      	sub	sp, #116	@ 0x74
 800dd04:	4607      	mov	r7, r0
 800dd06:	460d      	mov	r5, r1
 800dd08:	4614      	mov	r4, r2
 800dd0a:	d510      	bpl.n	800dd2e <_svfiprintf_r+0x36>
 800dd0c:	690b      	ldr	r3, [r1, #16]
 800dd0e:	b973      	cbnz	r3, 800dd2e <_svfiprintf_r+0x36>
 800dd10:	2140      	movs	r1, #64	@ 0x40
 800dd12:	f7ff ff09 	bl	800db28 <_malloc_r>
 800dd16:	6028      	str	r0, [r5, #0]
 800dd18:	6128      	str	r0, [r5, #16]
 800dd1a:	b930      	cbnz	r0, 800dd2a <_svfiprintf_r+0x32>
 800dd1c:	230c      	movs	r3, #12
 800dd1e:	603b      	str	r3, [r7, #0]
 800dd20:	f04f 30ff 	mov.w	r0, #4294967295
 800dd24:	b01d      	add	sp, #116	@ 0x74
 800dd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd2a:	2340      	movs	r3, #64	@ 0x40
 800dd2c:	616b      	str	r3, [r5, #20]
 800dd2e:	2300      	movs	r3, #0
 800dd30:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd32:	2320      	movs	r3, #32
 800dd34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd38:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd3c:	2330      	movs	r3, #48	@ 0x30
 800dd3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dedc <_svfiprintf_r+0x1e4>
 800dd42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd46:	f04f 0901 	mov.w	r9, #1
 800dd4a:	4623      	mov	r3, r4
 800dd4c:	469a      	mov	sl, r3
 800dd4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd52:	b10a      	cbz	r2, 800dd58 <_svfiprintf_r+0x60>
 800dd54:	2a25      	cmp	r2, #37	@ 0x25
 800dd56:	d1f9      	bne.n	800dd4c <_svfiprintf_r+0x54>
 800dd58:	ebba 0b04 	subs.w	fp, sl, r4
 800dd5c:	d00b      	beq.n	800dd76 <_svfiprintf_r+0x7e>
 800dd5e:	465b      	mov	r3, fp
 800dd60:	4622      	mov	r2, r4
 800dd62:	4629      	mov	r1, r5
 800dd64:	4638      	mov	r0, r7
 800dd66:	f7ff ff6b 	bl	800dc40 <__ssputs_r>
 800dd6a:	3001      	adds	r0, #1
 800dd6c:	f000 80a7 	beq.w	800debe <_svfiprintf_r+0x1c6>
 800dd70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd72:	445a      	add	r2, fp
 800dd74:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd76:	f89a 3000 	ldrb.w	r3, [sl]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	f000 809f 	beq.w	800debe <_svfiprintf_r+0x1c6>
 800dd80:	2300      	movs	r3, #0
 800dd82:	f04f 32ff 	mov.w	r2, #4294967295
 800dd86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd8a:	f10a 0a01 	add.w	sl, sl, #1
 800dd8e:	9304      	str	r3, [sp, #16]
 800dd90:	9307      	str	r3, [sp, #28]
 800dd92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd96:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd98:	4654      	mov	r4, sl
 800dd9a:	2205      	movs	r2, #5
 800dd9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dda0:	484e      	ldr	r0, [pc, #312]	@ (800dedc <_svfiprintf_r+0x1e4>)
 800dda2:	f7f2 faa5 	bl	80002f0 <memchr>
 800dda6:	9a04      	ldr	r2, [sp, #16]
 800dda8:	b9d8      	cbnz	r0, 800dde2 <_svfiprintf_r+0xea>
 800ddaa:	06d0      	lsls	r0, r2, #27
 800ddac:	bf44      	itt	mi
 800ddae:	2320      	movmi	r3, #32
 800ddb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ddb4:	0711      	lsls	r1, r2, #28
 800ddb6:	bf44      	itt	mi
 800ddb8:	232b      	movmi	r3, #43	@ 0x2b
 800ddba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ddbe:	f89a 3000 	ldrb.w	r3, [sl]
 800ddc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddc4:	d015      	beq.n	800ddf2 <_svfiprintf_r+0xfa>
 800ddc6:	9a07      	ldr	r2, [sp, #28]
 800ddc8:	4654      	mov	r4, sl
 800ddca:	2000      	movs	r0, #0
 800ddcc:	f04f 0c0a 	mov.w	ip, #10
 800ddd0:	4621      	mov	r1, r4
 800ddd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddd6:	3b30      	subs	r3, #48	@ 0x30
 800ddd8:	2b09      	cmp	r3, #9
 800ddda:	d94b      	bls.n	800de74 <_svfiprintf_r+0x17c>
 800dddc:	b1b0      	cbz	r0, 800de0c <_svfiprintf_r+0x114>
 800ddde:	9207      	str	r2, [sp, #28]
 800dde0:	e014      	b.n	800de0c <_svfiprintf_r+0x114>
 800dde2:	eba0 0308 	sub.w	r3, r0, r8
 800dde6:	fa09 f303 	lsl.w	r3, r9, r3
 800ddea:	4313      	orrs	r3, r2
 800ddec:	9304      	str	r3, [sp, #16]
 800ddee:	46a2      	mov	sl, r4
 800ddf0:	e7d2      	b.n	800dd98 <_svfiprintf_r+0xa0>
 800ddf2:	9b03      	ldr	r3, [sp, #12]
 800ddf4:	1d19      	adds	r1, r3, #4
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	9103      	str	r1, [sp, #12]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	bfbb      	ittet	lt
 800ddfe:	425b      	neglt	r3, r3
 800de00:	f042 0202 	orrlt.w	r2, r2, #2
 800de04:	9307      	strge	r3, [sp, #28]
 800de06:	9307      	strlt	r3, [sp, #28]
 800de08:	bfb8      	it	lt
 800de0a:	9204      	strlt	r2, [sp, #16]
 800de0c:	7823      	ldrb	r3, [r4, #0]
 800de0e:	2b2e      	cmp	r3, #46	@ 0x2e
 800de10:	d10a      	bne.n	800de28 <_svfiprintf_r+0x130>
 800de12:	7863      	ldrb	r3, [r4, #1]
 800de14:	2b2a      	cmp	r3, #42	@ 0x2a
 800de16:	d132      	bne.n	800de7e <_svfiprintf_r+0x186>
 800de18:	9b03      	ldr	r3, [sp, #12]
 800de1a:	1d1a      	adds	r2, r3, #4
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	9203      	str	r2, [sp, #12]
 800de20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de24:	3402      	adds	r4, #2
 800de26:	9305      	str	r3, [sp, #20]
 800de28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800deec <_svfiprintf_r+0x1f4>
 800de2c:	7821      	ldrb	r1, [r4, #0]
 800de2e:	2203      	movs	r2, #3
 800de30:	4650      	mov	r0, sl
 800de32:	f7f2 fa5d 	bl	80002f0 <memchr>
 800de36:	b138      	cbz	r0, 800de48 <_svfiprintf_r+0x150>
 800de38:	9b04      	ldr	r3, [sp, #16]
 800de3a:	eba0 000a 	sub.w	r0, r0, sl
 800de3e:	2240      	movs	r2, #64	@ 0x40
 800de40:	4082      	lsls	r2, r0
 800de42:	4313      	orrs	r3, r2
 800de44:	3401      	adds	r4, #1
 800de46:	9304      	str	r3, [sp, #16]
 800de48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de4c:	4824      	ldr	r0, [pc, #144]	@ (800dee0 <_svfiprintf_r+0x1e8>)
 800de4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de52:	2206      	movs	r2, #6
 800de54:	f7f2 fa4c 	bl	80002f0 <memchr>
 800de58:	2800      	cmp	r0, #0
 800de5a:	d036      	beq.n	800deca <_svfiprintf_r+0x1d2>
 800de5c:	4b21      	ldr	r3, [pc, #132]	@ (800dee4 <_svfiprintf_r+0x1ec>)
 800de5e:	bb1b      	cbnz	r3, 800dea8 <_svfiprintf_r+0x1b0>
 800de60:	9b03      	ldr	r3, [sp, #12]
 800de62:	3307      	adds	r3, #7
 800de64:	f023 0307 	bic.w	r3, r3, #7
 800de68:	3308      	adds	r3, #8
 800de6a:	9303      	str	r3, [sp, #12]
 800de6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de6e:	4433      	add	r3, r6
 800de70:	9309      	str	r3, [sp, #36]	@ 0x24
 800de72:	e76a      	b.n	800dd4a <_svfiprintf_r+0x52>
 800de74:	fb0c 3202 	mla	r2, ip, r2, r3
 800de78:	460c      	mov	r4, r1
 800de7a:	2001      	movs	r0, #1
 800de7c:	e7a8      	b.n	800ddd0 <_svfiprintf_r+0xd8>
 800de7e:	2300      	movs	r3, #0
 800de80:	3401      	adds	r4, #1
 800de82:	9305      	str	r3, [sp, #20]
 800de84:	4619      	mov	r1, r3
 800de86:	f04f 0c0a 	mov.w	ip, #10
 800de8a:	4620      	mov	r0, r4
 800de8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de90:	3a30      	subs	r2, #48	@ 0x30
 800de92:	2a09      	cmp	r2, #9
 800de94:	d903      	bls.n	800de9e <_svfiprintf_r+0x1a6>
 800de96:	2b00      	cmp	r3, #0
 800de98:	d0c6      	beq.n	800de28 <_svfiprintf_r+0x130>
 800de9a:	9105      	str	r1, [sp, #20]
 800de9c:	e7c4      	b.n	800de28 <_svfiprintf_r+0x130>
 800de9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800dea2:	4604      	mov	r4, r0
 800dea4:	2301      	movs	r3, #1
 800dea6:	e7f0      	b.n	800de8a <_svfiprintf_r+0x192>
 800dea8:	ab03      	add	r3, sp, #12
 800deaa:	9300      	str	r3, [sp, #0]
 800deac:	462a      	mov	r2, r5
 800deae:	4b0e      	ldr	r3, [pc, #56]	@ (800dee8 <_svfiprintf_r+0x1f0>)
 800deb0:	a904      	add	r1, sp, #16
 800deb2:	4638      	mov	r0, r7
 800deb4:	f3af 8000 	nop.w
 800deb8:	1c42      	adds	r2, r0, #1
 800deba:	4606      	mov	r6, r0
 800debc:	d1d6      	bne.n	800de6c <_svfiprintf_r+0x174>
 800debe:	89ab      	ldrh	r3, [r5, #12]
 800dec0:	065b      	lsls	r3, r3, #25
 800dec2:	f53f af2d 	bmi.w	800dd20 <_svfiprintf_r+0x28>
 800dec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dec8:	e72c      	b.n	800dd24 <_svfiprintf_r+0x2c>
 800deca:	ab03      	add	r3, sp, #12
 800decc:	9300      	str	r3, [sp, #0]
 800dece:	462a      	mov	r2, r5
 800ded0:	4b05      	ldr	r3, [pc, #20]	@ (800dee8 <_svfiprintf_r+0x1f0>)
 800ded2:	a904      	add	r1, sp, #16
 800ded4:	4638      	mov	r0, r7
 800ded6:	f000 f879 	bl	800dfcc <_printf_i>
 800deda:	e7ed      	b.n	800deb8 <_svfiprintf_r+0x1c0>
 800dedc:	0800e3a0 	.word	0x0800e3a0
 800dee0:	0800e3aa 	.word	0x0800e3aa
 800dee4:	00000000 	.word	0x00000000
 800dee8:	0800dc41 	.word	0x0800dc41
 800deec:	0800e3a6 	.word	0x0800e3a6

0800def0 <_printf_common>:
 800def0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800def4:	4616      	mov	r6, r2
 800def6:	4698      	mov	r8, r3
 800def8:	688a      	ldr	r2, [r1, #8]
 800defa:	690b      	ldr	r3, [r1, #16]
 800defc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800df00:	4293      	cmp	r3, r2
 800df02:	bfb8      	it	lt
 800df04:	4613      	movlt	r3, r2
 800df06:	6033      	str	r3, [r6, #0]
 800df08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800df0c:	4607      	mov	r7, r0
 800df0e:	460c      	mov	r4, r1
 800df10:	b10a      	cbz	r2, 800df16 <_printf_common+0x26>
 800df12:	3301      	adds	r3, #1
 800df14:	6033      	str	r3, [r6, #0]
 800df16:	6823      	ldr	r3, [r4, #0]
 800df18:	0699      	lsls	r1, r3, #26
 800df1a:	bf42      	ittt	mi
 800df1c:	6833      	ldrmi	r3, [r6, #0]
 800df1e:	3302      	addmi	r3, #2
 800df20:	6033      	strmi	r3, [r6, #0]
 800df22:	6825      	ldr	r5, [r4, #0]
 800df24:	f015 0506 	ands.w	r5, r5, #6
 800df28:	d106      	bne.n	800df38 <_printf_common+0x48>
 800df2a:	f104 0a19 	add.w	sl, r4, #25
 800df2e:	68e3      	ldr	r3, [r4, #12]
 800df30:	6832      	ldr	r2, [r6, #0]
 800df32:	1a9b      	subs	r3, r3, r2
 800df34:	42ab      	cmp	r3, r5
 800df36:	dc26      	bgt.n	800df86 <_printf_common+0x96>
 800df38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800df3c:	6822      	ldr	r2, [r4, #0]
 800df3e:	3b00      	subs	r3, #0
 800df40:	bf18      	it	ne
 800df42:	2301      	movne	r3, #1
 800df44:	0692      	lsls	r2, r2, #26
 800df46:	d42b      	bmi.n	800dfa0 <_printf_common+0xb0>
 800df48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800df4c:	4641      	mov	r1, r8
 800df4e:	4638      	mov	r0, r7
 800df50:	47c8      	blx	r9
 800df52:	3001      	adds	r0, #1
 800df54:	d01e      	beq.n	800df94 <_printf_common+0xa4>
 800df56:	6823      	ldr	r3, [r4, #0]
 800df58:	6922      	ldr	r2, [r4, #16]
 800df5a:	f003 0306 	and.w	r3, r3, #6
 800df5e:	2b04      	cmp	r3, #4
 800df60:	bf02      	ittt	eq
 800df62:	68e5      	ldreq	r5, [r4, #12]
 800df64:	6833      	ldreq	r3, [r6, #0]
 800df66:	1aed      	subeq	r5, r5, r3
 800df68:	68a3      	ldr	r3, [r4, #8]
 800df6a:	bf0c      	ite	eq
 800df6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df70:	2500      	movne	r5, #0
 800df72:	4293      	cmp	r3, r2
 800df74:	bfc4      	itt	gt
 800df76:	1a9b      	subgt	r3, r3, r2
 800df78:	18ed      	addgt	r5, r5, r3
 800df7a:	2600      	movs	r6, #0
 800df7c:	341a      	adds	r4, #26
 800df7e:	42b5      	cmp	r5, r6
 800df80:	d11a      	bne.n	800dfb8 <_printf_common+0xc8>
 800df82:	2000      	movs	r0, #0
 800df84:	e008      	b.n	800df98 <_printf_common+0xa8>
 800df86:	2301      	movs	r3, #1
 800df88:	4652      	mov	r2, sl
 800df8a:	4641      	mov	r1, r8
 800df8c:	4638      	mov	r0, r7
 800df8e:	47c8      	blx	r9
 800df90:	3001      	adds	r0, #1
 800df92:	d103      	bne.n	800df9c <_printf_common+0xac>
 800df94:	f04f 30ff 	mov.w	r0, #4294967295
 800df98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df9c:	3501      	adds	r5, #1
 800df9e:	e7c6      	b.n	800df2e <_printf_common+0x3e>
 800dfa0:	18e1      	adds	r1, r4, r3
 800dfa2:	1c5a      	adds	r2, r3, #1
 800dfa4:	2030      	movs	r0, #48	@ 0x30
 800dfa6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dfaa:	4422      	add	r2, r4
 800dfac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dfb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dfb4:	3302      	adds	r3, #2
 800dfb6:	e7c7      	b.n	800df48 <_printf_common+0x58>
 800dfb8:	2301      	movs	r3, #1
 800dfba:	4622      	mov	r2, r4
 800dfbc:	4641      	mov	r1, r8
 800dfbe:	4638      	mov	r0, r7
 800dfc0:	47c8      	blx	r9
 800dfc2:	3001      	adds	r0, #1
 800dfc4:	d0e6      	beq.n	800df94 <_printf_common+0xa4>
 800dfc6:	3601      	adds	r6, #1
 800dfc8:	e7d9      	b.n	800df7e <_printf_common+0x8e>
	...

0800dfcc <_printf_i>:
 800dfcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfd0:	7e0f      	ldrb	r7, [r1, #24]
 800dfd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dfd4:	2f78      	cmp	r7, #120	@ 0x78
 800dfd6:	4691      	mov	r9, r2
 800dfd8:	4680      	mov	r8, r0
 800dfda:	460c      	mov	r4, r1
 800dfdc:	469a      	mov	sl, r3
 800dfde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dfe2:	d807      	bhi.n	800dff4 <_printf_i+0x28>
 800dfe4:	2f62      	cmp	r7, #98	@ 0x62
 800dfe6:	d80a      	bhi.n	800dffe <_printf_i+0x32>
 800dfe8:	2f00      	cmp	r7, #0
 800dfea:	f000 80d2 	beq.w	800e192 <_printf_i+0x1c6>
 800dfee:	2f58      	cmp	r7, #88	@ 0x58
 800dff0:	f000 80b9 	beq.w	800e166 <_printf_i+0x19a>
 800dff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dff8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dffc:	e03a      	b.n	800e074 <_printf_i+0xa8>
 800dffe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e002:	2b15      	cmp	r3, #21
 800e004:	d8f6      	bhi.n	800dff4 <_printf_i+0x28>
 800e006:	a101      	add	r1, pc, #4	@ (adr r1, 800e00c <_printf_i+0x40>)
 800e008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e00c:	0800e065 	.word	0x0800e065
 800e010:	0800e079 	.word	0x0800e079
 800e014:	0800dff5 	.word	0x0800dff5
 800e018:	0800dff5 	.word	0x0800dff5
 800e01c:	0800dff5 	.word	0x0800dff5
 800e020:	0800dff5 	.word	0x0800dff5
 800e024:	0800e079 	.word	0x0800e079
 800e028:	0800dff5 	.word	0x0800dff5
 800e02c:	0800dff5 	.word	0x0800dff5
 800e030:	0800dff5 	.word	0x0800dff5
 800e034:	0800dff5 	.word	0x0800dff5
 800e038:	0800e179 	.word	0x0800e179
 800e03c:	0800e0a3 	.word	0x0800e0a3
 800e040:	0800e133 	.word	0x0800e133
 800e044:	0800dff5 	.word	0x0800dff5
 800e048:	0800dff5 	.word	0x0800dff5
 800e04c:	0800e19b 	.word	0x0800e19b
 800e050:	0800dff5 	.word	0x0800dff5
 800e054:	0800e0a3 	.word	0x0800e0a3
 800e058:	0800dff5 	.word	0x0800dff5
 800e05c:	0800dff5 	.word	0x0800dff5
 800e060:	0800e13b 	.word	0x0800e13b
 800e064:	6833      	ldr	r3, [r6, #0]
 800e066:	1d1a      	adds	r2, r3, #4
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	6032      	str	r2, [r6, #0]
 800e06c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e070:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e074:	2301      	movs	r3, #1
 800e076:	e09d      	b.n	800e1b4 <_printf_i+0x1e8>
 800e078:	6833      	ldr	r3, [r6, #0]
 800e07a:	6820      	ldr	r0, [r4, #0]
 800e07c:	1d19      	adds	r1, r3, #4
 800e07e:	6031      	str	r1, [r6, #0]
 800e080:	0606      	lsls	r6, r0, #24
 800e082:	d501      	bpl.n	800e088 <_printf_i+0xbc>
 800e084:	681d      	ldr	r5, [r3, #0]
 800e086:	e003      	b.n	800e090 <_printf_i+0xc4>
 800e088:	0645      	lsls	r5, r0, #25
 800e08a:	d5fb      	bpl.n	800e084 <_printf_i+0xb8>
 800e08c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e090:	2d00      	cmp	r5, #0
 800e092:	da03      	bge.n	800e09c <_printf_i+0xd0>
 800e094:	232d      	movs	r3, #45	@ 0x2d
 800e096:	426d      	negs	r5, r5
 800e098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e09c:	4859      	ldr	r0, [pc, #356]	@ (800e204 <_printf_i+0x238>)
 800e09e:	230a      	movs	r3, #10
 800e0a0:	e011      	b.n	800e0c6 <_printf_i+0xfa>
 800e0a2:	6821      	ldr	r1, [r4, #0]
 800e0a4:	6833      	ldr	r3, [r6, #0]
 800e0a6:	0608      	lsls	r0, r1, #24
 800e0a8:	f853 5b04 	ldr.w	r5, [r3], #4
 800e0ac:	d402      	bmi.n	800e0b4 <_printf_i+0xe8>
 800e0ae:	0649      	lsls	r1, r1, #25
 800e0b0:	bf48      	it	mi
 800e0b2:	b2ad      	uxthmi	r5, r5
 800e0b4:	2f6f      	cmp	r7, #111	@ 0x6f
 800e0b6:	4853      	ldr	r0, [pc, #332]	@ (800e204 <_printf_i+0x238>)
 800e0b8:	6033      	str	r3, [r6, #0]
 800e0ba:	bf14      	ite	ne
 800e0bc:	230a      	movne	r3, #10
 800e0be:	2308      	moveq	r3, #8
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e0c6:	6866      	ldr	r6, [r4, #4]
 800e0c8:	60a6      	str	r6, [r4, #8]
 800e0ca:	2e00      	cmp	r6, #0
 800e0cc:	bfa2      	ittt	ge
 800e0ce:	6821      	ldrge	r1, [r4, #0]
 800e0d0:	f021 0104 	bicge.w	r1, r1, #4
 800e0d4:	6021      	strge	r1, [r4, #0]
 800e0d6:	b90d      	cbnz	r5, 800e0dc <_printf_i+0x110>
 800e0d8:	2e00      	cmp	r6, #0
 800e0da:	d04b      	beq.n	800e174 <_printf_i+0x1a8>
 800e0dc:	4616      	mov	r6, r2
 800e0de:	fbb5 f1f3 	udiv	r1, r5, r3
 800e0e2:	fb03 5711 	mls	r7, r3, r1, r5
 800e0e6:	5dc7      	ldrb	r7, [r0, r7]
 800e0e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e0ec:	462f      	mov	r7, r5
 800e0ee:	42bb      	cmp	r3, r7
 800e0f0:	460d      	mov	r5, r1
 800e0f2:	d9f4      	bls.n	800e0de <_printf_i+0x112>
 800e0f4:	2b08      	cmp	r3, #8
 800e0f6:	d10b      	bne.n	800e110 <_printf_i+0x144>
 800e0f8:	6823      	ldr	r3, [r4, #0]
 800e0fa:	07df      	lsls	r7, r3, #31
 800e0fc:	d508      	bpl.n	800e110 <_printf_i+0x144>
 800e0fe:	6923      	ldr	r3, [r4, #16]
 800e100:	6861      	ldr	r1, [r4, #4]
 800e102:	4299      	cmp	r1, r3
 800e104:	bfde      	ittt	le
 800e106:	2330      	movle	r3, #48	@ 0x30
 800e108:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e10c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e110:	1b92      	subs	r2, r2, r6
 800e112:	6122      	str	r2, [r4, #16]
 800e114:	f8cd a000 	str.w	sl, [sp]
 800e118:	464b      	mov	r3, r9
 800e11a:	aa03      	add	r2, sp, #12
 800e11c:	4621      	mov	r1, r4
 800e11e:	4640      	mov	r0, r8
 800e120:	f7ff fee6 	bl	800def0 <_printf_common>
 800e124:	3001      	adds	r0, #1
 800e126:	d14a      	bne.n	800e1be <_printf_i+0x1f2>
 800e128:	f04f 30ff 	mov.w	r0, #4294967295
 800e12c:	b004      	add	sp, #16
 800e12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e132:	6823      	ldr	r3, [r4, #0]
 800e134:	f043 0320 	orr.w	r3, r3, #32
 800e138:	6023      	str	r3, [r4, #0]
 800e13a:	4833      	ldr	r0, [pc, #204]	@ (800e208 <_printf_i+0x23c>)
 800e13c:	2778      	movs	r7, #120	@ 0x78
 800e13e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e142:	6823      	ldr	r3, [r4, #0]
 800e144:	6831      	ldr	r1, [r6, #0]
 800e146:	061f      	lsls	r7, r3, #24
 800e148:	f851 5b04 	ldr.w	r5, [r1], #4
 800e14c:	d402      	bmi.n	800e154 <_printf_i+0x188>
 800e14e:	065f      	lsls	r7, r3, #25
 800e150:	bf48      	it	mi
 800e152:	b2ad      	uxthmi	r5, r5
 800e154:	6031      	str	r1, [r6, #0]
 800e156:	07d9      	lsls	r1, r3, #31
 800e158:	bf44      	itt	mi
 800e15a:	f043 0320 	orrmi.w	r3, r3, #32
 800e15e:	6023      	strmi	r3, [r4, #0]
 800e160:	b11d      	cbz	r5, 800e16a <_printf_i+0x19e>
 800e162:	2310      	movs	r3, #16
 800e164:	e7ac      	b.n	800e0c0 <_printf_i+0xf4>
 800e166:	4827      	ldr	r0, [pc, #156]	@ (800e204 <_printf_i+0x238>)
 800e168:	e7e9      	b.n	800e13e <_printf_i+0x172>
 800e16a:	6823      	ldr	r3, [r4, #0]
 800e16c:	f023 0320 	bic.w	r3, r3, #32
 800e170:	6023      	str	r3, [r4, #0]
 800e172:	e7f6      	b.n	800e162 <_printf_i+0x196>
 800e174:	4616      	mov	r6, r2
 800e176:	e7bd      	b.n	800e0f4 <_printf_i+0x128>
 800e178:	6833      	ldr	r3, [r6, #0]
 800e17a:	6825      	ldr	r5, [r4, #0]
 800e17c:	6961      	ldr	r1, [r4, #20]
 800e17e:	1d18      	adds	r0, r3, #4
 800e180:	6030      	str	r0, [r6, #0]
 800e182:	062e      	lsls	r6, r5, #24
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	d501      	bpl.n	800e18c <_printf_i+0x1c0>
 800e188:	6019      	str	r1, [r3, #0]
 800e18a:	e002      	b.n	800e192 <_printf_i+0x1c6>
 800e18c:	0668      	lsls	r0, r5, #25
 800e18e:	d5fb      	bpl.n	800e188 <_printf_i+0x1bc>
 800e190:	8019      	strh	r1, [r3, #0]
 800e192:	2300      	movs	r3, #0
 800e194:	6123      	str	r3, [r4, #16]
 800e196:	4616      	mov	r6, r2
 800e198:	e7bc      	b.n	800e114 <_printf_i+0x148>
 800e19a:	6833      	ldr	r3, [r6, #0]
 800e19c:	1d1a      	adds	r2, r3, #4
 800e19e:	6032      	str	r2, [r6, #0]
 800e1a0:	681e      	ldr	r6, [r3, #0]
 800e1a2:	6862      	ldr	r2, [r4, #4]
 800e1a4:	2100      	movs	r1, #0
 800e1a6:	4630      	mov	r0, r6
 800e1a8:	f7f2 f8a2 	bl	80002f0 <memchr>
 800e1ac:	b108      	cbz	r0, 800e1b2 <_printf_i+0x1e6>
 800e1ae:	1b80      	subs	r0, r0, r6
 800e1b0:	6060      	str	r0, [r4, #4]
 800e1b2:	6863      	ldr	r3, [r4, #4]
 800e1b4:	6123      	str	r3, [r4, #16]
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1bc:	e7aa      	b.n	800e114 <_printf_i+0x148>
 800e1be:	6923      	ldr	r3, [r4, #16]
 800e1c0:	4632      	mov	r2, r6
 800e1c2:	4649      	mov	r1, r9
 800e1c4:	4640      	mov	r0, r8
 800e1c6:	47d0      	blx	sl
 800e1c8:	3001      	adds	r0, #1
 800e1ca:	d0ad      	beq.n	800e128 <_printf_i+0x15c>
 800e1cc:	6823      	ldr	r3, [r4, #0]
 800e1ce:	079b      	lsls	r3, r3, #30
 800e1d0:	d413      	bmi.n	800e1fa <_printf_i+0x22e>
 800e1d2:	68e0      	ldr	r0, [r4, #12]
 800e1d4:	9b03      	ldr	r3, [sp, #12]
 800e1d6:	4298      	cmp	r0, r3
 800e1d8:	bfb8      	it	lt
 800e1da:	4618      	movlt	r0, r3
 800e1dc:	e7a6      	b.n	800e12c <_printf_i+0x160>
 800e1de:	2301      	movs	r3, #1
 800e1e0:	4632      	mov	r2, r6
 800e1e2:	4649      	mov	r1, r9
 800e1e4:	4640      	mov	r0, r8
 800e1e6:	47d0      	blx	sl
 800e1e8:	3001      	adds	r0, #1
 800e1ea:	d09d      	beq.n	800e128 <_printf_i+0x15c>
 800e1ec:	3501      	adds	r5, #1
 800e1ee:	68e3      	ldr	r3, [r4, #12]
 800e1f0:	9903      	ldr	r1, [sp, #12]
 800e1f2:	1a5b      	subs	r3, r3, r1
 800e1f4:	42ab      	cmp	r3, r5
 800e1f6:	dcf2      	bgt.n	800e1de <_printf_i+0x212>
 800e1f8:	e7eb      	b.n	800e1d2 <_printf_i+0x206>
 800e1fa:	2500      	movs	r5, #0
 800e1fc:	f104 0619 	add.w	r6, r4, #25
 800e200:	e7f5      	b.n	800e1ee <_printf_i+0x222>
 800e202:	bf00      	nop
 800e204:	0800e3b1 	.word	0x0800e3b1
 800e208:	0800e3c2 	.word	0x0800e3c2

0800e20c <memmove>:
 800e20c:	4288      	cmp	r0, r1
 800e20e:	b510      	push	{r4, lr}
 800e210:	eb01 0402 	add.w	r4, r1, r2
 800e214:	d902      	bls.n	800e21c <memmove+0x10>
 800e216:	4284      	cmp	r4, r0
 800e218:	4623      	mov	r3, r4
 800e21a:	d807      	bhi.n	800e22c <memmove+0x20>
 800e21c:	1e43      	subs	r3, r0, #1
 800e21e:	42a1      	cmp	r1, r4
 800e220:	d008      	beq.n	800e234 <memmove+0x28>
 800e222:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e226:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e22a:	e7f8      	b.n	800e21e <memmove+0x12>
 800e22c:	4402      	add	r2, r0
 800e22e:	4601      	mov	r1, r0
 800e230:	428a      	cmp	r2, r1
 800e232:	d100      	bne.n	800e236 <memmove+0x2a>
 800e234:	bd10      	pop	{r4, pc}
 800e236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e23a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e23e:	e7f7      	b.n	800e230 <memmove+0x24>

0800e240 <_sbrk_r>:
 800e240:	b538      	push	{r3, r4, r5, lr}
 800e242:	4d06      	ldr	r5, [pc, #24]	@ (800e25c <_sbrk_r+0x1c>)
 800e244:	2300      	movs	r3, #0
 800e246:	4604      	mov	r4, r0
 800e248:	4608      	mov	r0, r1
 800e24a:	602b      	str	r3, [r5, #0]
 800e24c:	f7f3 faa8 	bl	80017a0 <_sbrk>
 800e250:	1c43      	adds	r3, r0, #1
 800e252:	d102      	bne.n	800e25a <_sbrk_r+0x1a>
 800e254:	682b      	ldr	r3, [r5, #0]
 800e256:	b103      	cbz	r3, 800e25a <_sbrk_r+0x1a>
 800e258:	6023      	str	r3, [r4, #0]
 800e25a:	bd38      	pop	{r3, r4, r5, pc}
 800e25c:	24000a0c 	.word	0x24000a0c

0800e260 <memcpy>:
 800e260:	440a      	add	r2, r1
 800e262:	4291      	cmp	r1, r2
 800e264:	f100 33ff 	add.w	r3, r0, #4294967295
 800e268:	d100      	bne.n	800e26c <memcpy+0xc>
 800e26a:	4770      	bx	lr
 800e26c:	b510      	push	{r4, lr}
 800e26e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e272:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e276:	4291      	cmp	r1, r2
 800e278:	d1f9      	bne.n	800e26e <memcpy+0xe>
 800e27a:	bd10      	pop	{r4, pc}

0800e27c <_realloc_r>:
 800e27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e280:	4680      	mov	r8, r0
 800e282:	4615      	mov	r5, r2
 800e284:	460c      	mov	r4, r1
 800e286:	b921      	cbnz	r1, 800e292 <_realloc_r+0x16>
 800e288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e28c:	4611      	mov	r1, r2
 800e28e:	f7ff bc4b 	b.w	800db28 <_malloc_r>
 800e292:	b92a      	cbnz	r2, 800e2a0 <_realloc_r+0x24>
 800e294:	f7ff fbdc 	bl	800da50 <_free_r>
 800e298:	2400      	movs	r4, #0
 800e29a:	4620      	mov	r0, r4
 800e29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a0:	f000 f81a 	bl	800e2d8 <_malloc_usable_size_r>
 800e2a4:	4285      	cmp	r5, r0
 800e2a6:	4606      	mov	r6, r0
 800e2a8:	d802      	bhi.n	800e2b0 <_realloc_r+0x34>
 800e2aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e2ae:	d8f4      	bhi.n	800e29a <_realloc_r+0x1e>
 800e2b0:	4629      	mov	r1, r5
 800e2b2:	4640      	mov	r0, r8
 800e2b4:	f7ff fc38 	bl	800db28 <_malloc_r>
 800e2b8:	4607      	mov	r7, r0
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	d0ec      	beq.n	800e298 <_realloc_r+0x1c>
 800e2be:	42b5      	cmp	r5, r6
 800e2c0:	462a      	mov	r2, r5
 800e2c2:	4621      	mov	r1, r4
 800e2c4:	bf28      	it	cs
 800e2c6:	4632      	movcs	r2, r6
 800e2c8:	f7ff ffca 	bl	800e260 <memcpy>
 800e2cc:	4621      	mov	r1, r4
 800e2ce:	4640      	mov	r0, r8
 800e2d0:	f7ff fbbe 	bl	800da50 <_free_r>
 800e2d4:	463c      	mov	r4, r7
 800e2d6:	e7e0      	b.n	800e29a <_realloc_r+0x1e>

0800e2d8 <_malloc_usable_size_r>:
 800e2d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2dc:	1f18      	subs	r0, r3, #4
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	bfbc      	itt	lt
 800e2e2:	580b      	ldrlt	r3, [r1, r0]
 800e2e4:	18c0      	addlt	r0, r0, r3
 800e2e6:	4770      	bx	lr

0800e2e8 <_init>:
 800e2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ea:	bf00      	nop
 800e2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ee:	bc08      	pop	{r3}
 800e2f0:	469e      	mov	lr, r3
 800e2f2:	4770      	bx	lr

0800e2f4 <_fini>:
 800e2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2f6:	bf00      	nop
 800e2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2fa:	bc08      	pop	{r3}
 800e2fc:	469e      	mov	lr, r3
 800e2fe:	4770      	bx	lr
